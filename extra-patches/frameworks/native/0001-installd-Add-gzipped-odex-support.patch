Subject: [PATCH 1/2] installd: Add gzipped odex support

Instead of all dex2oat commands with source that has a precompiled
compressed odex file the installd executes the patchoat command that
patches that precompiled file.

The installd needs the patchoat to support 2 additional options:
--input-oat-gz-fd and --swap-fd. Patchoat decompresses the input.

This patch was upstreamed to AOSP (see
https://android-review.googlesource.com/#/q/I54dbfcdc58bc0f57f7eccc3929c09295c597794b)
---
 cmds/installd/commands.cpp | 62 ++++++++++++++++++++++++++++++++++++++--------
 1 file changed, 51 insertions(+), 11 deletions(-)

diff --git a/cmds/installd/commands.cpp b/cmds/installd/commands.cpp
index d4aa7d3..191e39f 100644
--- a/cmds/installd/commands.cpp
+++ b/cmds/installd/commands.cpp
@@ -696,7 +696,8 @@ static int split(char *buf, const char **argv)
 }
 
 static void run_patchoat(int input_fd, int oat_fd, const char* input_file_name,
-    const char* output_file_name, const char *pkgname __unused, const char *instruction_set)
+    const char* output_file_name, const char *pkgname __unused, const char *instruction_set,
+    bool is_gz, int swap_fd)
 {
     static const int MAX_INT_LEN = 12;      // '-'+10dig+'\0' -OR- 0x+8dig
     static const unsigned int MAX_INSTRUCTION_SET_LEN = 7;
@@ -711,25 +712,34 @@ static void run_patchoat(int input_fd, int oat_fd, const char* input_file_name,
     /* input_file_name/input_fd should be the .odex/.oat file that is precompiled. I think*/
     char instruction_set_arg[strlen("--instruction-set=") + MAX_INSTRUCTION_SET_LEN];
     char output_oat_fd_arg[strlen("--output-oat-fd=") + MAX_INT_LEN];
-    char input_oat_fd_arg[strlen("--input-oat-fd=") + MAX_INT_LEN];
+    const char* input_option = is_gz ? "--input-oat-gz-fd=" : "--input-oat-fd=";
+    char input_oat_fd_arg[strlen(input_option) + MAX_INT_LEN];
     const char* patched_image_location_arg = "--patched-image-location=/system/framework/boot.art";
+    char swap_fd_str[strlen("--swap-fd=") + MAX_INT_LEN];
     // The caller has already gotten all the locks we need.
     const char* no_lock_arg = "--no-lock-output";
     sprintf(instruction_set_arg, "--instruction-set=%s", instruction_set);
     sprintf(output_oat_fd_arg, "--output-oat-fd=%d", oat_fd);
-    sprintf(input_oat_fd_arg, "--input-oat-fd=%d", input_fd);
-    ALOGV("Running %s isa=%s in-fd=%d (%s) out-fd=%d (%s)\n",
-          PATCHOAT_BIN, instruction_set, input_fd, input_file_name, oat_fd, output_file_name);
+    sprintf(input_oat_fd_arg, "%s%d", input_option, input_fd);
+
+    if (swap_fd >= 0) {
+        sprintf(swap_fd_str, "--swap-fd=%d", swap_fd);
+    }
 
     /* patchoat, patched-image-location, no-lock, isa, input-fd, output-fd */
-    char* argv[7];
+    char* argv[8];
     argv[0] = (char*) PATCHOAT_BIN;
     argv[1] = (char*) patched_image_location_arg;
     argv[2] = (char*) no_lock_arg;
     argv[3] = instruction_set_arg;
     argv[4] = output_oat_fd_arg;
     argv[5] = input_oat_fd_arg;
-    argv[6] = NULL;
+    argv[6] = swap_fd != -1 ? swap_fd_str : NULL;
+    argv[7] = NULL;
+
+    ALOGE("Patching from '%s' to '%s': %s %s %s %s %s %s %s",
+          input_file_name, output_file_name, argv[0], argv[1], argv[2], argv[3],
+          argv[4], argv[5], argv[6] == NULL ? "" : argv[6]);
 
     execv(PATCHOAT_BIN, (char* const *)argv);
     ALOGE("execv(%s) failed: %s\n", PATCHOAT_BIN, strerror(errno));
@@ -1094,6 +1104,22 @@ static void SetDex2OatAndPatchOatScheduling(bool set_to_bg) {
     }
 }
 
+/*
+ * Computes the gzipped odex file path for the given odex file path.
+ *
+ * Returns false if it failed to determine the gzipped odex file path.
+ */
+static bool calculate_gzipped_odex_file_path(char path[PKG_PATH_MAX])
+{
+    if (strlen(path) + strlen(".gz") + 1 > PKG_PATH_MAX) {
+      ALOGE("odex file path '%s' may be too long to form gzipped odex file path.\n", path);
+      return false;
+    }
+
+    strcat(path, ".gz");
+    return true;
+}
+
 int dexopt(const char *apk_path, uid_t uid, bool is_public,
            const char *pkgname, const char *instruction_set, int dexopt_needed,
            bool vm_safe_mode, bool debuggable, const char* oat_dir, bool boot_complete)
@@ -1105,6 +1131,9 @@ int dexopt(const char *apk_path, uid_t uid, bool is_public,
     const char *input_file;
     char in_odex_path[PKG_PATH_MAX];
     int res, input_fd=-1, out_fd=-1, swap_fd=-1;
+    bool is_gz = false;
+    bool is_patchoat = dexopt_needed == DEXOPT_PATCHOAT_NEEDED ||
+                       dexopt_needed == DEXOPT_SELF_PATCHOAT_NEEDED;
 
     // Early best-effort check whether we can fit the the path into our buffers.
     // Note: the cache path will require an additional 5 bytes for ".swap", but we'll try to run
@@ -1131,6 +1160,17 @@ int dexopt(const char *apk_path, uid_t uid, bool is_public,
     switch (dexopt_needed) {
         case DEXOPT_DEX2OAT_NEEDED:
             input_file = apk_path;
+            calculate_odex_file_path(in_odex_path, apk_path, instruction_set);
+            ALOGI("in_odex_path=%s\n", in_odex_path);
+
+            if (calculate_odex_file_path(in_odex_path, apk_path, instruction_set) &&
+                calculate_gzipped_odex_file_path(in_odex_path) &&
+                !access(in_odex_path, F_OK)) {
+              is_gz = true;
+              is_patchoat = true;
+              input_file = in_odex_path;
+              dexopt_needed = DEXOPT_PATCHOAT_NEEDED;
+            }
             break;
 
         case DEXOPT_PATCHOAT_NEEDED:
@@ -1181,7 +1221,7 @@ int dexopt(const char *apk_path, uid_t uid, bool is_public,
     }
 
     // Create a swap file if necessary.
-    if (ShouldUseSwapFileForDexopt()) {
+    if (is_gz || (!is_patchoat && ShouldUseSwapFileForDexopt())) {
         // Make sure there really is enough space.
         size_t out_len = strlen(out_path);
         if (out_len + strlen(".swap") + 1 <= PKG_PATH_MAX) {
@@ -1233,9 +1273,9 @@ int dexopt(const char *apk_path, uid_t uid, bool is_public,
             exit(67);
         }
 
-        if (dexopt_needed == DEXOPT_PATCHOAT_NEEDED
-            || dexopt_needed == DEXOPT_SELF_PATCHOAT_NEEDED) {
-            run_patchoat(input_fd, out_fd, input_file, out_path, pkgname, instruction_set);
+        if (is_patchoat) {
+            run_patchoat(input_fd, out_fd, input_file, out_path, pkgname, instruction_set,
+                         is_gz, swap_fd);
         } else if (dexopt_needed == DEXOPT_DEX2OAT_NEEDED) {
             const char *input_file_name = strrchr(input_file, '/');
             if (input_file_name == NULL) {
-- 
1.9.1

