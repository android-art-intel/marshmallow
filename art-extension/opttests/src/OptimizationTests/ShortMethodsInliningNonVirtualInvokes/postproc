#!/bin/bash
#
# Copyright (C) 2015 Intel Corporation
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

logcat=$1
str_res=""
res=0

function Exit()
{
    if [ $1 == 1 ]; then
        echo "FAILED: $2"
    else 
        echo "PASSED: $2"
    fi

    exit $1
}

function InvokeDirect()
{
    # example of successful inlining:
#11-13 17:58:31.734  6440  6440 I dex2oat : Successfully inlined boolean OptimizationTests.ShortMethodsInliningNonVirtualInvokes.InvokeDirectIBoolean_001.Test.getThingies()
#11-13 17:58:31.734  6440  6440 I dex2oat : Successfully inlined boolean OptimizationTests.ShortMethodsInliningNonVirtualInvokes.InvokeDirectIBoolean_001.Test.gimme()
#11-13 17:58:31.734  6440  6440 I dex2oat : Successfully inlined void OptimizationTests.ShortMethodsInliningNonVirtualInvokes.InvokeDirectIBoolean_001.Test.setThingies(boolean)
#11-13 17:58:31.734  6440  6440 I dex2oat : Successfully inlined void OptimizationTests.ShortMethodsInliningNonVirtualInvokes.InvokeDirectIBoolean_001.Test.hereyouare(boolean)
#11-13 17:58:31.735  6440  6440 I dex2oat : Successfully inlined boolean OptimizationTests.ShortMethodsInliningNonVirtualInvokes.InvokeDirectIBoolean_001.Test.getThingies()
#11-13 17:58:31.735  6440  6440 I dex2oat : Successfully inlined void OptimizationTests.ShortMethodsInliningNonVirtualInvokes.InvokeDirectIBoolean_001.Test.setThingies(boolean)

## negative tests with BoundsCheck: setThingies method is not in-lined, exception is thrown in setThingies
#
# InvokeDirectAObjectThrowBoundSet_001
# InvokeDirectAObjectThrowBoundSet_002
# InvokeDirectAObjectThrowNullSet_001
# InvokeDirectAObjectThrowNullSet_002
# InvokeDirectRangeAObjectThrowBoundSet_001
# InvokeDirectRangeAObjectThrowNullSet_001
#
##

    if [ "$onlyset" == "false" ]  ;then 

        cat $logcat | grep "Successfully inlined .* OptimizationTests.${pckgname}.${testname}.Test.getThingies" > /dev/null
        if [ "$?" != "0" ]; then
            str_res+=" Test.getThingies inlining failed "
            echo `cat $logcat | grep "Test.getThingies"`
            res=1
        else
            str_res+=" Successfully inlined Test.getThingies();"
        fi

        cat $logcat | grep "Successfully inlined .* OptimizationTests.${pckgname}.${testname}.Test.gimme" > /dev/null

        if [ "$?" != "0" ]; then
            str_res+=" Test.gimme inlining failed "
            echo `cat $logcat | grep "Test.gimme"`
            res=1
        else
            str_res+=" Successfully inlined Test.gimme();"
        fi

    fi

    cat $logcat | grep "Successfully inlined .* OptimizationTests.${pckgname}.${testname}.Test.setThingies" > /dev/null
    if [ "$?" != "0" ]; then
        case $negative in
            false)
                str_res+=" Test.setThingies inlining failed;"
                echo `cat $logcat | grep "Test.setThingies"`
                res=1;;
            true)
                str_res+=" Test.setThingies inlining did not occure as expected;"
        esac
    else
        str_res+=" Successfully inlined Test.setThingies();"

    fi

    cat $logcat | grep "Successfully inlined .* OptimizationTests.${pckgname}.${testname}.Test.hereyouare" > /dev/null

    if [ "$?" != "0" ]; then
        case $negative in
            false)
                str_res+=" Test.hereyouare inlining failed;"
                echo `cat $logcat | grep "Test.hereyouare"`
                res=1;;
            true)
                str_res+=" Test.hereyouare inlining did not occure as expected;"
        esac
    else
        str_res+=" Successfully inlined Test.hereyouare();"

    fi

    Exit $((res)) "$str_res"

}

function InvokeStatic()
{
    # example of successful inlining:
#11-13 17:59:29.685  8086  8086 I dex2oat : Successfully inlined float OptimizationTests.ShortMethodsInliningNonVirtualInvokes.InvokeStaticS_002.Main.getThingies()
#11-13 17:59:29.685  8086  8086 I dex2oat : Successfully inlined void OptimizationTests.ShortMethodsInliningNonVirtualInvokes.InvokeStaticS_002.Main.setThingies(float)

## negative tests with BoundsCheck: setThingies method is not in-lined, exception is thrown in setThingies
#
#InvokeStaticAObjectThrowBoundSet_001
#InvokeStaticAObjectThrowBoundSet_002
#InvokeStaticAObjectThrowNullSet_001
#InvokeStaticAObjectThrowNullSet_002
#InvokeStaticRangeAObjectThrowBoundSet_001
#InvokeStaticRangeAObjectThrowNullSet_001
#
##   
    if [ "$onlyset" == "false" ]  ;then

        cat $logcat | grep "Successfully inlined .* OptimizationTests.${pckgname}.${testname}.${fromclass}.getThingies" > /dev/null
        if [ "$?" != "0" ]; then
            str_res+=" ${fromclass}.getThingies() inlining failed "
            echo `cat $logcat | grep "${fromclass}.getThingies"`
            res=1
        fi

    fi

    cat $logcat | grep "Successfully inlined .* OptimizationTests.${pckgname}.${testname}.${fromclass}.setThingies" > /dev/null
    if [ "$?" != "0" ]; then
        case $negative in
            false)
                str_res+=" ${fromclass}.setThingies inlining failed;"
                echo `cat $logcat | grep "${fromclass}.setThingies"`
                res=1;;
            true)
                str_res+=" ${fromclass}.setThingies inlining did not occure as expected;"
        esac
    else
        str_res+=" Successfully inlined ${fromclass}.setThingies();"
    fi

    Exit $((res)) "$str_res"

}

function InvokeSuper()
{
    # example of successful inlining:
#11-13 17:59:30.628  8114  8114 I dex2oat : Successfully inlined boolean OptimizationTests.ShortMethodsInliningNonVirtualInvokes.InvokeSuperIBoolean_001.SuperTest.getThingies()
#11-13 17:59:30.628  8114  8114 I dex2oat : Successfully inlined void OptimizationTests.ShortMethodsInliningNonVirtualInvokes.InvokeSuperIBoolean_001.SuperTest.setThingies(boolean)

## negative tests with BoundsCheck: setThingies method is not in-lined, exception is thrown in setThingies
#
# InvokeSuperAObjectThrowBoundSet_001
# InvokeSuperAObjectThrowBoundSet_002
# InvokeSuperAObjectThrowNullSet_001
# InvokeSuperAObjectThrowNullSet_002
# InvokeSuperRangeAObjectThrowBoundSet_001
# InvokeSuperRangeAObjectThrowNullSet_001
#
##

    if [ "$onlyset" == "false" ]  ;then 

        cat $logcat | grep "Successfully inlined .* OptimizationTests.${pckgname}.${testname}.SuperTest.getThingies" > /dev/null
        if [ "$?" != "0" ]; then
            str_res+=" SuperTest.getThingies() inlining failed;"
            echo `cat $logcat | grep "superTest.getThingies"`
            res=1
        else
            str_res+=" Successfully inlined SuperTest.getThingies();"
        fi

    fi

    cat $logcat | grep "Successfully inlined .* OptimizationTests.${pckgname}.${testname}.SuperTest.setThingies" > /dev/null
    if [ "$?" != "0" ]; then
        case $negative in
            false)
                str_res+=" SuperTest.setThingies inlining failed;"
                echo `cat $logcat | grep "SuperTest.setThingies"`
                res=1;;
            true)
                str_res+=" SuperTest.setThingies inlining did not occure as expected;"
        esac 
    else
        str_res+=" Successfully inlined SuperTest.setThingies();"
    fi

    Exit $((res)) "$str_res"

}

onlyset=false
negative=false

case $testname in
   InvokeDirect*)
      case $testname in
          InvokeDirectAEmpty_001 | InvokeDirectRangeAEmpty_001 | InvokeDirectRangeSEmpty_001 | InvokeDirectSEmpty_001) onlyset=true;;
          InvokeDirectAObjectThrow* | InvokeDirectRangeAObjectThrow*) negative=true;;
      esac
      InvokeDirect
      ;;
   InvokeStatic*)
      case $testname in
          InvokeStaticAEmpty_001 | InvokeStaticRangeAEmpty_001) onlyset=true; fromclass=Main;;
          InvokeStaticI* | InvokeStaticRangeI*) fromclass=Test;;
          InvokeStaticAObjectThrow* | InvokeStaticRangeAObjectThrow*) fromclass=Main; negative=true;;
          *) fromclass=Main;;
      esac
      InvokeStatic
      ;;
   InvokeSuper*)
      case $testname in
          InvokeSuperRangeSEmpty_001 | InvokeSuperSEmpty_001) onlyset=true;;
          InvokeSuperAObjectThrow* | InvokeSuperRangeAObjectThrow*) negative=true;;
      esac
      InvokeSuper
      ;;
esac

