#!/bin/bash
#
# Copyright (C) 2015 Intel Corporation
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#


packagedir=`echo "$(cd $(dirname $0); pwd)/../"`
currdir=`echo "$(cd $(dirname $0); pwd)"`
declare -a testMethodsCounts=('testLoopAddInt:0' 'testLoopAddLong:0' 'testLoopSubInt:0' 'testLoopSubLong:0' 'testLoopMulInt:1' 'testLoopMulLong:1' 'testLoopDivInt:1' 'testLoopDivLong:1' 'testLoopRemInt:1' 'testLoopRemLong:1')

logcat=$1
str_res=""
res=0

packagename=$(basename `cd $packagedir ; pwd`)
metapackagename=$(dirname `cd $packagedir ; pwd`)
testname=${PWD##*/}
packagename=${PWD%%/$testname}
packagename=${packagename##*/}
metapackagename=${PWD%%/$packagename/$testname}
metapackagename=${metapackagename##*/}

function Exit()
{

   if [ ! $1 = 0 ]; then
       echo -e "FAILED:\n"$2
   else 
       echo -e "PASSED:\n"$2
   fi

   exit $1
}


#TODO: remove this function if unused
function FilterLogcat() 
{
    #Remove everything except dex2oat from logcat.
    cat ${logcat} | grep "dex2oat" > ${logcat}_filtered
    if [ ! -s ${logcat}_filtered ] ; then
        Exit 1 "Failed to process logcat file $logcat: expected dex2oat entries not found"
    else 
        logcat=${logcat}_filtered
    fi
}

function ExtractMethodLogcat() {
    methodName=$1
    number_regexp='^[0-9]+$'
    pattern="Constant[ ]*Calculation[ ]*Sinking: Try to optimize L${metapackagename}/${packagename}/${testname}/Main"


    linenumber1=`grep -n "${pattern};${methodName}," ${logcat} | cut -f1 -d: | head  -1`

    if ! [[ "x$linenumber1" == "x" || $linenumber1 =~ $number_regexp ]] ; then
        Exit 1 "UNEXPECTED: Constant Calculation Sinking messages not found, check if optimization is not disabled"
    fi



    linenumber2=`tail -n +$((linenumber1+1)) $logcat |grep -n "${pattern}"  | grep -v ";${methodName}," | cut -f1 -d: | head  -1`

    flag_no_other_methods="false"
    if [[ "x$linenumber2" == "x" ]]; then
        linenumber2=`cat ${logcat} | wc -l`
        flag_no_other_methods="true"
    else 
# remember that we cut linenumber 1 lines when calculating linenumber2
        linenumber2=$((linenumber2+linenumber1))
    fi


    if ! [[ $linenumber2 =~ $number_regexp ]] ; then
        Exit 1 "UNEXPECTED: Constant Calculation Sinking messages not found, check if optimization is not disabled"
    fi

    if [[ $flag_no_other_method =~ "true" ]] ; then 
       linenumber2=$((linenumber2-1))
    fi
    

    sed -n ${linenumber1},${linenumber2}p  ${logcat} > ${logcat}_${methodName}
    if [ ! -s ${logcat}_${methodName} ] ; then
        Exit 1 "UNEXPECTED: Failed to extract Constant Calculation Sinking messages for method ${methodName} from logcat file ${logcat}"
    fi

    
}



function ExpectedApplied_postproc()
{
    expectedCount=$1
    methodName=$2
    logcat_file=${logcat}_$methodName


    ExtractMethodLogcat $methodName

    successfully_sunk=`cat ${logcat_file} | grep "Constant[ ]*Calculation[ ]*Sinking: Successfully sunk" | wc -l`

    if [[ "$successfully_sunk" == "$expectedCount" ]]; then
        str_res+="EXPECTED: Constant Calculation Sinking marker found $expectedCount time(s) for method $methodName;\n"
        res=$((res + 0))
    elif [[ "$successfully_sunk" != "$expectedCount" ]]; then
        str_res+="UNEXPECTED: Constant Calculation Sinking marker found $successfully_sunk time(s) instead of $expectedCount for method $methodName;\n"
        res=$((res + 1))
    else
        str_res+="UNEXPECTED: Postprocessing failed for method $methodName;\n"
        res=$((res + 1))
    fi


}


#Iterate over methods:
for i in "${testMethodsCounts[@]}" ; do
     methodName="${i%%:*}"
     expectedCount="${i##*:}"
     ExpectedApplied_postproc $expectedCount $methodName
done

## NonTemporalMove:
expectedCountNonTeporalMove=6
mir_marked_by_nontemporalmove=`cat ${logcat} | grep "Non[ ]*Temporal[ ]*Move: MIR:" | grep "aput" | grep "has been marked" | wc -l`
 if [[ "$mir_marked_by_nontemporalmove" == "$expectedCountNonTeporalMove" ]]; then
    str_res+="EXPECTED: Non temporal move optimization marker found $expectedCountNonTeporalMove time(s)\n"
    res=$((res + 0))
elif [[ "$mir_marked_by_nontemporalmove" != "$expectedCountNonTeporalMove" ]]; then
    str_res+="UNEXPECTED: Non temporal move optimization marker found $mir_marked_by_nontemporalmove time(s) instead of $expectedCountNonTeporalMove\n"
    res=$((res + 1))
fi

Exit $((res)) "$str_res"

   


