/*
 * Copyright (C) 2015 Intel Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by Dalvik Fuzzer tool (3.4.001). Sat Oct 25 12:54:56 2014
package OptimizationTests.regression.test778_1;

import OptimizationTests.regression.shared.*;

public class Main extends FuzzerUtils {

    public static final int N = 100;

    public static void main(String[] sl) {

        long hm = -8556206876710601605L, t[] = new long[N];
        byte i = 28;
        short sm3 = 28171;
        float l4 = 79.952F;
        int jg = 29985, b = 3669, c = 30586, cp = 10308, p7k = 2039, oc8 = 25377, q[] = new int[N];
        double ql = 118.21;

        init(q, -30811);
        init(t, -299543884058635583L);

        jg = 1;
        while (++jg < 92) {
            b = 1;
            while (++b < 7) {
                for (ql = 1; ql < jg; ql++) {
                    l4 += (hm--);
                    c *= (int) l4;
                    c *= (int) (c = (int) ((ql * c) - -2623282973252310348L));
                    try {
                        hm ^= (c--);
                        c -= (int) (hm * ((q[b + 1] -= sm3) + (++c)));
                    } catch (ArrayIndexOutOfBoundsException cx) {
                        c += (int) ql;
                    }
                    c += (int) (((ql * b) + b) - b);
                    c <<= (int) hm;
                }
                c -= (int) (hm + (jg - (t[b - 1] = cp)));
                q[jg - 1] -= (int) ((--c) * (jg + (cp = (int) l4)));
                for (p7k = b; p7k < 10; p7k++) {
                    hm -= (long) -36.747F;
                    hm -= ((i = (byte) (cp + -40740)) * 19311);
                    hm += (long) -41.594F;
                    q[b + 1] -= (cp++);
                    q[p7k - 1] *= (((cp -= cp) * b) * p7k);
                    t[b] *= (-6135368312614570772L - (c - c));
                }
            }
            c *= (int) (ql * (hm--));
            oc8 = 1;
            do {
                c -= -45280;
                c += cp;
            } while (++oc8 < 71);
        }

        System.out.println("jg b ql = " + jg + "," + b + ","
                + Double.doubleToLongBits(ql));
        System.out.println("l4 hm c = " + Float.floatToIntBits(l4) + "," + hm
                + "," + c);
        System.out.println("sm3 cp p7k = " + sm3 + "," + cp + "," + p7k);
        System.out.println("i oc8 q = " + i + "," + oc8 + "," + checkSum(q));
        System.out.println("t = " + checkSum(t));

    }
}
