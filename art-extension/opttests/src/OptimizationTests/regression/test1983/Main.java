/*
 * Copyright (C) 2015 Intel Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by Dalvik Fuzzer tool (3.5.001). Sun Apr 26 09:30:56 2015
package OptimizationTests.regression.test1983;

import OptimizationTests.regression.shared.*;

public class Main extends FuzzerUtils {

    public static final int N = 100;

    public static long lFld=17941L;

    public static long lMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;

public static long lMeth(int i5, int i6) {

    long l1=7L, l2=14066491L;
    int i7=141, i8=427, iArr1[][]=new int[N][N];
    boolean b1=true;
    short s1=9669;
    float f=1.700F, f1=-2.946F;

    init(iArr1, -7);

    i7 = 1;
    while (++i7 < 84) {
        for (f = 22; f > 1; f--) {
            l1 += (long)(((s1 * i5) + (i7 - 2.686F)) - ((++l1) * (i7 + i7)));
            iArr1[(int)(f)][(9 >>> 1) % N] >>= (int)(((l1++) + (l1 * 0)) + -2.18885);
            i6 -= (int)l1;
            l1 <<= (long)((f + (i5 * i7)) * f);
            i6 = (int)((i5 = (s1++)) + ((f + i7) - i7));
            for (i8 = 5; i8 < 93; i8++) {
                l2 = ((i6 *= (int)4170008503539154721L) * i6);
                f1 *= l2;
                i5 = (int)f1;
                b1 = true;
            }
        }
    }
    long meth_res = i5 + i6 + i7 + Float.floatToIntBits(f) + l1 + s1 + i8 + l2 + Float.floatToIntBits(f1) + (b1 ? 1 :
        0) + checkSum(iArr1);
    lMeth_check_sum += meth_res;
    return (long)meth_res;
}

public static int iMeth(float f2, float f3, int i11) {

    long lArr[]=new long[N];
    byte by1=122;
    int i12=-5, i13=11, i14=14079, iArr3[]=new int[N];
    double d1=-100.98228;

    init(lArr, -8L);
    init(iArr3, 116);

    i12 = 81;
    while (--i12 > 0) {
        if (37928 <= ((lFld + (lFld - i12)) - Float.intBitsToFloat(-63779))) continue;
        d1 = (lArr[i12 - 1] - lArr[i12]);
        lArr[i12] = (iArr3[i12]++);
    }
    for (i13 = 4; i13 < 98; i13++) {
        i14 = ((i14 = (12 - (by1 - i11))) * ((i11 * i11) * (i11 + i13)));
    }
    long meth_res = Float.floatToIntBits(f2) + Float.floatToIntBits(f3) + i11 + i12 + Double.doubleToLongBits(d1) + i13
        + i14 + by1 + checkSum(lArr) + checkSum(iArr3);
    iMeth_check_sum += meth_res;
    return (int)meth_res;
}

public static void main(String[] strArr) {

    byte by=-69;
    long l=219L;
    int i=-40431, i1=33483, i2=109, i3=173, i4=-13, i9=-32094, i10=-3, i15=-7, iArr[][]=new int[N][N], iArr2[]=new
        int[N];
    short s=-30235, sArr[]=new short[N];
    boolean b=true, bArr[]=new boolean[N];
    float f4=0.779F, fArr[]=new float[N];
    double d=1.128234, dArr[]=new double[N];

    init(bArr, true);
    init(iArr, -3);
    init(sArr, (short)-29828);
    init(iArr2, -6);
    init(fArr, -114.883F);
    init(dArr, 22.53769);

    for (i = 2; i < 88; i++) {
        if (b | bArr[i]) continue;
        i1 += i;
        for (i2 = 2; i2 < 34; ++i2) {
            i1 += (i2 - ((14 - (i2 + i3)) - i4));
        }
        i3 *= (int)(iArr[i - 1][i] = (int)d);
        iArr[i + 1][i - 1] += (int)((l + (i2 * i1)) + (s--));
        by >>= (byte)(40298 + s);
        sArr[i - 1] -= (short)(lMeth((int)(s - -1L), 188) - ((-(d * i3)) + (120.48140 - (++iArr2[i]))));
    }
    for (i9 = 3; i9 < 94; i9++) {
        i4 >>= ((--i4) + i9);
        if ((l - (iArr2[i9] * (--i3))) != (++fArr[i9])) continue;
        for (i10 = i9; i10 < i9; ++i10) {
            d *= ((fArr[i9 - 1] + (-36973 - (i10 + i4))) * ((l * i1) - (l + -9)));
            i3 = (--i1);
            i3 = (int)l;
            dArr[i10 - 1] += l;
            d = i1;
        }
        by += (byte)i9;
        iArr2[i9 + 1] <<= (int)(i + ((i3 - i) * (-(l -= i10))));
        i4 = iMeth(f4, f4, i);
        iArr2[i9 - 1] = (i - i9);
        for (i15 = i9; i15 < 89; ++i15) {
            iArr[i9 - 1][i9 + 1] += i15;
            s |= (short)(i4++);
        }
    }

    System.out.println("i b i1 = " + i + "," + (b ? 1 : 0) + "," + i1);
    System.out.println("i2 i3 i4 = " + i2 + "," + i3 + "," + i4);
    System.out.println("d l s = " + Double.doubleToLongBits(d) + "," + l + "," + s);
    System.out.println("by i9 i10 = " + by + "," + i9 + "," + i10);
    System.out.println("f4 i15 bArr = " + Float.floatToIntBits(f4) + "," + i15 + "," + checkSum(bArr));
    System.out.println("iArr sArr iArr2 = " + checkSum(iArr) + "," + checkSum(sArr) + "," + checkSum(iArr2));
    System.out.println("fArr dArr = " + Double.doubleToLongBits(checkSum(fArr)) + "," +
        Double.doubleToLongBits(checkSum(dArr)));

    System.out.println("lFld = " + lFld);

    System.out.println("lMeth_check_sum: " + lMeth_check_sum);
    System.out.println("iMeth_check_sum: " + iMeth_check_sum);
}
}
