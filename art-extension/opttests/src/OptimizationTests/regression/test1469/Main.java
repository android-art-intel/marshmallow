/*
 * Copyright (C) 2015 Intel Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by Dalvik Fuzzer tool (3.5.001). Sun Feb  8 12:46:57 2015
package OptimizationTests.regression.test1469;

import OptimizationTests.regression.shared.*;

public class Main extends FuzzerUtils {

    public static final int N = 100;

    public static int iFld=-71;

public static void main(String[] strArr) {

    byte by=-56;
    long l=-6850837707159267321L, l1=-1749046100L, lArr[]=new long[N];
    short s=26959;
    float f=2.223F, fArr[]=new float[N];
    double d=0.19409, d1=30.87168;
    int i=176, i1=-202, i2=40110, i3=-1, i4=44564, i5=1, iArr[]=new int[N];
    boolean b=true;

    init(iArr, 12);
    init(fArr, -91.397F);
    init(lArr, 165L);

    i = 1;
    while (++i < 76) {
        for (d = 1; d < i; ++d) {
            i1 = (--iArr[i]);
            for (iFld = 3; iFld < 52; iFld++) {
                s += (short)(((iFld * i1) + i1) - i);
                fArr[(int)(d - 1)] -= (((l + l1) * (l--)) + i);
                iArr[iFld - 1] = i2;
                f *= ((++i2) + (i1++));
                i2 += (iFld | i1);
            }
            i2 *= (int)l1;
            b = b;
            i1 += iFld;
            f = iFld;
        }
        i3 = 20;
        do {
            for (i4 = 89; i4 > 5; i4--) {
                iArr[i4] |= (int)(by - (iFld - f));
                l = 923862419L;
                d1 -= i3;
                lArr[i3] -= (-6 + (i2--));
            }
            i5 = 1;
            do {
                i1 = i2;
                iArr[i] = (int)(++l1);
                by = (byte)(((i4 - i4) - (i1 + i3)) + i4);
            } while (++i5 < 13);
            l1 += l;
            i2 |= (++i1);
        } while (--i3 > 0);
    }

    System.out.println("i d i1 = " + i + "," + Double.doubleToLongBits(d) + "," + i1);
    System.out.println("s l l1 = " + s + "," + l + "," + l1);
    System.out.println("i2 f b = " + i2 + "," + Float.floatToIntBits(f) + "," + (b ? 1 : 0));
    System.out.println("i3 i4 by = " + i3 + "," + i4 + "," + by);
    System.out.println("d1 i5 iArr = " + Double.doubleToLongBits(d1) + "," + i5 + "," + checkSum(iArr));
    System.out.println("fArr lArr = " + Double.doubleToLongBits(checkSum(fArr)) + "," + checkSum(lArr));

    System.out.println("iFld = " + iFld);
}
}
