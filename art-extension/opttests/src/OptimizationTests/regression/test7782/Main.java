/*
 * Copyright (C) 2015 Intel Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by Dalvik Fuzzer tool (3.5.001). Fri Apr  3 15:41:25 2015
package OptimizationTests.regression.test7782;

import OptimizationTests.regression.shared.*;

public class Main extends FuzzerUtils {

    public static final int N = 100;

    public static int iFld=-219;

public static void main(String[] strArr) {

    double d=-2.82828, dArr[]=new double[N];
    short s=15008, s1=27669;
    int i=-13, i1=41538, i2=-71, i3=-26642, i4=36802, iArr[]=new int[N];
    float f=-1.497F, f1=99.893F;
    byte by=93;
    long l=-129L, lArr[]=new long[N];

    init(iArr, 43897);
    init(dArr, 67.29072);
    init(lArr, 6781377215381902188L);

    for (iFld = 1; iFld < 78; ++iFld) {
        iArr[iFld] += (int)(l++);
        i = s;
        i += (((iFld * by) + iFld) - iFld);
        l ^= s;
    }
    for (i1 = 2; i1 < 76; i1++) {
        iArr[i1 + 1] -= (int)(l * ((--i) * -2857));
        i = (int)(-2516595941L >> (long)((-7200829302360063374L + (i + iFld)) - d));
        s = (short)(l * 7);
        i &= (int)((13 * iFld) * (--dArr[i1 - 1]));
        i -= (((iFld * iFld) * (--i)) * (--i));
        i >>= (int)(++l);
        i = (int)l;
        i2 = 1;
        while (++i2 < 55) {
            i += (i2 | iFld);
            i += (i2 * i2);
        }
        iArr[i1] = (int)((i += (int)(i3 - d)) + i1);
    }
    i4 = 1;
    while (++i4 < 86) {
        l += i4;
        i3 = (int)(((f * s1) - (l - i2)) + (i1 - (iFld + 7)));
    }
    for (f1 = 78; f1 > 1; f1 -= 3) {
        l >>= (++lArr[(int)(f1)]);
        i3 >>= ((205 - (i + i2)) - (i3++));
        i3 -= (int)l;
        i3 *= (int)(Long.reverseBytes(-(l--)) << (long)((f * i4) * (i2 * i)));
    }

    System.out.println("l i s = " + l + "," + i + "," + s);
    System.out.println("by i1 d = " + by + "," + i1 + "," + Double.doubleToLongBits(d));
    System.out.println("i2 i3 i4 = " + i2 + "," + i3 + "," + i4);
    System.out.println("f s1 f1 = " + Float.floatToIntBits(f) + "," + s1 + "," + Float.floatToIntBits(f1));
    System.out.println("iArr dArr lArr = " + checkSum(iArr) + "," + Double.doubleToLongBits(checkSum(dArr)) + "," +
        checkSum(lArr));

    System.out.println("iFld = " + iFld);
}
}
