/*
 * Copyright (C) 2015 Intel Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by Dalvik Fuzzer tool (3.5.001). Fri Jan  9 23:39:54 2015
package OptimizationTests.regression.test1130;

import OptimizationTests.regression.shared.*;

public class Main extends FuzzerUtils {

    public static final int N = 100;


public static void main(String[] strArr) {

    byte by=123;
    float f=-1.744F, fArr[]=new float[N];
    long l=0L;
    int i=-63706, i1=14456, i2=-1, i3=-19, i4=-42053, i5=-34891, i6=13, i7=-4295, iArr[][]=new int[N][N], iArr1[]=new
        int[N];
    double d=1.120048, d1=-23.126010, dArr[]=new double[N];
    short s=29550;

    init(iArr, -22190);
    init(fArr, 7.710F);
    init(iArr1, 82);
    init(dArr, 0.85874);

    i = 1;
    do {
        l += (i1 = ((i1 + i1) - i));
        for (i2 = i; i2 < 68; ++i2) {
            for (i3 = 6; i3 < 97; ++i3) {
                i1 += (i3 * i3);
                i1 *= (int)((-(i + f)) * i1);
                by += (byte)Float.floatToRawIntBits((-(i1++)) - (i1 += i2));
            }
            i1 -= (int)Double.longBitsToDouble((i1 = (int)l) * (i2 - i3));
            i1 += (int)((i1 - (i + i2)) * 274819934246903953L);
            l &= (((i3 + s) + (i + i3)) * (--iArr[i2][i]));
            fArr[i2] += l;
            i1 = i4;
        }
    } while (++i < 76);
    for (i5 = 1; i5 < 93; ++i5) {
        d *= (-i4);
        for (d1 = 2; d1 < 57; d1++) {
            i1 += (int)(d++);
            l -= Math.abs(i5);
            i4 += (int)((l++) - l);
            i4 *= (int)(((i1 = (int)l) * i1) + iArr1[(int)(d1)]);
        }
        for (i6 = 1; i6 < i5; ++i6) {
            for (i7 = 19; i7 > 1; --i7) {
                i4 *= (int)(((--i4) * (-(i1 - -2.79901))) - ((l + i5) * (--i4)));
                f += (-9 + (i7 * i7));
                i4 <<= i2;
                dArr[i6 + 1] = (d--);
            }
        }
    }

    System.out.println("i l i1 = " + i + "," + l + "," + i1);
    System.out.println("i2 i3 f = " + i2 + "," + i3 + "," + Float.floatToIntBits(f));
    System.out.println("by s i4 = " + by + "," + s + "," + i4);
    System.out.println("i5 d d1 = " + i5 + "," + Double.doubleToLongBits(d) + "," + Double.doubleToLongBits(d1));
    System.out.println("i6 i7 iArr = " + i6 + "," + i7 + "," + checkSum(iArr));
    System.out.println("fArr iArr1 dArr = " + Double.doubleToLongBits(checkSum(fArr)) + "," + checkSum(iArr1) + "," +
        Double.doubleToLongBits(checkSum(dArr)));

}
}
