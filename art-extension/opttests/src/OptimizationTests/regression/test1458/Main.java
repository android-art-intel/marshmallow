/*
 * Copyright (C) 2015 Intel Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by Dalvik Fuzzer tool (3.5.001). Sat Jan 31 03:43:38 2015
package OptimizationTests.regression.test1458;

import OptimizationTests.regression.shared.*;

public class Main extends FuzzerUtils {

    public static final int N = 100;


    public static long byMeth_check_sum = 0;

public static byte byMeth(long l1, long l2, float f1) {

    boolean b=true, b1=true;
    long lArr1[]=new long[N];
    byte by1=86;
    int i5=-14, i6=-13, i7=-3060, i8=-119, i9=-63520;

    init(lArr1, -15129L);

    i5 = 1;
    while (++i5 < 91) {
        for (i6 = 1; i6 < 3; i6++) {
            for (i7 = 5; i7 < 85; ++i7) {
                lArr1[i7] ^= (i8--);
                b = b1;
                i8 = ((i8 + (--i9)) - ((by1 - i5) * (i5 - i9)));
                i9 = i6;
                i9 += (int)l2;
                l2 = i5;
                if ((b1 = b) ^ (b1 = (b = b))) continue;
                i8 *= i7;
            }
        }
        l1 = (++i8);
    }
    long meth_res = l1 + l2 + Float.floatToIntBits(f1) + i5 + i6 + i7 + i8 + (b ? 1 : 0) + (b1 ? 1 : 0) + i9 + by1 +
        checkSum(lArr1);
    byMeth_check_sum += meth_res;
    return (byte)meth_res;
}

public static void main(String[] strArr) {

    double d=-2.3376;
    short s=-2723;
    byte by=-95;
    long l=15419L, lArr[]=new long[N];
    int i=-44087, i1=8, i2=3059, i3=-29489, i4=-66, iArr[]=new int[N];
    float f=2.45F, fArr[]=new float[N];

    init(iArr, 13);
    init(lArr, -11L);
    init(fArr, 107.26F);

    f -= iArr[(i >>> 1) % N];
    for (i1 = 5; i1 < 91; i1++) {
        i = (int)(((l - l) * (by - i1)) + (by--));
        iArr[i1 - 1] = i1;
        for (i2 = 1; i2 < 20; i2++) {
            i <<= (int)(iArr[i2 - 1] = (int)lArr[i2]);
            d = (((l + l) - (s - l)) | (i3 ^= (int)(-4370774203034530095L + i2)));
            i3 += (i2 + i1);
            i3 *= (int)(l * (f++));
            iArr[i1] = (((24041 - (i2 * i2)) + (i3 + 86)) + (-iArr[i2]));
            for (i4 = 14; i4 > 1; --i4) {
                iArr[i1 - 1] *= (int)l;
                i3 += (i4 | i3);
                d *= (-(++i));
                iArr[i2 + 1] = (-244 - ((--i3) - -18628));
                i3 = (i++);
                f += ((++f) - (i--));
                fArr[i4] -= (by--);
                s = (short)(i >>= (s * (i1 - i3)));
                i3 -= (int)(--d);
                i3 += (i4 | l);
            }
            i3 *= i2;
            l = (long)(i - ((d * i4) + (17.129572 * (i1 - d))));
        }
        if ((-(byMeth(l, l, 0.0F) * (i1 + 82))) >= -46) break;
    }
    i3 += i2;

    System.out.println("f i i1 = " + Float.floatToIntBits(f) + "," + i + "," + i1);
    System.out.println("l by i2 = " + l + "," + by + "," + i2);
    System.out.println("d s i3 = " + Double.doubleToLongBits(d) + "," + s + "," + i3);
    System.out.println("i4 iArr lArr = " + i4 + "," + checkSum(iArr) + "," + checkSum(lArr));
    System.out.println("fArr = " + Double.doubleToLongBits(checkSum(fArr)));


    System.out.println("byMeth_check_sum: " + byMeth_check_sum);
}
}
