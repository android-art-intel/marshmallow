/*
 * Copyright (C) 2015 Intel Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by Android Runtime Fuzzer tool (3.5.002). Fri Jul 31 18:51:50 2015
// srand = 22378965257487974795630575773796613858032886074875002212513269742251

package OptimizationTests.regression.test2384;

import OptimizationTests.regression.shared.*;

public class Main extends FuzzerUtils {

    public static final int N = 100;


public static void main(String[] strArr) {

    float f=91.906F;
    short s=-28661;
    byte by=96;
    double d=-2.17706;
    long l=47966L;
    int i=208, i1=10492, i2=4, i3=-33182, i4=13;

    for (i = 2; i < 83; ++i) {
        i1 -= (i1 = i1);
        for (i2 = 1; i2 < 10; ++i2) {
            i3 = 1;
            do {
                i1 = (int)((i1 = (-(++i1))) ^ l);
                i1 = (int)(((-(-8646889862433628565L * l)) - i1) - (Math.min(i, i2) ^ l));
                l = (long)(((d + i2) - (-63414 + i)) + ((i2 - i1) - (i1 % (i1 | 1))));
                i1 += (i3 ^ (long)f);
                l -= (long)((++i1) - ((i * d) - (i * i)));
                by = (byte)(((0 + (i1--)) - (-i)) * ((--i1) * (i2 * i1)));
                l *= (~(i + (i1 * i)));
                i1 = 234;
                i1 += (i3 * i3);
                d -= i1;
            } while (++i3 < 8);
            i1 += (int)((l - (f - i1)) - (-9 + (i2 - i3)));
            i1 = (int)Math.abs((long)((i3 + i) + (l - -2.35190)));
            i1 -= (-(--i1));
        }
    }
    for (i4 = 1; i4 < 77; i4++) {
        i1 *= (int)(++l);
        i1 = ((i1 = s) * i2);
        s <<= (short)(i1--);
    }

    System.out.println("i i1 i2 = " + i + "," + i1 + "," + i2);
    System.out.println("i3 l d = " + i3 + "," + l + "," + Double.doubleToLongBits(d));
    System.out.println("f by i4 = " + Float.floatToIntBits(f) + "," + by + "," + i4);
    System.out.println("s = " + s);

}
}
