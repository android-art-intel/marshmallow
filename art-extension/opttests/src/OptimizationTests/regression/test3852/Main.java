/*
 * Copyright (C) 2015 Intel Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by Android Runtime Fuzzer tool (4.1.002). Tue Apr 12 23:06:39 2016
// srand = 22864925052883266867566117999903942222210927884888065323434433466254

package OptimizationTests.regression.test3852;

import OptimizationTests.regression.shared.*;

public class Main extends FuzzerUtils {

    public static final int N = 100;

    public static long instanceCount=-2523331334L;
    public static int iFld3=-59553;
    public static int iArrFld2[]=new int[N];
    public static Cls7 OFld5=new Cls7();

    static {
        init(Main.iArrFld2, -14);
    }

public static void main(String[] strArr) {

    int i=12, i7=-5, i8=-5601, i9=12;
    Cls8 O2=new Cls8();
    Object OArr[]=new Object[830577];
    double d=2.54459;

    init(Cls6.OFld4.bArrFld, true);
    init(OArr, new Cls1());
    init(O2.fArrFld1, 117.758F);

    for (i = 3; i < 78; i++) {
        Cls6.OFld4.bArrFld = (Cls6.OFld4.bArrFld = (Cls1.bArrFld1 = Cls6.OFld4.bArrFld));
        Cls1.instanceCount += (-(-3629541774129129785L * (Cls1.instanceCount & Cls2.instanceCount)));
        OArr[i - 1] = (Cls.OFld = (Cls.OFld = (Cls.OFld = new Cls1())));
        Cls6.OFld4.iFld2 += i;
    }
    i7 = 95;
    while (--i7 > 0) {
        Cls6.OFld4.iFld2 += (i7 + Cls2.fFld);
        Cls.iFld += i7;
        Cls2.instanceCount = ((++Main.OFld5.byFld) + (Cls7.iArrFld1[i7 + 1]--));
        for (i8 = 3; i8 < 49; i8++) {
            int i10=26, i11=-23892;
            Cls6.OFld4.iFld2 >>= (Cls6.OFld4.iFld2++);
            for (i9 = 4; i9 < 77; ++i9) {
                Cls1 O1=new Cls1();
                Main.OFld5.byFld &= (byte)Cls1.iFld1;
                Cls.instanceCount += (i9 ^ Cls6.instanceCount);
                Cls4.instanceCount -= (long)((-Cls3.sFld) * ((Cls4.instanceCount - Cls2.fFld) + (Main.instanceCount -
                    Main.instanceCount)));
                O1.OFld6.dFld -= (((Cls2.fFld--) * (Main.iFld3 * -11)) * ((++Cls6.OFld4.iFld2) - (i * Main.iFld3)));
                Cls6.OFld4.bArrFld[i8] = ((Cls1.iFld1--) < O1.OFld6.dFld);
                Main.iFld3 = Cls.iFld;
            }
            O2.fArrFld1[i7] = (--i10);
            Cls6.OFld4 = (Cls6.OFld4 = (Cls6.OFld4 = (Cls6.OFld4 = Cls6.OFld4)));
            for (d = 1; d < 3; ++d) {
                i10 += (int)-1846878111L;
            }
            Main.iFld3 += (--i11);
            OArr = (OArr = (OArr = (OArr = OArr)));
        }
        Cls6.instanceCount = (long)(Main.iArrFld2[i7] + (d - Cls4.instanceCount));
    }

    System.out.println("i Cls6.OFld4.iFld2 i7 = " + i + "," + Cls6.OFld4.iFld2 + "," + i7);
    System.out.println("Main.OFld5.byFld i8 i9 = " + Main.OFld5.byFld + "," + i8 + "," + i9);
    System.out.println("d Cls6.OFld4.bArrFld OArr = " + Double.doubleToLongBits(d) + "," + checkSum(Cls6.OFld4.bArrFld)
        + "," + checkSum(OArr));
    System.out.println("O2.fArrFld1 O2 Cls = " + Double.doubleToLongBits(checkSum(O2.fArrFld1)) + "," + checkSum(O2) +
        "," + Cls.instanceCount);
    System.out.println("Cls1 Cls2 Cls3 = " + Cls1.instanceCount + "," + Cls2.instanceCount + "," + Cls3.instanceCount);
    System.out.println("Cls4 Cls5 Cls6 = " + Cls4.instanceCount + "," + Cls5.instanceCount + "," + Cls6.instanceCount);
    System.out.println("Cls7 Cls8 = " + Cls7.instanceCount + "," + Cls8.instanceCount);

    System.out.println("Main.instanceCount Main.iFld3 Main.iArrFld2 = " + Main.instanceCount + "," + Main.iFld3 + "," +
        checkSum(Main.iArrFld2));
    System.out.println("Main.OFld5 Cls Cls1 = " + checkSum(Main.OFld5) + "," + Cls.instanceCount + "," +
        Cls1.instanceCount);
    System.out.println("Cls2 Cls3 Cls4 = " + Cls2.instanceCount + "," + Cls3.instanceCount + "," + Cls4.instanceCount);
    System.out.println("Cls5 Cls6 Cls7 = " + Cls5.instanceCount + "," + Cls6.instanceCount + "," + Cls7.instanceCount);
    System.out.println("Cls8 = " + Cls8.instanceCount);
}
}

class Cls extends FuzzerUtils {

    public static final int N = 100;

    public static long instanceCount=5067153754253075731L;
    public static int iFld=12;
    public int iFld2=9852;
    public static float fArrFld[]=new float[686225];
    public boolean bArrFld[]=new boolean[N];
    public static Cls1 OFld=null;

    static {
        init(Cls.fArrFld, 0.611F);
    }

    public static long Cls_check_sum = 0;

public  Cls() {

    instanceCount++;
    int i1=-216, i3=-45, iArr[]=new int[N];
    Cls4 O=new Cls4();

    init(iArr, 86);

    for (i1 = 2; i1 < 81; i1++) {
        int i2=0;
        i2 += (int)Cls.fArrFld[i1 - 1];
    }
    for (i3 = 2; i3 < 83; ++i3) {
        Cls.iFld ^= 62;
        Cls.OFld = (Cls.OFld = (Cls.OFld = (Cls.OFld = Cls.OFld)));
        Cls.iFld += (int)O.OFld3.fFld1;
        Cls.iFld %= (int)(Cls3.instanceCount | 1);
        iArr[(Cls1.iFld1 >>> 1) % N] -= (int)(Cls5.lArrFld[i3] = (long)((Cls1.instanceCount + O.OFld3.fFld1) - (201 -
            (Cls1.iFld1 * Cls5.instanceCount))));
        Cls5.instanceCount += ((Cls4.instanceCount--) + 154);
        if (true) continue;
        iArr[i3] = (int)((O.OFld3.fFld1++) + (iFld2 ^= Cls1.iFld1));
        Cls4.instanceCount += Cls3.sFld;
    }
    long meth_res = i1 + i3 + Float.floatToIntBits(O.OFld3.fFld1) + checkSum(iArr) + checkSum(O) + checkSum(O.OFld3);
    Cls_check_sum += meth_res;
    return;
}

}

class Cls1 extends FuzzerUtils {

    public static final int N = 100;

    public static volatile long instanceCount=253L;
    public static int iFld1=34260;
    public static boolean bArrFld1[]=new boolean[N];
    public Cls3 OFld2=null;
    public volatile Cls3 OFld6=new Cls3();

    static {
        init(Cls1.bArrFld1, true);
    }

}

class Cls2 extends FuzzerUtils {

    public static final int N = 100;

    public static volatile long instanceCount=-157L;
    public static volatile float fFld=9.49F;
    public volatile float fFld1=109.865F;
    public int iArrFld[]=new int[N];
    public static Cls1 OFld1=new Cls1();

    public static long Cls2_check_sum = 0;

public  Cls2() {

    instanceCount++;
    int i4=204, i5=-5, i6=-241;

    for (i4 = 3; i4 < 80; ++i4) {
        i5 = 15;
        while (--i5 > 0) {
            i6 = 1;
            while (++i6 < 86) {
                long lArr[]=new long[N];
                lArr = (lArr = (lArr = (lArr = long1array(N, (long)-43L))));
                Cls1.iFld1 -= (iArrFld[i4 + 1]--);
                Cls1.iFld1 = (int)(--Cls2.instanceCount);
                Cls2.OFld1.OFld2 = (Cls2.OFld1.OFld2 = (Cls2.OFld1.OFld2 = (Cls2.OFld1.OFld2 = Cls2.OFld1.OFld2)));
                Cls1.iFld1 -= ((i4 * i4) + (--iArrFld[i4 - 1]));
                Cls1.iFld1 <<= (int)((lArr[i6 - 1] << Integer.reverseBytes(-7)) << (Cls1.iFld1++));
                Cls2.OFld1.OFld2 = (Cls2.OFld1.OFld2 = (Cls2.OFld1.OFld2 = (Cls2.OFld1.OFld2 = Cls2.OFld1.OFld2)));
                Cls2.fFld = i6;
            }
            Cls1.iFld1 *= Cls1.iFld1;
        }
    }
    long meth_res = i4 + i5 + i6 + checkSum(Cls2.OFld1.OFld2);
    Cls2_check_sum += meth_res;
    return;
}

}

class Cls3 extends FuzzerUtils {

    public static final int N = 100;

    public static long instanceCount=-11L;
    public static short sFld=27313;
    public double dFld=51.56233;

}

class Cls4 extends FuzzerUtils {

    public static final int N = 100;

    public static long instanceCount=212L;
    public Cls2 OFld3=new Cls2();

}

class Cls5 extends FuzzerUtils {

    public static final int N = 100;

    public static volatile long instanceCount=3L;
    public static long lArrFld[]=new long[N];

    static {
        init(Cls5.lArrFld, 14L);
    }

}

class Cls6 extends FuzzerUtils {

    public static final int N = 100;

    public static long instanceCount=1L;
    public static Cls OFld4=new Cls();

}

class Cls7 extends FuzzerUtils {

    public static final int N = 100;

    public static long instanceCount=2L;
    public byte byFld=-43;
    public static int iArrFld1[]=new int[323676];

    static {
        init(Cls7.iArrFld1, 146);
    }

}

class Cls8 extends FuzzerUtils {

    public static final int N = 100;

    public static long instanceCount=4L;
    public volatile float fArrFld1[]=new float[N];

}

//DEBUG  Test ->  Test
//DEBUG  main ->  main Test
//DEBUG  Cls5 ->  Cls5 Cls main Test Cls6
//DEBUG  Cls3 ->  Cls3 Cls2 Cls main Test Cls1 Cls4 Cls6
//DEBUG  Cls2 ->  Cls2 Cls main Test Cls4 Cls6
//DEBUG  Cls6 ->  Cls6 main Test
//DEBUG  Cls ->  Cls main Test Cls6
//DEBUG  Cls1 ->  Cls1 Cls main Test Cls2 Cls4 Cls6
//DEBUG  Cls7 ->  Cls7 main Test
//DEBUG  Cls8 ->  Cls8 main Test
//DEBUG  Cls4 ->  Cls4 Cls main Test Cls6
//DEBUG  Depth = 7
//DEBUG  Classes = 10
//DEBUG  static objects = {Cls: [, Cls6.OFld4], Cls7: [, Main.OFld5], Cls2: [], Cls1: [, Cls.OFld, Cls2.OFld1], Cls3: [], }
