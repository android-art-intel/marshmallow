/*
 * Copyright (C) 2015 Intel Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by Dalvik Fuzzer tool (2.1.003). Sat Aug 17 14:42:56 2013
package OptimizationTests.regression.test131484;

import OptimizationTests.regression.shared.*;

public class Main extends FuzzerUtils {

    public static final int N = 30;

    static int statIntField = 3;

    static void statSet(int value) {
        statIntField = value;
    }

    static int statGet() {
        return statIntField;
    }

    public static long y_check_sum = 0;

    public static int y(int y0q, int tt7, long xma, int e) {

        int o = 12646, k = 49066, v = 20472, j4e = 53436, qy[] = new int[N], iw[][] = new int[N][N], y1i[][] = new int[N][N];
        byte zr[] = new byte[N];

        init(zr, (byte) -56);
        init(qy, -38062);
        init(iw, 59323);
        init(y1i, 17030);

        for (o = 1; o < 19; o += 2) {
            zr[o] = (byte) (zr[o + 1]);
            qy[o - 1] = (int) (-60760);
        }

        for (k = 20; k > 1; k--) {
            qy[k - 1] = (int) (zr[k - 1] + zr[k - 1]);
            qy[k] = (int) (tt7);
        }

        for (v = 10; v > 1; --v) {
            for (j4e = 1; j4e < v; j4e++) {
                qy[v] = (int) (30759);
                qy[v] = (int) (e);
            }
            iw[v + 1][v - 1] -= (int) (y1i[v][v - 1]);
        }

        long meth_res = y0q + tt7 + xma + e + o + k + v + j4e + checkSum(zr)
                + checkSum(qy) + checkSum(iw) + checkSum(y1i);
        y_check_sum += meth_res;
        return (int) meth_res;
    }

    public static void main(String[] jb) {

        int q = 12749, bb = -43705, tq = -37483, fmd = 37035, c3i = 16222, vc[][] = new int[N][N], e[] = new int[N], m[][] = new int[N][N], ljg[] = new int[N], i[][] = new int[N][N], yp[] = new int[N], wk[] = new int[N], ffa[] = new int[N], v[][] = new int[N][N];
        long dv3 = -3208953620770492243L, pn = -507182041373334547L, b[] = new long[N], r[][] = new long[N][N];

        init(vc, 35543);
        init(e, 14566);
        init(m, 62572);
        init(b, -2765102831502296746L);
        init(r, -208741756593563413L);
        init(ljg, 13858);
        init(i, 58521);
        init(yp, 52163);
        init(wk, -25973);
        init(ffa, -49103);
        init(v, -48040);

        for (q = 1; q < 20; q++) {

            for (bb = 1; bb < 10; ++bb) {
                vc[bb][q - 1] = (int) (((e[q]) - (statGet())) / ((vc[bb - 1][bb] != 0) ? vc[bb - 1][bb]
                        : 1));
            }

            int p = 11;
            while (--p > 0) {
                int sl = 11;
                do {
                    dv3 += (long) (y((int) ((statGet()) - ((q) + dv3)),
                            (int) (r[q + 1][q + 1]), (long) (ljg[q + 1]),
                            (int) (b[q])));
                } while (--sl > 0);

                if (i[q - 1][q - 1] >= m[q][q + 1]) {
                    for (tq = 9; tq > q; tq--) {
                        e[q + 1] = (int) (yp[tq - 1] - ljg[tq - 1]);
                    }
                }
            }
        }

        System.out.println("long: " + dv3 + "," + pn + "," + checkSum(b) + ","
                + checkSum(r));
        System.out.println("y_check_sum: " + y_check_sum);
    }
}
