/*
 * Copyright (C) 2015 Intel Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by Dalvik Fuzzer tool (3.5.001). Tue Jan 13 02:56:30 2015
package OptimizationTests.regression.test1139;

import OptimizationTests.regression.shared.*;

public class Main extends FuzzerUtils {

    public static final int N = 100;

    public static int iFld=10;

    public static long iMeth_check_sum = 0;

public static int iMeth(int i1, int i2) {

    short s=21047;
    float f=111.556F;
    int i3=2, iArr[]=new int[N];
    long l=-155L, lArr[][]=new long[N][N];
    byte by=-123, by1=-108;
    double d=-2.6112;

    init(iArr, -6);
    init(lArr, 3001008308540535932L);

    iFld = 1;
    while (++iFld < 82) {
        d -= (iArr[iFld] = (int)(iFld + d));
        i3 = 1;
        while (++i3 < iFld) {
            i1 += i3;
            lArr[i3 - 1][i3] |= (i2 + (--iArr[i3]));
            f = (++i2);
            i2 += (((i3 * by) + f) - s);
            by1 /= (byte)((long)((f--) - -2918724300L) | 1);
            i1 -= -15;
            i2 *= (int)(--l);
        }
        i1 >>>= 33;
        iArr[iFld + 1] = i1;
    }
    long meth_res = i1 + i2 + Double.doubleToLongBits(d) + i3 + Float.floatToIntBits(f) + by + s + by1 + l +
        checkSum(iArr) + checkSum(lArr);
    iMeth_check_sum += meth_res;
    return (int)meth_res;
}

public static void main(String[] strArr) {

    short s1=-32428;
    float f1=42.436F, fArr[][]=new float[N][N];
    int i=1, i4=195, i5=7809, i6=-190, i7=36, i8=-203, iArr1[]=new int[N];
    double d1=42.8932, dArr[]=new double[N];
    boolean b=false;
    long l1=-112L, l2=-4053948366L;
    byte by2=105;

    init(dArr, 86.55548);
    init(iArr1, 3424);
    init(fArr, -45.143F);

    for (i = 4; i < 76; ++i) {
        dArr[i - 1] = ((iMeth(i, i) - (i + i)) + (f1++));
        i4 = i4;
        i4 = (--by2);
        iArr1[i] >>= iFld;
        l1 += ((iArr1[i] + (i / (s1 | 1))) * (i5--));
        iArr1[i + 1] -= (int)(l1 / ((Math.abs(247) * (i5++)) | 1));
        i4 += (i4 + (i5++));
        i5 += i;
        iArr1[i + 1] *= i4;
        iArr1[i] |= i4;
    }
    i6 = 89;
    do {
        if (b) continue;
        try {
            i5 *= (int)(l1 -= (-7 + (-200L + i7)));
            iArr1[i6] += ((i4--) * i7);
            try {
                i7 <<= (++i4);
            }
            catch (NullPointerException exc) {
                for (i8 = 25; i8 > 1; i8 -= 3) {
                    iArr1[i6] += (int)(iArr1[i8 + 1] - (i5 + (171 * (i6 - l2))));
                    switch ((((++i5) >>> 1) % 2) + 43) {
                    case 43:
                        i5 += i7;
                        iArr1[i8] = (int)(1361084315583840507L - ((-(-43 - by2)) - iArr1[i8 - 1]));
                        i5 = 9;
                    case 44:
                        fArr[i8 + 1][i6 - 1] -= (--l1);
                    }
                }
            }
        }
        catch (ArrayIndexOutOfBoundsException exc1) {
            i4 = (int)(((--d1) * Integer.reverseBytes(i4)) - ((l1 * -122L) - (f1 + iFld)));
        }
    } while ((i6 -= 2) > 0);

    System.out.println("i f1 i4 = " + i + "," + Float.floatToIntBits(f1) + "," + i4);
    System.out.println("by2 l1 s1 = " + by2 + "," + l1 + "," + s1);
    System.out.println("i5 i6 b = " + i5 + "," + i6 + "," + (b ? 1 : 0));
    System.out.println("i7 i8 l2 = " + i7 + "," + i8 + "," + l2);
    System.out.println("d1 dArr iArr1 = " + Double.doubleToLongBits(d1) + "," + Double.doubleToLongBits(checkSum(dArr))
        + "," + checkSum(iArr1));
    System.out.println("fArr = " + Double.doubleToLongBits(checkSum(fArr)));

    System.out.println("iFld = " + iFld);

    System.out.println("iMeth_check_sum: " + iMeth_check_sum);
}
}
