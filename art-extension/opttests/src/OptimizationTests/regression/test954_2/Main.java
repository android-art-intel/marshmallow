/*
 * Copyright (C) 2015 Intel Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by Dalvik Fuzzer tool (3.4.001). Thu Nov 27 00:39:03 2014
package OptimizationTests.regression.test954_2;

import OptimizationTests.regression.shared.*;

public class Main extends FuzzerUtils {

    public static final int N = 100;

    public static int is3=-36770;
    public static boolean s5=false;

    public static long gr_check_sum = 0;

public static boolean gr(int z, double mkc, int fiw) {

    int w=-26411, q[]=new int[N];
    float xu=76.676F;
    long f=-8651667786530963397L;
    byte h=58;

    init(q, -14918);

    if ((q[(fiw >>> 1) % N] += (int)((6251667974236333743L))) <= (((int)(w - f))
        )) {
        for (is3 = 3; is3 < 76; ++is3) {
            q[1] = (int)xu;
        }
    }
    return f > 0;
}

public static void main(String[] p4) {

    short ffh=5635;
    int xsm=29416, wa=56145, b=24016, m40=-47591, m73=49899, u=-4509, nj[][]=new int[N][N];
    double z2o[]=new double[N];
    float g9x=-121.20F;
    long cs8=952641819567333813L;

    init(z2o, -47.513);
    init(nj, 5770);

    for (xsm = 1; xsm < 81; xsm++) {
        wa = 1;
        do {
            b = (int)(g9x);
        } while (++wa < 3);
        nj[1][1] = (int)(--g9x);
        cs8 = xsm;
        if (gr(wa, z2o[xsm]++, b++)) break;
        for (m40 = 1; m40 < xsm; ++m40) {
            try {
                b = (wa % 806034615);
            } catch (ArithmeticException a_e) {}
            m73 = (int)(b--);
        }
    }

    System.out.println("xsm wa b = " + xsm + "," + wa + "," + b);
    System.out.println("g9x cs8 m40 = " + Float.floatToIntBits(g9x) + "," + cs8 + "," + m40);
    System.out.println("m73 sd y5 = " + m73);
    System.out.println("ffh q7c u = " + ffh + "," + "," + u);
    System.out.println("z2o nj ksl = " + Double.doubleToLongBits(checkSum(z2o)) + "," + checkSum(nj));

    System.out.println("is3 s5 = " + is3 + "," + (s5 ? 1 : 0));

    System.out.println("gr_check_sum: " + gr_check_sum);
}
}
