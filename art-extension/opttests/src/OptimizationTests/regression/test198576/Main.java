/*
 * Copyright (C) 2015 Intel Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by Dalvik Fuzzer tool (3.3.001). Mon May 26 16:11:30 2014
package OptimizationTests.regression.test198576;

import OptimizationTests.regression.shared.*;

public class Main extends FuzzerUtils {

public static final int N = 300;

    public static int i5[]=new int[N];

    static {
        init(i5, -40644);
    }

public static void main(String[] sz) {

    double w=127.942;
    short t=-3239, e[]=new short[N];
    byte o=67;
    float v3p=-50.203F;
    long a=1282756564960048592L, hh6=-1075000843011991831L;
    int i=-61465, xy4=27805, p=-19235, sd4=51108, pl=34677, rwj=61607, l9a=36213, oi=-20190, ig=-8094, df5=-14704,
        tu2=-21514;

    init(e, (short)5710);

    for (i = 232; i > 5; i--) {
        i5[i] += (int)(i5[i + 1] + v3p);
        a = (long)(i + ((i - i) + (v3p * i)));
        a = (e[i + 1] % 57913);
        xy4 = ((-49540 >> (~i)) - o);
        for (p = 1; p < i; p += 2) {
            xy4 >>= (int)(-60846 | (long)((-(w++)) * p));
            e[i + 1] -= (short)((xy4 + -105.954F) / ((sd4 * o) | 1));
            xy4 = (int)((~(long)(455496461015692333L - v3p)) - i5[i - 1]);
            t <<= (short)-20215;
            sd4 = e[i];
        }
    }
    for (pl = 5; pl < 228; ++pl) {
        sd4 = (int)(a--);
        xy4 -= (int)(((a ^ t) * sd4) - pl);
        for (rwj = 5; rwj < 162; ++rwj) {
            for (l9a = 163; l9a > 5; l9a -= 3) {
                o = (byte)(v3p * -40469);
                oi = p;
                ig -= (int)((++oi) * (v3p--));
                i5[rwj - 1] += (-((-(xy4 - i)) * (--i5[pl + 1])));
            }
            for (df5 = pl; df5 < rwj; ++df5) {
                sd4 >>= (int)(((o * oi) + (++hh6)) + o);
            }
            oi = i;
            xy4 = (int)((a--) * (++tu2));
            oi = 40093;
        }
    }

    System.out.println("i v3p a = " + i + "," + Float.floatToIntBits(v3p) + "," + a);
    System.out.println("xy4 o p = " + xy4 + "," + o + "," + p);
    System.out.println("w sd4 t = " + Double.doubleToLongBits(w) + "," + sd4 + "," + t);
    System.out.println("pl rwj l9a = " + pl + "," + rwj + "," + l9a);
    System.out.println("oi ig df5 = " + oi + "," + ig + "," + df5);
    System.out.println("hh6 tu2 e = " + hh6 + "," + tu2 + "," + checkSum(e));
    
    System.out.println("i5 = " + checkSum(i5));
}
}
