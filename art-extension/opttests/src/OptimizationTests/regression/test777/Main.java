/*
 * Copyright (C) 2015 Intel Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by Dalvik Fuzzer tool (3.4.001). Wed Oct 22 18:09:02 2014
package OptimizationTests.regression.test777;

import OptimizationTests.regression.shared.*;

public class Main extends FuzzerUtils {

    public static final int N = 100;

    public static void main(String[] wqf) {

        double z = 8.346, oy5 = -41.969;
        byte e = -44;
        short vro = -21708, a3p[][] = new short[N][N];
        float d = -103.537F, r2[] = new float[N];
        int l = 22921, wmc = -44935, ds9 = -21612, tfe = 42246, v[] = new int[N];
        boolean bq = true;
        long r = 1104438415910524033L, x7[] = new long[N];

        init(v, 49746);
        init(x7, 511980006271304887L);
        init(a3p, (short) -25399);
        init(r2, -100.265F);

        for (int rcx : v) {
            for (l = 2; l < 87; ++l) {
                x7[l] = l;
                rcx >>= (--e);
                d += (d - (--r));
            }
            rcx |= (--v[(l >>> 1) % N]);
            x7[(rcx >>> 1) % N] += a3p[(rcx >>> 1) % N][(l >>> 1) % N];
            r &= (long) ((rcx - (z + l)) - ((++d) + (z - l)));
            r = l;
            wmc = 92;
            do {
                v[wmc] -= (int) ((r * (ds9 + r)) >> ((r + e) * (ds9 + wmc)));
                r >>>= (wmc - x7[wmc + 1]);
                ds9 = ds9;
                r = (long) (((-29473 - (wmc + rcx)) - rcx) * ((-r) + z));
                ds9 += (int) ((rcx += (int) (15287 + (r -= 24581))) - (-(rcx = -12063)));
                d -= (float) ((z--) + (rcx = (wmc + rcx)));
                z = (v[wmc + 1] + (-21780 * (d * -21)));
                v[(11012 >>> 1) % N] >>>= (--v[wmc + 1]);
                vro = (short) l;
            } while (--wmc > 0);
            bq = ((--r2[(rcx >>> 1) % N]) != vro);
            tfe = 1;
            do {
                rcx += tfe;
            } while (++tfe < 90);
        }
        oy5 = 1;
        do {
            r = (--v[(int) (oy5)]);
            ds9 += (int) (oy5 * oy5);
        } while (++oy5 < 84);

        System.out.println("l e d = " + l + "," + e + ","
                + Float.floatToIntBits(d));
        System.out.println("r z wmc = " + r + "," + Double.doubleToLongBits(z)
                + "," + wmc);
        System.out.println("ds9 vro bq = " + ds9 + "," + vro + ","
                + (bq ? 1 : 0));
        System.out.println("tfe oy5 v = " + tfe + ","
                + Double.doubleToLongBits(oy5) + "," + checkSum(v));
        System.out.println("x7 a3p r2 = " + checkSum(x7) + "," + checkSum(a3p)
                + "," + Double.doubleToLongBits(checkSum(r2)));

    }
}
