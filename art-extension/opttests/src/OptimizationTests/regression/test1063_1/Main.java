/*
 * Copyright (C) 2015 Intel Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by Dalvik Fuzzer tool (3.4.001). Sat Dec 20 13:08:50 2014
package OptimizationTests.regression.test1063_1;

import OptimizationTests.regression.shared.*;

public class Main extends FuzzerUtils {

    public static final int N = 100;

    public static int k=-8819;

    public static long fam_check_sum = 0;

public static void fam(int n, float c, long l4) {

    double o=-62.59;
    byte wwi=-63;
    short e=16185;
    int u=-13193, k3=48860, llq=36445, zx[]=new int[N];

    init(zx, -42357);

    for (k = 2; k < 98; ++k) {
        wwi ^= (byte)(++n);
        n -= (int)o;
        for (u = 2; u < 45; u++) {
            n = (int)l4;
            c *= -3723;
            n = (k - (--n));
            n += (u | k3);
            k3 -= (int)((++l4) + (-(e - n)));
            k3 += (int)(zx[u] >>>= (int)((l4++) * l4));
            llq >>= (int)(((l4 + llq) * (u - 3843)) + wwi);
            k3 += (k - (++llq));
        }
    }
    fam_check_sum += n + Float.floatToIntBits(c) + l4 + wwi + Double.doubleToLongBits(o) + u + k3 + e + llq +
        checkSum(zx);
}

public static void main(String[] xb) {

    float t3=77.783F, a8o=60.117F;
    double xct=-92.167, uly=-105.512;
    byte ta=-58, ho7=1, t63[][]=new byte[N][N];
    long w5a=-1630267241548835605L, i1a[]=new long[N];
    boolean vng=true;
    short ig7=-24441, wtj[]=new short[N];
    int y=-19986, qn3=-48159, o3l=53715, p6=27754, zeh[]=new int[N];

    init(t63, (byte)-45);
    init(zeh, 37431);
    init(wtj, (short)-25033);
    init(i1a, -6568145742343182656L);

    for (xct = 2; xct < 89; xct++) {
        w5a *= (t63[(int)(xct)][(int)(xct - 1)] - y);
        for (qn3 = 1; qn3 < 86; ++qn3) {
            zeh[(int)(xct)] >>= (int)((++y) - ((y * y) - (w5a + w5a)));
            y *= y;
            y += zeh[qn3 - 1];
            t3 -= y;
            uly += 110.509;
            y += (int)(w5a--);
            t3 -= (-ta);
            t3 *= (w5a - w5a);
            w5a -= ig7;
            w5a += (long)((--t3) % (((-(w5a * qn3)) - (y--)) | 1));
        }
        vng = vng;
        y -= (int)((w5a - (w5a - qn3)) - (wtj[(int)(xct)] + (48.621 + (y % (qn3 | 1)))));
    }
    o3l = 1;
    while (++o3l < 96) {
        try {
            y = (-659447580 / y);
            y = (o3l % qn3);
            zeh[o3l + 1] = (y % -37498);
        } catch (ArithmeticException a_e) {}
    }
    for (p6 = 2; p6 < 91; p6++) {
        i1a[p6] = (ho7 -= (byte)(y++));
        uly -= o3l;
        y += (--y);
        w5a *= o3l;
        y /= (int)((long)a8o | 1);
    }
    w5a >>= (-((++y) + (-6989852432848881679L + (ig7 * w5a))));
    fam((int)(xct * (-(o3l + qn3))), (y--) + (--y), 1312901528617136739L);

    System.out.println("xct w5a y = " + Double.doubleToLongBits(xct) + "," + w5a + "," + y);
    System.out.println("qn3 t3 uly = " + qn3 + "," + Float.floatToIntBits(t3) + "," + Double.doubleToLongBits(uly));
    System.out.println("ta ig7 vng = " + ta + "," + ig7 + "," + (vng ? 1 : 0));
    System.out.println("o3l p6 ho7 = " + o3l + "," + p6 + "," + ho7);
    System.out.println("a8o t63 zeh = " + Float.floatToIntBits(a8o) + "," + checkSum(t63) + "," + checkSum(zeh));
    System.out.println("wtj i1a = " + checkSum(wtj) + "," + checkSum(i1a));

    System.out.println("k = " + k);

    System.out.println("fam_check_sum: " + fam_check_sum);
}
}
