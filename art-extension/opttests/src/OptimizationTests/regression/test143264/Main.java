/*
 * Copyright (C) 2015 Intel Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by Dalvik Fuzzer tool (2.1.003). Sun Oct  6 21:48:22 2013

package OptimizationTests.regression.test143264;

import OptimizationTests.regression.shared.*;

public class Main extends FuzzerUtils {

    public static final int N = 30;

    public static long ics_check_sum = 0;

    public static void ics(int gh, long q, short e, int ehy) {

        char x35 = 3632;
        int lz = 45590, ub5 = -35267, o[] = new int[N], js[] = new int[N], lx7[][] = new int[N][N], b[][] = new int[N][N], s[] = new int[N], ksu[] = new int[N];
        long tn = 232251259759385806L, c[] = new long[N];

        init(o, -24442);
        init(js, 9359);
        init(lx7, 40440);
        init(c, 5792929970009177648L);
        init(b, -61109);
        init(s, -16944);
        init(ksu, 53675);

        // Test Loop Vectorization
        for (lz = 1; lz < 0; ++lz) {
            o[lz + 1] = (int) (-js[lz - 1]);
            o[lz + 1] = (int) (-4330587214842480960L);
        }

        int zd = 11;
        while (--zd > 0) {

            for (ub5 = 1; ub5 < 3; ++ub5) {
                tn -= (long) ((js[ub5 - 1]) - (lx7[ub5 + 1][ub5]));
                // Enhanced For statement
                for (long ets : c) {
                    x35 -= (char) (b[ub5 - 1][ub5 + 1]);
                    b[ub5 - 1][ub5] -= (int) (js[ub5 - 1]);
                }

            }

        }

        ics_check_sum += gh + q + e + ehy + lz + ub5 + tn + x35 + checkSum(o)
                + checkSum(js) + checkSum(lx7) + checkSum(c) + checkSum(b)
                + checkSum(s) + checkSum(ksu);
    }

    public static void main(String[] u) {

        char udf = 7501;
        int uee = 24858, z = 47190, psf = 46724, g1g = -4026, r = 26230, l0[] = new int[N], ji[][] = new int[N][N], t[][] = new int[N][N], wtf[] = new int[N], tz[][] = new int[N][N], hm[][] = new int[N][N], s[] = new int[N], gk8[] = new int[N], a0[][] = new int[N][N];
        byte qpu = 118;
        long t4[][] = new long[N][N], xt[] = new long[N], ig[][] = new long[N][N];

        init(l0, 22747);
        init(ji, 18131);
        init(t, -60015);
        init(wtf, -16285);
        init(t4, 7077788377468126670L);
        init(xt, -7912454874338491238L);
        init(tz, -55088);
        init(ig, -2848832409092500190L);
        init(hm, -60295);
        init(s, 57834);
        init(gk8, -28481);
        init(a0, -6346);

        for (uee = 1; uee < 17; ++uee) {
            l0[uee] = (int) (ji[uee + 1][uee]);
            udf += (char) (z++);
            ji[uee][uee + 1] -= (int) ((((ji[uee][uee - 1]) / -45954) + (t[uee + 1][uee])) / ((udf
                    + (t[uee][uee]) != 0) ? udf + (t[uee][uee]) : 1));
        }

        for (psf = 1; psf < 23; psf += 3) {
            z -= (int) (++g1g);
            qpu -= (byte) (wtf[psf + 1]);

            for (r = 1; r < psf; r += 3) {
                int rh = 11;
                do {
                    wtf[r - 1] -= (int) (g1g - qpu);
                    qpu = (byte) (t4[r][psf]);
                } while (--rh > 0);

            }

            int i6e = 11;
            do {
                ics((int) (xt[psf - 1]), (long) (tz[psf][psf]),
                        (short) (ig[psf - 1][psf + 1]),
                        (int) (hm[psf + 1][psf - 1]));

                // Enhanced For statement
                for (int su : s) {
                    gk8[psf - 1] -= (int) ((xt[psf]) * (-23744 * (a0[psf][psf])));
                }

            } while (--i6e > 0);

        }

        System.out.println("char: " + (int) udf);
        System.out.println("int: " + uee + "," + z + "," + psf + "," + g1g
                + "," + r + "," + checkSum(l0) + "," + checkSum(ji) + ","
                + checkSum(t) + "," + checkSum(wtf) + "," + checkSum(tz) + ","
                + checkSum(hm) + "," + checkSum(s) + "," + checkSum(gk8) + ","
                + checkSum(a0));
        System.out.println("byte: " + qpu);
        System.out.println("long: " + checkSum(t4) + "," + checkSum(xt) + ","
                + checkSum(ig));

        System.out.println("ics_check_sum: " + ics_check_sum);
    }
}
