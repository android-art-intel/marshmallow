/*
 * Copyright (C) 2015 Intel Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by Dalvik Fuzzer tool (2.1.003). Fri May 23 21:48:55 2014
package OptimizationTests.regression.test198255 ;

import OptimizationTests.regression.shared.*;

public class Main  extends FuzzerUtils {

public static final int N = 30;

public static long wm6_check_sum = 0;
public static long h_check_sum = 0;

public static int wm6(int r3i, int u, int v, byte m, int mlf) {

    int db=-36863, t=14949, kw=9334, xbl=30704, f[]=new int[N], w6t[][]=new int[N][N], xx[]=new int[N];

    init(f, 57524);
    init(w6t, -54718);
    init(xx, 4920);


    // Test Loop Interchange
    for (db = 1; db < 22; ++db) {
        for (t = 1; t < db; ++t) {
            f[db] = (int)(w6t[db+1][t+1]);
        }
    }

    int ie = 11;
    do {
        // Enhanced For statement
        for (int mhe: xx) {
            int k8d = 11;
            do {
                m += (byte)(f[13]);
            } while ( --k8d > 0 );


            for (kw = 1; kw < 3; ++kw) {
                xbl = (int)((42251) - xbl);
            }

        }

    } while ( --ie > 0 );

    long meth_res = r3i + u + v + m + mlf + db + t + kw + xbl + checkSum(f) + checkSum(w6t) + checkSum(xx);
    wm6_check_sum += meth_res;
    return (int)meth_res;
}

public static void h(int w, long xuq) {

    int i3r=42056, rf=-10563, gxo=24903, k4o=-21526, a=-19863, o[]=new int[N], j0r[][]=new int[N][N], yqn[]=new int[N],
        uh[]=new int[N];
    long eqr[][]=new long[N][N], h[]=new long[N];

    init(o, 64122);
    init(j0r, -7809);
    init(eqr, 5035989662361803791L);
    init(h, -1034415718310363246L);
    init(yqn, 207);
    init(uh, -54466);


    for (i3r = 1; i3r < 9; i3r += 3) {
        o[i3r] += (int)((o[i3r]) + i3r);
    }


    // Test Loop Interchange
    for (rf = 1; rf < 27; rf++) {
        for (gxo = 4; gxo > 1; gxo--) {
            j0r[gxo-1][rf+1] = (int)(j0r[gxo-1][gxo-1]);
        }
    }

    // Enhanced For statement
    for (int kk: o) {

        for (k4o = 15; k4o > 1; k4o--) {
            w += (int)(eqr[k4o+1][k4o+1]);
            a *= (int)((h[k4o+1]) - ((yqn[k4o-1]) - (uh[k4o])));
        }

    }

    h_check_sum += w + xuq + i3r + rf + gxo + k4o + a + checkSum(o) + checkSum(j0r) + checkSum(eqr) + checkSum(h) +
        checkSum(yqn) + checkSum(uh);
}

public static void main(String[] j) {

    int iq=13236, h7=53185, yqs=-40263, t3k=59129, g=20373, z1w=45321, frs=53656, nm2=-40867, n=-23968, m=-34096,
        lf[][]=new int[N][N], z[][]=new int[N][N], jmw[]=new int[N], tj[][]=new int[N][N], r[]=new int[N], k[][]=new
        int[N][N];
    long vj0=-7363586130043883141L, wi[]=new long[N], ab[][]=new long[N][N], wqg[]=new long[N];

    init(lf, 19189);
    init(z, 55166);
    init(jmw, 30556);
    init(tj, 5917);
    init(wi, -6162477029091205777L);
    init(r, 43588);
    init(ab, -7904172009013095589L);
    init(k, -23188);
    init(wqg, 252995457199628177L);


    for (iq = 1; iq < 26; iq++) {
        h7 += (int)(iq % -5515842726866833357L);

        // Test Loop Interchange
        for (yqs = 1; yqs < 7; yqs++) {
            for (t3k = yqs; t3k > 1; t3k--) {
                lf[iq-1][iq] -= (int)(lf[t3k][iq+1]);
            }
        }

        vj0 += (long)((vj0 + (g++)) - (z[iq+1][iq-1]));
    }


    for (z1w = 7; z1w > 1; --z1w) {

        for (frs = 12; frs > 1; --frs) {
            int d = 11;
            while ( --d > 0 ) {
                nm2 += (int)(jmw[frs]);
                tj[frs-1][z1w] -= (int)(z[z1w+1][frs+1]);
            }


            if ((wm6((int)(tj[frs-1][z1w+1]), (int)(tj[frs+1][frs]), (int)(wi[z1w-1]), (byte)(r[frs]),
                (int)(z[z1w][z1w-1]))) + (nm2 + (--n)) >= (yqs - ((wi[frs+1]) - -42148)) + 26866) {
                ab[z1w+1][z1w-1] += (long)(m--);

                if ((jmw[z1w-1]) + nm2 <= vj0 + ((k[z1w-1][frs+1]) + h7)) {
                    h((int)(wqg[frs+1]), (long)(r[frs-1]));

                }

            }

        }

    }


    System.out.println("int: " + iq + "," + h7 + "," + yqs + "," + t3k + "," + g + "," + z1w + "," + frs + "," + nm2 +
        "," + n + "," + m + "," + checkSum(lf) + "," + checkSum(z) + "," + checkSum(jmw) + "," + checkSum(tj) + "," +
        checkSum(r) + "," + checkSum(k));
    System.out.println("long: " + vj0 + "," + checkSum(wi) + "," + checkSum(ab) + "," + checkSum(wqg));

    System.out.println("wm6_check_sum: " + wm6_check_sum);
    System.out.println("h_check_sum: " + h_check_sum);
}
}
