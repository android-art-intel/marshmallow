/*
 * Copyright (C) 2015 Intel Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by Dalvik Fuzzer tool (3.5.001). Thu Apr 23 12:42:28 2015
package OptimizationTests.regression.test8549;

import OptimizationTests.regression.shared.*;

public class Main extends FuzzerUtils {

    public static final int N = 100;

    public static int iFld=6;

    public static long vMeth_check_sum = 0;
    public static long dMeth_check_sum = 0;

public static void vMeth(double d, int i4, int i5) {

    byte by=-90;
    long l1=-498748344305936334L;
    double d1=-2.52505;
    short s=12533;
    float f=41.612F, f1=-49.920F;
    int i6=-181, i7=24909, iArr1[]=new int[N];

    init(iArr1, -137);

    i6 = 1;
    do {
        i5 += (int)(((i4++) - s) + ((l1--) - (-28 - (d--))));
    } while (++i6 < 91);
    for (i7 = 3; i7 < 96; ++i7) {
        d1 = 1;
        do {
            l1 <<= 126;
            by += (byte)(d1 * l1);
            f = 1;
            do {
                f1 += f;
            } while (++f < 94);
            iArr1[(int)(d1)] = i6;
            l1 = i4;
        } while (++d1 < 26);
        l1 *= ((++iArr1[i7 + 1]) + ((-(l1 * 236)) + (-5342L << i6)));
        f1 *= (l1 - (i6 + Float.floatToRawIntBits(f)));
    }
    vMeth_check_sum += Double.doubleToLongBits(d) + i4 + i5 + i6 + s + l1 + i7 + Double.doubleToLongBits(d1) + by +
        Float.floatToIntBits(f) + Float.floatToIntBits(f1) + checkSum(iArr1);
}

public static double dMeth() {

    byte byArr[]=new byte[N];
    long l2=-10L, l3=108373553L;
    double d2=-50.21256, dArr[]=new double[N];
    float f2=-2.99F;
    int i8=102, i9=-2457, i10=8;

    init(byArr, (byte)-48);
    init(dArr, 0.93041);

    i8 = 1;
    while (++i8 < 77) {
        switch ((((((int)(d2 + i8)) >>> 1) % 2) * 5) + 116) {
        case 123:
            byArr[i8] = (byte)(--l2);
            dArr[i8 - 1] -= 118.52227;
            break;
        case 119:
            for (i9 = 1; i9 < 31; i9++) {
                iFld = i9;
                iFld += (int)(iFld >>= (int)((l2 + 6L) * (-(l3 * l2))));
                iFld += (i9 ^ (long)f2);
            }
        }
        iFld *= i9;
        for (i10 = 1; i10 < 15; i10++) {
            l3 -= (long)d2;
        }
        l2 >>= i8;
    }
    long meth_res = i8 + Double.doubleToLongBits(d2) + l2 + i9 + l3 + Float.floatToIntBits(f2) + i10 + checkSum(byArr)
        + Double.doubleToLongBits(checkSum(dArr));
    dMeth_check_sum += meth_res;
    return (double)meth_res;
}

public static void main(String[] strArr) {

    byte by1=66;
    long l=-110L, lArr[]=new long[N];
    double d3=-1.65241, d4=87.17058;
    float f3=0.356F;
    int i=-247, i1=56448, i2=69, i3=-18297, i11=-168, i12=4432, i13=238, iArr[]=new int[N];
    boolean b=false;

    init(iArr, 53545);
    init(lArr, -6L);

    for (i = 5; i < 91; i++) {
        i1 += i1;
        iArr[i + 1] = i1;
    }
    i2 = 1;
    do {
        l += (2960884670L + i1);
    } while (++i2 < 89);
    for (i3 = 90; i3 > 2; --i3) {
        i1 <<= i3;
        i1 >>= i;
        vMeth(dMeth(), (int)(((++f3) * -1) + (--iArr[i3 + 1])), -14);
        i1 = (int)((-(d3 - i3)) - (i * (--iFld)));
        lArr[i3 - 1] >>= (long)((iFld++) * (d3++));
        d3 *= (((iFld * i3) - (i3 + -4)) + ((i1++) - (iArr[i3]++)));
        l += (long)(((iArr[i3]--) * l) * (13148 - (0.569F - iFld)));
    }
    for (i11 = 1; i11 < 77; ++i11) {
        l ^= Long.reverseBytes((l - i2) >> (long)(iFld += (int)d3));
        i1 = i2;
        switch (((i11 % 1) * 5) + 99) {
        case 100:
            i1 += (((i11 * i11) + i1) - i);
            iFld += (int)(((l - i) * (l++)) + (i3 - (++by1)));
            i1 = (int)((-l) - ((l + -2) << (i2 - l)));
            break;
        }
        for (i12 = 4; i12 < 73; i12++) {
            by1 += (byte)-1;
            d4 = 1;
            while (++d4 < 36) {
                if (b = (b = ((f3 * l) == i))) continue;
                i13 = (int)(i2 + -132L);
            }
        }
    }

    System.out.println("i i1 i2 = " + i + "," + i1 + "," + i2);
    System.out.println("l i3 f3 = " + l + "," + i3 + "," + Float.floatToIntBits(f3));
    System.out.println("d3 i11 by1 = " + Double.doubleToLongBits(d3) + "," + i11 + "," + by1);
    System.out.println("i12 d4 b = " + i12 + "," + Double.doubleToLongBits(d4) + "," + (b ? 1 : 0));
    System.out.println("i13 iArr lArr = " + i13 + "," + checkSum(iArr) + "," + checkSum(lArr));

    System.out.println("iFld = " + iFld);

    System.out.println("vMeth_check_sum: " + vMeth_check_sum);
    System.out.println("dMeth_check_sum: " + dMeth_check_sum);
}
}
