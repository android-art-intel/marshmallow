/*
 * Copyright (C) 2015 Intel Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by Android Runtime Fuzzer tool (3.5.002). Mon Jun 22 11:52:50 2015
// srand = 7141989880903674568171575002698399565065226458011551927136535296063

package OptimizationTests.regression.test2191;

import OptimizationTests.regression.shared.*;

public class Main extends FuzzerUtils {

    public static final int N = 100;

    public static long lFld=58112359L;
    public static int iFld=-11;

    public static long iMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;

public static int iMeth() {

    float f1=-2.834F;
    int i7=216, i8=55422, i9=-47203, i10=47592, iArr2[][]=new int[N][N];
    short s1=13272;

    init(iArr2, 54500);

    for (i7 = 4; i7 < 85; i7++) {
        iArr2[i7 - 1][i7 + 1] += 178;
        s1 = (short)Float.intBitsToFloat(i7);
    }
    for (i8 = 1; i8 < 77; ++i8) {
        switch (((((i9--) >>> 1) % 1) * 5) + 123) {
        case 128:
            for (i10 = 3; i10 < 93; i10++) {
                i9 = -196;
            }
            i9 = 58186;
            f1 -= i8;
            break;
        default:
            iFld = 1;
            do {
                i9 += (iFld * iFld);
                i9 = (++i9);
            } while (++iFld < 33);
        }
    }
    long meth_res = i7 + s1 + i8 + i9 + i10 + Float.floatToIntBits(f1) + checkSum(iArr2);
    iMeth_check_sum += meth_res;
    return (int)meth_res;
}

public static long lMeth() {

    int iArr3[]=new int[N];

    init(iArr3, 0);

    for (int i13 : iArr3) {
        i13 = (int)(((--i13) - (-i13)) * ((lFld + iFld) - (lFld | i13)));
    }
    long meth_res = checkSum(iArr3);
    lMeth_check_sum += meth_res;
    return (long)meth_res;
}

public static void main(String[] strArr) {

    double d=5.57890, d1=-78.85889, dArr[]=new double[N];
    long lArr[]=new long[N];
    byte by=115;
    float f=1.741F, fArr[]=new float[N];
    int i1=-31394, i2=-61241, i3=5, i4=-4903, i5=48734, i6=-14, i11=61446, i12=157, i14=11, iArr[]=new int[N],
        iArr1[]=new int[N];
    short s=17182, sArr[]=new short[N];

    init(iArr, -42480);
    init(lArr, -12L);
    init(dArr, 0.28567);
    init(fArr, -2.752F);
    init(iArr1, -2);
    init(sArr, (short)-20798);

    for (int i : iArr) {
        lArr[(i >>> 1) % N] *= (long)(((i + f) - (-38.96954 - (f -= (float)d))) * (-(++iArr[(i >>> 1) % N])));
        i = (int)d1;
    }
    i1 = 1;
    while (++i1 < 90) {
        lFld += i1;
        d1 = -65049;
        for (i2 = 4; i2 < 92; ++i2) {
            iArr[i2 + 1] *= (i3--);
            for (i4 = i2; i4 < 31; ++i4) {
                f = ((i3++) * lArr[i4 - 1]);
                i3 += i4;
                iArr[i4 - 1] >>>= (int)(((d * 7) - (i3 / (i5 | 1))) * (i6--));
                i5 *= (i5--);
                dArr[i4] -= ((fArr[i1 - 1]++) * d1);
            }
            s = (short)lFld;
            dArr[i2] *= (((26093 - (f++)) * (iArr1[i1]--)) * ((lFld--) * (i6 + i2)));
        }
        lArr[i1 + 1] += (i6++);
        i3 ^= (sArr[i1 + 1] = (short)((i5 - i1) - iMeth()));
        i5 *= (int)(iFld * ((lFld * by) | (s++)));
    }
    for (i11 = 4; i11 < 96; ++i11) {
        f -= ((64851 + (iFld + i4)) - (-(lFld * i1)));
        i12 *= i4;
        lArr[i11 + 1] >>= (lFld++);
    }
    lMeth();
    iArr[(12449 >>> 1) % N] += (int)dArr[(i14 >>> 1) % N];

    System.out.println("f d d1 = " + Float.floatToIntBits(f) + "," + Double.doubleToLongBits(d) + "," +
        Double.doubleToLongBits(d1));
    System.out.println("i1 i2 i3 = " + i1 + "," + i2 + "," + i3);
    System.out.println("i4 i5 i6 = " + i4 + "," + i5 + "," + i6);
    System.out.println("s by i11 = " + s + "," + by + "," + i11);
    System.out.println("i12 i14 iArr = " + i12 + "," + i14 + "," + checkSum(iArr));
    System.out.println("lArr dArr fArr = " + checkSum(lArr) + "," + Double.doubleToLongBits(checkSum(dArr)) + "," +
        Double.doubleToLongBits(checkSum(fArr)));
    System.out.println("iArr1 sArr = " + checkSum(iArr1) + "," + checkSum(sArr));

    System.out.println("lFld iFld = " + lFld + "," + iFld);

    System.out.println("iMeth_check_sum: " + iMeth_check_sum);
    System.out.println("lMeth_check_sum: " + lMeth_check_sum);
}
}
