/*
 * Copyright (C) 2015 Intel Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by Dalvik Fuzzer tool (3.3.001). Fri May 16 12:30:43 2014
package OptimizationTests.regression.test197949;

import OptimizationTests.regression.shared.*;

public class Main extends FuzzerUtils {

public static final int N = 300;

    public static int f=4159;

public static void main(String[] mcn) {

    float lv=54.393F, qo1=-32.222F, i8[]=new float[N];
    int gkm=52529, c8w=-6538, u32=-44375, x=49546, ac0=-52785, a=-17693, z=-19363, yjt=8584, o[]=new int[N];
    byte tf=81;
    long hmy=-4400807795609714967L, b0c=2238806711266106444L, d[]=new long[N];
    short yz[]=new short[N];
    double t[]=new double[N];

    init(o, 32978);
    init(d, 3384917490570371388L);
    init(t, -28.667);
    init(yz, (short)-16757);
    init(i8, -75.971F);

    for (gkm = 289; gkm > 17; gkm -= 2) {
        for (c8w = 1; c8w < gkm; c8w++) {
            for (u32 = 8; u32 < 247; u32++) {
                x = o[gkm];
            }
        }
        ac0 = 250;
        do {
            hmy *= ((x += (x--)) - (tf + gkm));
            x >>= (int)(++hmy);
        } while ( --ac0 > 0 );
        x = c8w;
    }
    for (a = 239; a > 6; a--) {
        hmy <<= (x++);
        b0c = (-((x--) * (tf -= (byte)a)));
    }
    z = 261;
    while ( --z > 0 ) {
        x = gkm;
        d[(u32 >>> 1) % N] += (-((x--) - (--x)));
        f = 137;
        while ( --f > 0 ) {
            x = (int)(++hmy);
            x *= 8761;
            x -= (int)hmy;
            lv -= (((lv + b0c) + f) - (hmy - (++x)));
            t[f] += (((15447 - (b0c - x)) + (u32 + f)) - (x++));
        }
        for (yjt = 143; yjt > z; yjt -= 2) {
            x -= (yz[z + 1] + (o[yjt]++));
            for (float p : i8) {
                b0c |= (u32 / (b0c | 1));
                tf <<= (byte)(qo1 + ((u32 - c8w) - (gkm + 86)));
            }
        }
    }

    System.out.println("gkm c8w u32 = " + gkm + "," + c8w + "," + u32);
    System.out.println("x ac0 hmy = " + x + "," + ac0 + "," + hmy);
    System.out.println("tf a b0c = " + tf + "," + a + "," + b0c);
    System.out.println("z lv yjt = " + z + "," + Float.floatToIntBits(lv) + "," + yjt);
    System.out.println("qo1 o d = " + Float.floatToIntBits(qo1) + "," + checkSum(o) + "," + checkSum(d));
    System.out.println("t yz i8 = " + Double.doubleToLongBits(checkSum(t)) + "," + checkSum(yz) + "," +
        Double.doubleToLongBits(checkSum(i8)));
    
    System.out.println("f = " + f);
}
}
