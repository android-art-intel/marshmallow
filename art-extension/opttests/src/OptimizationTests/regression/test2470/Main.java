/*
 * Copyright (C) 2015 Intel Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by Android Runtime Fuzzer tool (3.5.002). Fri Aug 14 22:06:15 2015
// srand = 4045930413208583977914749588624354548

package OptimizationTests.regression.test2470;

import OptimizationTests.regression.shared.*;

public class Main extends FuzzerUtils {

    public static final int N = 100;

    public static short sFld=20501;
    public static int iFld=-9;

    public static long iMeth_check_sum = 0;

public static int iMeth(double d1, long l1) {

    int i4=31109, i5=45034, i6=-14, iArr1[]=new int[N];
    long l2=49698L;
    byte by1=18;
    boolean b=true;
    float f1=0.898F;
    double dArr[]=new double[N];

    init(dArr, 2.4543);
    init(iArr1, 6);

    for (double d2 : dArr) {
        iFld = 83;
        while (--iFld > 0) {
            l1 = ((++i4) * 35695L);
            i4 -= (int)(l2 = 13);
            if ((i5 * (--i5)) != (--iArr1[iFld + 1])) {
                by1 >>= (byte)(i4--);
                i4 += (int)(l2++);
                i4 >>= (i4 * ((i4 >>>= i4) / ((iFld * i5) | 1)));
                for (i6 = 4; i6 < 79; i6++) {
                    if (b) {
                        i5 = iArr1[iFld];
                        i5 += (((i6 * i4) + i4) - i6);
                    } else if (b) {
                        l1 *= (-(-15032 + (++iArr1[iFld - 1])));
                    } else {
                        i5 <<= (int)(~(long)(-f1));
                    }
                }
            }
        }
    }
    long meth_res = Double.doubleToLongBits(d1) + l1 + i4 + l2 + by1 + i5 + i6 + (b ? 1 : 0) + Float.floatToIntBits(f1)
        + Double.doubleToLongBits(checkSum(dArr)) + checkSum(iArr1);
    iMeth_check_sum += meth_res;
    return (int)meth_res;
}

public static void main(String[] strArr) {

    int i=-5685, i1=-60701, i2=-164, i3=9, i7=-8, i8=7, i9=-20795, iArr[]=new int[N];
    float f=114.632F, fArr[]=new float[N];
    long l=-9156877545475538370L, lArr[][]=new long[N][N], lArr1[]=new long[N];
    double d=-111.54740;
    byte by=-90, byArr[]=new byte[N];
    boolean b1=true;
    short sArr[]=new short[N];

    init(iArr, 111);
    init(byArr, (byte)37);
    init(lArr, 0L);
    init(fArr, 44.999F);
    init(sArr, (short)-9330);
    init(lArr1, -54679L);

    for (i = 88; i > 1; i--) {
        iArr[i - 1] <<= (-((i - i) * i));
        f = (byArr[i + 1] * f);
        iArr[i] -= i;
        l += (((i * f) + i) - sFld);
        if ((i * i) != (((sFld * i) + (-4 * (iArr[i]++))) - -71)) break;
        d -= (f--);
    }
    for (i1 = 3; i1 < 76; i1++) {
        for (i2 = 1; i2 < i1; ++i2) {
            iArr[i1 - 1] >>= ((i3 |= (i3--)) + i3);
        }
        lArr[i1][i1] += i3;
        if (((l > (by * d)) == (f > (l * i))) && ((iMeth(d, -44420L) > (--iArr[i1 + 1])) || ((15467 < (f - i3)) && (b1
            && b1)))) break;
        lArr[i1][i1 + 1] -= iArr[i1 - 1];
        fArr[i1 + 1] *= -88;
    }
    for (short s : sArr) {
        l <<= (i3--);
        d += iMeth((9L - (i1 | i3)) * (i - 2.44581), l);
        i7 = 1;
        do {
            l *= (long)(l - (2 + d));
        } while (++i7 < 80);
        lArr1[(i1 >>> 1) % N] = ((l - (i2 - i3)) - ((l - i7) + l));
    }
    for (i8 = 1; i8 < 88; i8++) {
        i9 = 1;
        do {
            b1 = (sFld == f);
            l = (((l + l) << (l = l)) - 241);
            i3 = (int)(iArr[i8 - 1] * (iArr[i8 - 1] * l));
        } while (++i9 < 61);
    }

    System.out.println("i f l = " + i + "," + Float.floatToIntBits(f) + "," + l);
    System.out.println("d i1 i2 = " + Double.doubleToLongBits(d) + "," + i1 + "," + i2);
    System.out.println("i3 by b1 = " + i3 + "," + by + "," + (b1 ? 1 : 0));
    System.out.println("i7 i8 i9 = " + i7 + "," + i8 + "," + i9);
    System.out.println("iArr byArr lArr = " + checkSum(iArr) + "," + checkSum(byArr) + "," + checkSum(lArr));
    System.out.println("fArr sArr lArr1 = " + Double.doubleToLongBits(checkSum(fArr)) + "," + checkSum(sArr) + "," +
        checkSum(lArr1));

    System.out.println("sFld iFld = " + sFld + "," + iFld);

    System.out.println("iMeth_check_sum: " + iMeth_check_sum);
}
}
