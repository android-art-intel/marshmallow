/*
 * Copyright (C) 2015 Intel Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by Dalvik Fuzzer tool (3.5.001). Tue Apr 14 03:43:15 2015
package OptimizationTests.regression.test1203;

import OptimizationTests.regression.shared.*;

public class Main extends FuzzerUtils {

    public static final int N = 100;

    public static float fArrFld[]=new float[N];
    public static long lArrFld[]=new long[N];
    public static boolean bArrFld[]=new boolean[N];

    static {
        init(bArrFld, false);
        init(fArrFld, 0.142F);
        init(lArrFld, 64333L);
    }

    public static long lMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;

public static long lMeth(long l3, int i6, float f1) {

    byte by1=15;
    float fArr1[]=new float[N];
    short s1=-22093;
    double d1=0.79516;
    long lArr[][]=new long[N][N];
    int i7=13, i8=-15326, iArr2[]=new int[N];
    boolean b=true;

    init(iArr2, -49);
    init(fArr1, 0.523F);
    init(lArr, -4598334639839589871L);

    if (b = (((i7 + i6) + (++i6)) >= i8)) {
        i7 = 1;
        while (++i7 < 79) {
            i8 = 1;
            do {
                iArr2[i7] += (int)(l3++);
                if (b) {
                    fArr1[i7] += -18126;
                }
                iArr2[(i8 >>> 1) % N] = (int)(l3 - 7L);
                i6 = (int)(((-l3) * (24794 - (--iArr2[i7 - 1]))) - l3);
                iArr2[i8] = -76;
                i6 *= (int)((-(i7 + l3)) * (++l3));
                b = (l3 < (fArr1[i8 + 1]++));
                l3 = ((-(--lArr[i8 + 1][i8 - 1])) + i8);
            } while (++i8 < 56);
        }
    } else if (d1 <= ((iArr2[(i6 >>> 1) % N]--) | ((iArr2[(-66 >>> 1) % N] = i6) - (by1 * s1)))) {
        f1 -= (i6 + (-(by1 - i6)));
    } else {
        i6 = iArr2[(i8 >>> 1) % N];
    }
    long meth_res = l3 + i6 + Float.floatToIntBits(f1) + i7 + i8 + (b ? 1 : 0) + by1 + Double.doubleToLongBits(d1) + s1
        + checkSum(iArr2) + Double.doubleToLongBits(checkSum(fArr1)) + checkSum(lArr);
    lMeth_check_sum += meth_res;
    return (long)meth_res;
}

public static int iMeth() {

    float f4=-2.848F;
    long l5=1547849672684709395L;
    int i11=-44075, i12=30189, i13=-49415, i14=214, iArr4[]=new int[N];

    init(iArr4, -25265);

    for (i11 = 3; i11 < 78; ++i11) {
        iArr4[i11] += i11;
        i12 >>>= iArr4[i11 + 1];
        i13 = 1;
        while (++i13 < 88) {
            l5 = l5;
            i12 += i13;
            i12 -= (-i13);
            i14 = 1;
            do {
                fArrFld[i14 - 1] = (++iArr4[i11 - 1]);
                i12 = (int)(--f4);
                iArr4[i13 + 1] = i14;
                f4 = lArrFld[i11 - 1];
            } while (++i14 < 33);
        }
    }
    long meth_res = i11 + i12 + i13 + l5 + i14 + Float.floatToIntBits(f4) + checkSum(iArr4);
    iMeth_check_sum += meth_res;
    return (int)meth_res;
}

public static void main(String[] strArr) {

    byte by=114;
    float f=0.686F, f2=44.33F, f3=-86.761F, f5=62.131F, fArr[]=new float[N], fArr2[]=new float[N];
    short s=10609;
    double d=2.113916, dArr[]=new double[N];
    long l=-8L, l1=-144L, l2=-5L, l4=552914982L, lArr1[]=new long[N];
    int i=12, i1=-195, i2=6, i3=143, i4=10, i5=5, i9=4423, i10=185, i15=-67, iArr[]=new int[N], iArr1[]=new int[N],
        iArr3[]=new int[N];
    boolean b1=false, b2=true;

    init(dArr, -77.121382);
    init(iArr, -1);
    init(iArr1, -47653);
    init(fArr, 2.561F);
    init(lArr1, 28557L);
    init(iArr3, 11845);
    init(fArr2, -6.618F);

    for (i = 1; i < 76; i++) {
        if (((b1 = b1) ^ ((-(i10 * i9)) != (i9 + d))) & (iArr3[i - 1] > (i1++))) {
            i1 >>>= (int)((-(--dArr[i])) * (i1 += i));
            switch (i + 40) {
            case 40:
                i1 += (int)1.858F;
                iArr[i - 1] += (int)((225 - (i1 - i)) * ((-9376 + (98 + (i + s))) % ((long)(i - d) | 1)));
                iArr1[i + 1] >>= (--i1);
                break;
            case 41:
                i1 -= (int)(((i + i2) + iArr1[i + 1]) * ((i2 - 3091418826L) + (++i2)));
                break;
            case 42:
                l = i1;
                iArr1[i] += i2;
                i1 >>= iArr1[i - 1];
                iArr1[i + 1] -= (int)((--i2) * ((by - i1) - (f * l)));
                break;
            case 43:
                fArr[i] = iArr1[i - 1];
                break;
            case 44:
                iArr[i] -= (int)l;
                i2 += (int)(((l + i) - (i - l)) - ((l + s) + i));
                break;
            case 45:
                for (i3 = 1; i3 < 30; i3 += 2) {
                    l *= (((l1--) * (-(--l1))) + i);
                }
                l2 += (((i * f) + i3) - i3);
                i4 = 1;
                do {
                    i1 += i4;
                    f = iArr[i4 + 1];
                    by += (byte)((i1 = (int)(l1 -= i1)) + ((f + -58) * (fArr[i4 - 1] *= i1)));
                    iArr[i4 + 1] -= i;
                    i2 = (int)(l - iArr1[i]);
                } while (++i4 < 11);
                bArrFld[i] = ((i - (i + i5)) < (l * lMeth(l2, i5, f2)));
                break;
            case 46:
                lArr1[(i5 >>> 1) % N] = (i1++);
                break;
            case 47:
                i5 *= (int)(1327784569596920273L - (l1--));
                break;
            case 48:
                break;
            case 49:
                i5 = (int)((long)((i5 + f) - d) << (iArr1[i] - i4));
                break;
            case 50:
                i2 *= (int)d;
                break;
            case 51:
                i1 = ((++i1) + (i4 - iArr3[i + 1]));
                break;
            case 52:
                iArr[i] = iArr3[i + 1];
            case 53:
                f2 -= (iArr1[i + 1]--);
                break;
            case 54:
                iArr[i + 1] *= (++i2);
                break;
            case 55:
                i1 /= (int)((long)((++d) * (-d)) | 1);
                break;
            case 56:
                if (b1 = b1) continue;
                break;
            case 57:
                f2 -= (float)(d--);
                break;
            case 58:
                f2 *= ((-(f * i3)) - (-Math.abs(i4)));
                break;
            case 59:
                i5 *= (int)(((242L + (i4 + by)) - (3226846648L - i)) - (by++));
                break;
            case 60:
                iArr3[i] = (-i2);
                break;
            case 61:
                lArr1[i + 1] %= (long)((long)(((-51517L - (l1++)) * (++iArr3[i - 1])) - ((iArr3[i - 1] += i3) - (l2 +
                    f))) | 1);
                break;
            case 62:
                iArr3[i - 1] = (int)(i5 <<= (int)-3203239630L);
                break;
            case 63:
                i1 -= ((i + (i5 = i2)) - (i2++));
            case 64:
                i2 = (int)(((--l) + (l2 * d)) * ((i2 * i4) * -100));
                break;
            case 65:
                i1 = (int)lArr1[i];
                break;
            case 66:
                i5 = (int)(((i5 - i) + 56011) - l);
                break;
            case 67:
                i1 = (--i2);
            case 68:
                b1 = b1;
                break;
            case 69:
                l1 = lArr1[i - 1];
                break;
            case 70:
                l1 *= ((l2 * (i5 * l2)) - (++i1));
            case 71:
                l2 += (i1--);
                break;
            case 72:
                s = (short)l1;
                break;
            case 73:
                l -= (++i1);
                break;
            case 74:
                by = (byte)(i5++);
                break;
            case 75:
                f += (i5++);
                break;
            case 76:
                i1 = (int)(i2 -= (int)lArr1[i - 1]);
                break;
            case 77:
                f = (float)d;
            case 78:
                iArr[i - 1] = (int)fArr2[i];
            case 79:
                f2 = (-(--i5));
            case 80:
                l2 += (long)(((i - 33.111550) + (-l)) + (fArr2[i - 1] - (l1++)));
                break;
            case 81:
                lArr1[i] -= (i5--);
                break;
            case 82:
                l4 = (long)(f3 - Math.abs(--f));
                break;
            case 83:
                i5 += (int)dArr[i];
                break;
            case 84:
                iArr3[i + 1] -= ((i5 * i1) + ((i9 - i5) + (i2 - i3)));
                break;
            case 85:
                i1 = by;
                break;
            case 86:
                i5 = ((i1 - (++i5)) * i5);
                break;
            case 87:
                d += (i5 += (int)d);
                break;
            case 88:
                i1 += (i - i9);
                break;
            case 89:
                i9 <<= (int)(--l);
                break;
            case 90:
                lArr1[i + 1] = (long)((i10 + -4332847667230129244L) + fArr[i]);
                break;
            case 91:
                d += (211 / ((long)((i1++) - (-57.877F + (-3 - (l4--)))) | 1));
                break;
            case 92:
                i9 = (int)(((i2 - i1) - l1) - (-(i1--)));
            case 93:
                i9 >>= (int)Long.reverseBytes((long)((f--) * i2));
            case 94:
                i2 &= (int)(f3 + iArr3[i - 1]);
                break;
            case 95:
                i5 += (-55 + (i * i));
                break;
            case 96:
                i10 += iMeth();
            case 97:
                b1 = ((++i10) != l4);
                break;
            case 98:
                i5 = iMeth();
                break;
            case 99:
                i9 = (++i1);
                break;
            case 100:
                if (b1 ^ (l1 != f)) continue;
            case 101:
                i9 >>= i;
            case 102:
                i5 <<= (int)(((i1 >>> i9) * (i2++)) + ((f *= i) - i3));
                break;
            case 103:
                d -= (i10--);
                break;
            case 104:
                i2 = (int)(d++);
                break;
            case 105:
                i5 += (i - i3);
            case 106:
                i1 = (-(++i1));
                break;
            case 107:
                l4 *= i9;
                break;
            case 108:
                i15 += (int)((--i1) + ((132 * (f5 - i5)) % 2));
            case 109:
                i10 += i;
            }
        } else if (84.38963 == (i3 * iMeth())) {
            iArr[i - 1] >>= (i2 - i);
        } else {
            bArrFld[i - 1] = b2;
        }
    }

    System.out.println("i i1 s = " + i + "," + i1 + "," + s);
    System.out.println("d i2 l = " + Double.doubleToLongBits(d) + "," + i2 + "," + l);
    System.out.println("by f i3 = " + by + "," + Float.floatToIntBits(f) + "," + i3);
    System.out.println("l1 l2 i4 = " + l1 + "," + l2 + "," + i4);
    System.out.println("i5 f2 b1 = " + i5 + "," + Float.floatToIntBits(f2) + "," + (b1 ? 1 : 0));
    System.out.println("l4 f3 i9 = " + l4 + "," + Float.floatToIntBits(f3) + "," + i9);
    System.out.println("i10 i15 f5 = " + i10 + "," + i15 + "," + Float.floatToIntBits(f5));
    System.out.println("b2 dArr iArr = " + (b2 ? 1 : 0) + "," + Double.doubleToLongBits(checkSum(dArr)) + "," +
        checkSum(iArr));
    System.out.println("iArr1 fArr lArr1 = " + checkSum(iArr1) + "," + Double.doubleToLongBits(checkSum(fArr)) + "," +
        checkSum(lArr1));
    System.out.println("iArr3 fArr2 = " + checkSum(iArr3) + "," + Double.doubleToLongBits(checkSum(fArr2)));

    System.out.println("bArrFld fArrFld lArrFld = " + checkSum(bArrFld) + "," +
        Double.doubleToLongBits(checkSum(fArrFld)) + "," + checkSum(lArrFld));

    System.out.println("lMeth_check_sum: " + lMeth_check_sum);
    System.out.println("iMeth_check_sum: " + iMeth_check_sum);
}
}
