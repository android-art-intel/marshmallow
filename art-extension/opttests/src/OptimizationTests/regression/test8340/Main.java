/*
 * Copyright (C) 2015 Intel Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by Dalvik Fuzzer tool (3.5.001). Fri Apr 17 15:21:09 2015
package OptimizationTests.regression.test8340;

import OptimizationTests.regression.shared.*;

public class Main extends FuzzerUtils {

    public static final int N = 100;

    public static long lFld=-2784139419L;
    public static double dArrFld[]=new double[N];

    static {
        init(dArrFld, -101.38833);
    }

    public static long iMeth_check_sum = 0;

public static int iMeth() {

    long l=13L, l1=-60228L, lArr[]=new long[N];
    float f=-11.691F;
    double d=-41.50241, dArr[]=new double[N];
    short s=28660;
    byte by=-84;
    int i1=5, i2=61876, i3=-5, i4=-23333, i5=14, iArr1[]=new int[N];

    init(iArr1, 6147);
    init(lArr, -941189375L);
    init(dArr, -2.23265);

    for (i1 = 2; i1 < 76; ++i1) {
        for (i2 = 1; i2 < i1; i2++) {
            i3 = (int)(1L * i3);
            i4 >>= (int)((i1 - (l <<= i3)) * (i4--));
            s = (short)(Math.abs(l) - (i2 - (i3 *= (int)d)));
            l = ((iArr1[i1] - (--l)) - (-(i4 + i2)));
            by = (byte)((i3 + (l * i3)) - (l1 | (by * l1)));
            lArr[i1] <<= (long)(((d - f) + (-(i1 * i3))) + ((dArr[i2]--) - -1067598291973889084L));
            for (i5 = 1; i5 < 10; ++i5) {
                i3 += (int)(((i3 = (int)l) + (i3++)) + (i3 += i4));
            }
            f += (iArr1[i1 + 1]--);
            i4 = (Math.min((int)(-13L << (iArr1[i2 + 1]--)), iArr1[i1]) - ((++iArr1[i1]) - (i3 * i5)));
        }
    }
    long meth_res = i1 + i2 + i3 + i4 + l + s + Double.doubleToLongBits(d) + by + l1 + Float.floatToIntBits(f) + i5 +
        checkSum(iArr1) + checkSum(lArr) + Double.doubleToLongBits(checkSum(dArr));
    iMeth_check_sum += meth_res;
    return (int)meth_res;
}

public static void main(String[] strArr) {

    long l2=2143526324298103994L, lArr1[]=new long[N];
    boolean b=true;
    float f1=-2.902F, fArr[]=new float[N];
    double d1=0.55630;
    short s1=9508;
    int i6=-64351, i7=-25589, i8=-10334, i9=-1, iArr[]=new int[N];

    init(iArr, 14);
    init(lArr1, -64L);
    init(fArr, 66.836F);

    for (int i : iArr) {
        iArr[(i >>> 1) % N] *= (4 - iMeth());
        dArrFld[(i >>> 1) % N] = (l2 - i);
        i += (int)((i = (int)(i * f1)) + l2);
        for (i6 = 1; i6 < 77; ++i6) {
            d1 += (((i - -58080) + (l2 - l2)) + ((l2 - i) * (i++)));
            i *= (--i);
            iArr[i6 + 1] = (int)lArr1[i6];
            switch (((i6 % 2) * 5) + 103) {
            case 106:
                i += (i6 * i6);
                break;
            case 108:
                for (i7 = 1; i7 < 42; ++i7) {
                    i += ((long)i7 | (long)l2);
                    if (b = (((-(d1 + i)) <= (f1 - l2)) && b)) {
                        if ((lArr1[i6]++) != (lArr1[i6]++)) {
                            i = i6;
                            i += (int)(l2 = i7);
                            iArr[i6 + 1] <<= (int)(10 * (f1 * (-i6)));
                            f1 += (i >>>= i);
                        } else {
                            iArr[i7 + 1] = (int)(-((l2 + f1) + i));
                        }
                        i += (int)(((lFld--) - (i8 -= i8)) * i8);
                    } else if (true) {
                        i9 += (int)(d1--);
                    }
                    i9 -= (int)(i6 + (f1 - fArr[i6]));
                    lArr1[i7 + 1] *= (long)(((-78.128621 * (27896 * lFld)) % ((5 - iArr[i7]) | 1)) + (28883L / (i9 |
                        1)));
                    i8 *= (i6 + (++i8));
                }
                i9 = ((-s1) - i6);
                break;
            }
        }
    }

    System.out.println("l2 f1 i6 = " + l2 + "," + Float.floatToIntBits(f1) + "," + i6);
    System.out.println("d1 i7 i8 = " + Double.doubleToLongBits(d1) + "," + i7 + "," + i8);
    System.out.println("i9 b s1 = " + i9 + "," + (b ? 1 : 0) + "," + s1);
    System.out.println("iArr lArr1 fArr = " + checkSum(iArr) + "," + checkSum(lArr1) + "," +
        Double.doubleToLongBits(checkSum(fArr)));

    System.out.println("lFld dArrFld = " + lFld + "," + Double.doubleToLongBits(checkSum(dArrFld)));

    System.out.println("iMeth_check_sum: " + iMeth_check_sum);
}
}
