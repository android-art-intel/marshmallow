/*
 * Copyright (C) 2015 Intel Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by Dalvik Fuzzer tool (3.4.001). Thu Dec 25 16:58:03 2014
package OptimizationTests.regression.test1088;

import OptimizationTests.regression.shared.*;

public class Main extends FuzzerUtils {

    public static final int N = 100;

    public static boolean zq=false, h[]=new boolean[N];

    static {
        init(h, true);
    }

public static void main(String[] jn) {

    byte to=-67;
    float fpw=-59.309F;
    int v1w=40899, oh=53041, n2=-1855, hd=25496, df=-30147, s0y=-62655, y2d=51438, wb=10583, su=43439, y20[]=new int[N];
    double y=-12.10;
    short f=8368, j1u=28649;
    long s77=4550311895208501491L, w7r=-7169192115861531401L, g[]=new long[N];

    init(y20, 61749);
    init(g, -1464162379519145647L);

    v1w = 94;
    while (--v1w > 0) {
        oh += -61195;
        y20[v1w + 1] = (int)(((long)(s77 - fpw) & (v1w - s77)) * (oh = y20[v1w]));
        oh -= oh;
        oh *= (int)(((s77 - 58701) * (oh >>> oh)) - (++g[v1w + 1]));
        for (n2 = 1; n2 < 19; ++n2) {
            hd |= (int)(((s77 >> oh) - (++f)) * (to >> (w7r % (w7r | 1))));
            hd -= (~(--y20[n2 - 1]));
            switch ((v1w % 2) + 34) {
            case 34:
                w7r += n2;
                for (df = 1; df < 5; df += 3) {
                    s0y = (int)-1984371406199414258L;
                    y20[v1w - 1] *= (int)((s0y--) - ((y2d + to) - (--w7r)));
                }
                w7r += (((n2 * n2) + wb) - w7r);
            case 35:
                hd = (y2d - (--wb));
                y20[v1w + 1] = j1u;
                s77 = y20[n2 - 1];
                y2d <<= y2d;
            default:
                s0y = (int)(-((-916604274018810424L * y) * (fpw * fpw)));
            }
            wb += (n2 - s77);
            su = 1;
            do {
                y = (s0y - (--oh));
                zq = (h[su] = zq);
                w7r = (-((w7r - hd) * (-4013994367912560046L * (oh + w7r))));
                w7r = ((oh - (n2 + v1w)) + df);
            } while ((su += 2) < 77);
        }
    }

    System.out.println("v1w oh s77 = " + v1w + "," + oh + "," + s77);
    System.out.println("fpw n2 hd = " + Float.floatToIntBits(fpw) + "," + n2 + "," + hd);
    System.out.println("f to w7r = " + f + "," + to + "," + w7r);
    System.out.println("df s0y y2d = " + df + "," + s0y + "," + y2d);
    System.out.println("wb j1u y = " + wb + "," + j1u + "," + Double.doubleToLongBits(y));
    System.out.println("su y20 g = " + su + "," + checkSum(y20) + "," + checkSum(g));

    System.out.println("zq h = " + (zq ? 1 : 0) + "," + checkSum(h));
}
}
