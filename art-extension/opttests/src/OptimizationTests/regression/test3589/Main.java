/*
 * Copyright (C) 2015 Intel Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by Android Runtime Fuzzer tool (4.1.002). Sat Mar 19 15:03:12 2016
// srand = 264644931707209481122864095939745378021

package OptimizationTests.regression.test3589;

import OptimizationTests.regression.shared.*;

public class Main extends FuzzerUtils {

    public static final int N = 100;

    public static long instanceCount=-33911L;

public static void main(String[] strArr1) {

    int i2=-57, i3=-107, i4=7290, i5=7098, i6=0, i7=6, i8=6, i9=198, iArr[]=new int[N];
    float f1=2.930F, fArr[]=new float[N];
    double d=1.7381;
    byte by=97;
    short s=-21508;
    long l=-2180073570L, lArr[]=new long[N];

    init(iArr, -10);
    init(lArr, -13405L);
    init(fArr, -54.897F);

    for (i2 = 4; i2 < 87; ++i2) {
        i3 ^= (int)(Main.instanceCount -= Main.instanceCount);
    }
    i4 = 1;
    while (++i4 < 84) {
        Main.instanceCount = (iArr[i4 + 1]--);
        iArr[i4] = i4;
        i3 -= (int)(lArr[i4 + 1] + ((--i3) - 42L));
        f1 -= (fArr[i4 + 1]--);
        i3 -= (int)(Math.abs(-i2) * ((d + Main.instanceCount) * Main.instanceCount));
        i3 = (by++);
        s += (short)i4;
        iArr[i4] >>= (int)(-(i3 + (-(i4 - f1))));
        if (!((f1++) > ((s++) * (i3--)))) continue;
        Main.instanceCount -= i3;
    }
    for (i5 = 2; i5 < 81; i5++) {
        Main.instanceCount += (((i5 * i3) + i4) - f1);
        for (i6 = 1; i6 < 19; i6 += 2) {
            i3 <<= (int)(i4 - ((i7--) * (f1 * s)));
        }
        fArr[i5 - 1] += (i7++);
        i7 -= (int)f1;
        i8 = 1;
        do {
            f1 = (((--i7) - l) + ((by - i3) * by));
            lArr[i8] &= (++iArr[i5]);
            i7 += iArr[i5];
            i7 -= (int)(((i7--) % ((++iArr[i8 - 1]) | 1)) - (l - (i9 - l)));
            f1 = (-((Main.instanceCount + i8) + f1));
        } while (++i8 < 78);
    }

    System.out.println("i2 i3 i4 = " + i2 + "," + i3 + "," + i4);
    System.out.println("f1 d by = " + Float.floatToIntBits(f1) + "," + Double.doubleToLongBits(d) + "," + by);
    System.out.println("s i5 i6 = " + s + "," + i5 + "," + i6);
    System.out.println("i7 i8 l = " + i7 + "," + i8 + "," + l);
    System.out.println("i9 iArr lArr = " + i9 + "," + checkSum(iArr) + "," + checkSum(lArr));
    System.out.println("fArr = " + Double.doubleToLongBits(checkSum(fArr)));

    System.out.println("Main.instanceCount = " + Main.instanceCount);
}
}
