/*
 * Copyright (C) 2015 Intel Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by Dalvik Fuzzer tool (3.4.001). Sun Sep 21 22:28:12 2014
package OptimizationTests.regression.test224847;

import OptimizationTests.regression.shared.*;

public class Main extends FuzzerUtils {

    public static final int N = 100;


public static void main(String[] ay) {

    boolean l2=false;
    int g9p=-37890, z=-24301, k=21820, z1t=-60361, gvu[]=new int[N];
    double b[]=new double[N];
    short g1r=-3645;
    byte rdy=-56;
    float a=57.9F, tc8[]=new float[N];
    long i=4645634402039994818L, o=5575188784157043016L;

    init(b, 0.119);
    init(tc8, -38.168F);
    init(gvu, -44424);

    for (double a9 : b) {
        g9p -= (int)i;
        for (z = 79; z > 4; --z) {
            g9p = (int)i;
            for (k = 2; k < 62; k++) {
                g9p -= (int)(tc8[z - 1] = z);
                rdy *= (byte)(++g1r);
                g9p += k;
                g9p = (++g9p);
                g9p -= (int)((-47942 + (a + g9p)) - k);
                g9p <<= (--g9p);
                a9 *= (++rdy);
                l2 = l2;
            }
            g9p -= g1r;
            gvu[z + 1] = (int)((--g9p) + (++a));
            for (z1t = 1; z1t < z; z1t++) {
                i += (++g9p);
                l2 = ((l2 = (false && (54077 != z))) == ((l2 != false) & (l2 = true)));
                g1r -= (short)(((rdy + -5511) - -45122) - k);
                g9p += (int)o;
                g9p += (int)a9;
                rdy += (byte)(((z1t * g9p) + g9p) - g9p);
            }
            gvu[z] += (int)a9;
            g9p = rdy;
            o %= (gvu[z - 1] | 1);
        }
    }

    System.out.println("g9p i z = " + g9p + "," + i + "," + z);
    System.out.println("k rdy g1r = " + k + "," + rdy + "," + g1r);
    System.out.println("a l2 z1t = " + Float.floatToIntBits(a) + "," + (l2 ? 1 : 0) + "," + z1t);
    System.out.println("o b tc8 = " + o + "," + Double.doubleToLongBits(checkSum(b)) + "," +
        Double.doubleToLongBits(checkSum(tc8)));
    System.out.println("gvu = " + checkSum(gvu));

}
}
