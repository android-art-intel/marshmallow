/*
 * Copyright (C) 2015 Intel Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by Dalvik Fuzzer tool (3.2.001). Wed Mar 26 18:26:32 2014
package OptimizationTests.regression.test183965_3;

import OptimizationTests.regression.shared.*;

public class Main extends FuzzerUtils {

    public static final int N = 500;

    public static int sl = 28843;

    public static void main(String[] u) {

        boolean g8u = false;
        long d = 6358473333496506459L, xl = 8005835806148869436L, y22 = -1700063514084112590L, j = -3754079045400649089L, sud[] = new long[N];
        float ow8 = -112.337F, k = -2.307F;
        short lg = -16433;
        byte c = 92;
        int s0 = -52251, h = 60000, an = 21491, i = 15154, cp = 51480, wng = -10928, o8e = -2808, sa = 18743, dk = -36073, hrn = -1429, s = 50682, xxn = 1352, x = 65435, wx = -1986, a = -63896, xi2 = 27968, r5[] = new int[N], kc[] = new int[N], zic[][] = new int[N][N], vq[] = new int[N], orq[] = new int[N];
        double j6u = 69.488, no = -117.392, wan[] = new double[N];

        init(sud, 3135960513603794980L);
        init(r5, 26386);
        init(wan, -116.88);
        init(kc, -48677);
        init(zic, -2622);
        init(vq, 13874);
        init(orq, -57027);

        for (long za4 : sud) {
            for (int dtr : r5) {
                lg -= (short) (((--sl) * sl) + ((s0 + h) - (23 + (d * 15461))));
                if (g8u)
                    continue;
            }
            for (an = 403; an > 10; an -= 2) {
                d = an;
                ow8 *= (i * ((long) (-70.336 % ((long) (++k) | 1)) << s0));
                sud[an] -= (long) (((-(wan[an - 1]--)) + (58103 >>> (s0 << lg))) * ((cp + 25.518F) + (14832 * (xl / (s0 | 1)))));
                wng >>= (int) ((k += (float) j6u) - (cp - (lg - no)));
                try {
                    sa = (175 / o8e);
                    kc[an - 1] = (-41909 % dk);
                    zic[an - 1][an + 1] = (-23371 / hrn);
                } catch (ArithmeticException a_e) {
                }
            }
            vq[(-49746 >>> 1) % N] += (int) (((s + xxn) + (xl * y22)) & (--o8e));
        }
        for (x = 18; x < 379; ++x) {
            if ((j - (-(wx << sl))) == -33944)
                continue;
        }
        cp = lg;
        orq[(s0 >>> 1) % N] -= (c = (byte) ((-(5536 >> a)) - (--xi2)));

        System.out.println("lg s0 h = " + lg + "," + s0 + "," + h);
        System.out.println("d g8u an = " + d + "," + g8u + "," + an);
        System.out.println("ow8 i k = " + Float.floatToIntBits(ow8) + "," + i
                + "," + Float.floatToIntBits(k));
        System.out.println("cp xl wng = " + cp + "," + xl + "," + wng);
        System.out.println("j6u no o8e = " + Double.doubleToLongBits(j6u) + ","
                + Double.doubleToLongBits(no) + "," + o8e);
        System.out.println("sa dk hrn = " + sa + "," + dk + "," + hrn);
        System.out.println("s xxn y22 = " + s + "," + xxn + "," + y22);
        System.out.println("x j wx = " + x + "," + j + "," + wx);
        System.out.println("c a xi2 = " + c + "," + a + "," + xi2);
        System.out.println("sud r5 wan = " + checkSum(sud) + "," + checkSum(r5)
                + "," + Double.doubleToLongBits(checkSum(wan)));
        System.out.println("kc zic vq = " + checkSum(kc) + "," + checkSum(zic)
                + "," + checkSum(vq));
        System.out.println("orq = " + checkSum(orq));

        System.out.println("sl = " + sl);
    }
}
