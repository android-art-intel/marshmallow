/*
 * Copyright (C) 2015 Intel Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// test generated by Dalvik Fuzzer
package OptimizationTests.regression.test117251;

import OptimizationTests.regression.shared.*;

public class Main extends FuzzerUtils {

	public static final int N = 100;

	public static void main(String[] args) {
		char x = 55085, jm9 = 43001, lfo[][] = new char[N][N], qf[] = new char[N];
		int fbt = 42771, w = -27677, w2 = -26758, mza = 15404, fz = 37720, k9l = 48004, mz = -44755, l = 53585, poz = -34811, j5g = 21048, m = -2627, r = -34008, am9 = -276, f = -9698, mgg = -46795, vc = -36995, sn[] = new int[N], nw[][] = new int[N][N], y[] = new int[N], ok3[] = new int[N], oq8[] = new int[N], o[] = new int[N], n[] = new int[N], y3[] = new int[N], j0[] = new int[N], u[] = new int[N], fh[][] = new int[N][N], kr[][] = new int[N][N];
		short rc8[] = new short[N], vp[] = new short[N], op[][] = new short[N][N];
		long f5 = -4028320051499685562L, e[] = new long[N], ngv[] = new long[N], b7b[][] = new long[N][N];

		init(sn, 44423);
		init(nw, -65235);
		init(y, -53580);
		init(ok3, 32214);
		init(oq8, 42531);
		init(o, 59997);
		init(n, -62808);
		init(e, -4136641503012617443L);
		init(y3, 47228);
		init(ngv, -5686608572546474431L);
		init(lfo, (char) 38636);
		init(b7b, -5396041744547922745L);
		init(qf, (char) 8690);
		init(op, (short) -11291);
		init(j0, 56673);
		init(u, 54835);
		init(fh, 42026);
		init(kr, -10502);

		for (w2 = 27; w2 > 1; --w2) {
			x -= (char) (nw[w2][w2 + 1]);
			f5 += (long) (f5 - (mza++));
			fz *= (int) (--k9l);
		}

		for (m = 1; m < 3; ++m) {
			if (o[m + 1] == ngv[m + 1]) {
				r *= (int) (-18535 * (y[m]));
			} else {
				for (am9 = 35; am9 > m; am9--) {
					for (f = 16; f > 1; --f) {
						y3[m] = (int) ((mgg++) + (lfo[am9 - 1][f]));
					}
				}
				jm9 *= (char) ((-64491 + ((((55448) / ((am9 != 0) ? am9 : 1)) % (((2170) + (b7b[m][m - 1]) != 0) ? (2170) + (b7b[m][m - 1])
						: 1)) * (qf[m - 1]))) * (op[m + 1][m - 1]));
				j0[m] += (int) (u[m + 1]);
			}
		}

		System.out.println("int: " + fbt + "," + w + "," + w2 + "," + mza + ","
				+ fz + "," + k9l + "," + mz + "," + l + "," + poz + "," + j5g
				+ "," + m + "," + r + "," + am9 + "," + f + "," + mgg + ","
				+ vc + "," + checkSum(sn) + "," + checkSum(nw) + ","
				+ checkSum(y) + "," + checkSum(ok3) + "," + checkSum(oq8) + ","
				+ checkSum(o) + "," + checkSum(n) + "," + checkSum(y3) + ","
				+ checkSum(j0) + "," + checkSum(u) + "," + checkSum(fh) + ","
				+ checkSum(kr));
		System.out.println("long: " + f5 + "," + checkSum(e) + ","
				+ checkSum(ngv) + "," + checkSum(b7b));
	}
}
