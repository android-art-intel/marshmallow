/*
 * Copyright (C) 2015 Intel Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by Dalvik Fuzzer tool (3.5.001). Mon May 11 11:45:02 2015
package OptimizationTests.regression.test2050;

import OptimizationTests.regression.shared.*;

public class Main extends FuzzerUtils {

    public static final int N = 100;


    public static long lMeth_check_sum = 0;

public static long lMeth(int i5) {

    float f1=-74.488F;
    double d1=-125.84013;
    short s1=-12228;
    byte by=-58, by1=-7;
    int i6=1, i7=-2791, i8=-9179, i9=6;

    for (i6 = 1; i6 < 83; i6++) {
        i5 += (i6 * i6);
    }
    for (i7 = 1; i7 < 98; i7++) {
        s1 <<= (short)(i6 + f1);
        i5 += (int)(++f1);
        for (i8 = 5; i8 < 91; i8++) {
            i9 = (int)(d1 - ((i6 + i7) + i8));
            s1 ^= by;
            f1 += (float)(d1--);
            by += (byte)(i8 * by1);
            i5 -= (int)-7L;
            f1 = (i5 += (--i9));
        }
    }
    long meth_res = i5 + i6 + i7 + s1 + Float.floatToIntBits(f1) + i8 + i9 + Double.doubleToLongBits(d1) + by + by1;
    lMeth_check_sum += meth_res;
    return (long)meth_res;
}

public static void main(String[] strArr) {

    float f=0.767F;
    double d=0.43114;
    short s=-27178, sArr[]=new short[N];
    byte byArr[]=new byte[N];
    long l=-2866126123L, lArr[]=new long[N], lArr1[]=new long[N];
    boolean b=false;
    int i=-178, i1=42375, i2=-57827, i3=158, i4=-43, i10=-2055, i11=43, i12=4, iArr[]=new int[N];

    init(lArr, -9L);
    init(iArr, 36531);
    init(lArr1, 9L);
    init(byArr, (byte)74);
    init(sArr, (short)1185);

    for (i = 5; i < 97; i++) {
        i1 = (i * (i2 + (i1++)));
        i1 += (~(--i1));
        l -= (l--);
        for (i3 = i; i3 < 56; i3++) {
            i1 += (int)lArr[i3 - 1];
            for (i4 = 2; i4 < 36; ++i4) {
                i2 *= (int)((-(d - i4)) * ((++i2) - Math.max(99, -11)));
                i2 = (int)((Math.abs(-195) - (i4 + l)) * lArr[i]);
            }
            b = (b = b);
            i2 += (i2++);
            f += (i3 ^ s);
            iArr[i3 - 1] = (int)(l + (i1 = (iArr[i + 1]++)));
        }
        i1 += (((i * l) + i4) - i4);
        d *= lMeth(iArr[i]--);
        for (i10 = 5; i10 < 87; i10++) {
            f *= (i + i3);
            i1 = (int)((++l) % ((long)((f * i4) - i4) | 1));
            i2 = (int)f;
            iArr[i] <<= (int)l;
            lArr[i10 - 1] *= (++i11);
            i2 = (int)(((i2 += i2) - i12) * ((f + l) + (f + i11)));
            i12 = (int)lArr1[i10 + 1];
            l |= (byArr[i - 1] >>> ((-13 - (32754 - (8110 + i11))) - (-2 * (l + l))));
        }
        sArr[i] += (short)i2;
    }

    System.out.println("i i1 i2 = " + i + "," + i1 + "," + i2);
    System.out.println("l i3 i4 = " + l + "," + i3 + "," + i4);
    System.out.println("d b f = " + Double.doubleToLongBits(d) + "," + (b ? 1 : 0) + "," + Float.floatToIntBits(f));
    System.out.println("s i10 i11 = " + s + "," + i10 + "," + i11);
    System.out.println("i12 lArr iArr = " + i12 + "," + checkSum(lArr) + "," + checkSum(iArr));
    System.out.println("lArr1 byArr sArr = " + checkSum(lArr1) + "," + checkSum(byArr) + "," + checkSum(sArr));


    System.out.println("lMeth_check_sum: " + lMeth_check_sum);
}
}
