/*
 * Copyright (C) 2015 Intel Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by Android Runtime Fuzzer tool (3.5.002). Sat Nov  7 14:26:19 2015
// srand = 140705296732136618251635865203576823380

package OptimizationTests.regression.test2846;

import OptimizationTests.regression.shared.*;

public class Main extends FuzzerUtils {

    public static final int N = 100;


public static void main(String[] strArr) {

    int i=-24237, i1=-8, i2=-181, iArr[]=new int[N];
    float f=67.748F, fArr[]=new float[N];
    double d=1.74550;
    long l=4046L, lArr[]=new long[N];

    init(lArr, 189L);
    init(iArr, 228);
    init(fArr, 66.164F);

    for (i = 1; i < 96; i++) {
        i1 = 1;
        while (++i1 < 31) {
            f = f;
            for (d = i1; d < 8; ++d) {
                f = (float)(((i2++) + lArr[(int)(d)]) - ((-3 + (-50.33521 * (i2 + l))) * (f - i)));
                i2 = (int)(((i * i2) + i1) - (--l));
                i2 &= (int)(l + ((i - l) + (l + f)));
            }
            f += (1.976F + (i1 * i1));
            f = (((i2 += i2) * (i + i2)) - i);
            i2 = (int)((~(long)(i2 = (int)f)) >> (i * (i2++)));
            i2 = (int)l;
        }
        for (int i3 : iArr) {
            iArr[i] += -14;
            i3 *= (int)(l >>= (long)((f++) - (d + i1)));
            fArr[i + 1] += ((iArr[i + 1] + (--f)) + ((-(i3 << i)) - (++i3)));
            iArr[i] *= ((i2--) - (i2 - iArr[i + 1]));
            i2 >>>= i;
            lArr[i + 1] |= i;
        }
    }

    System.out.println("i i1 f = " + i + "," + i1 + "," + Float.floatToIntBits(f));
    System.out.println("d i2 l = " + Double.doubleToLongBits(d) + "," + i2 + "," + l);
    System.out.println("lArr iArr fArr = " + checkSum(lArr) + "," + checkSum(iArr) + "," +
        Double.doubleToLongBits(checkSum(fArr)));

}
}
