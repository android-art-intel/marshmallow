/*
 * Copyright (C) 2015 Intel Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by Android Runtime Fuzzer tool (3.5.002). Sat Sep  5 23:59:54 2015
// srand = 314150197098570530135021737936667669912

package OptimizationTests.regression.test2603;

import OptimizationTests.regression.shared.*;

public class Main extends FuzzerUtils {

    public static final int N = 100;

    public static long lFld=-49819L;

    public static long sMeth_check_sum = 0;

public static short sMeth() {

    int i2=-22248, iArr[]=new int[N], iArr1[]=new int[N];
    short s1=14684;
    long l1=-11L, l2=-36824L, lArr1[]=new long[N];
    double d=50.6777, dArr[][]=new double[N][N];
    float f=-1.801F;

    init(iArr, -254);
    init(lArr1, -221L);
    init(dArr, -123.84168);
    init(iArr1, -187);

    for (i2 = 2; i2 < 91; i2++) {
        for (int i3 : iArr) {
            lArr1[i2] *= ((lFld += (i3 - s1)) / 6);
            i3 = (int)(((i2 * i2) + (++l1)) + Integer.reverseBytes((int)(-26 - lFld)));
            i3 >>= ((s1 - i3) - (--i3));
            l2 = (long)(d--);
            l2 *= (long)(d * ((-203 - (0.831F * iArr[i2])) - (-10 + (-(i3 + i2)))));
            i3 -= (int)dArr[i2 + 1][i2 + 1];
            iArr[i2 + 1] *= (int)lFld;
            i3 <<= (int)-3303573244L;
            lArr1[i2 + 1] *= (long)((++f) - ((i3 - i3) - (s1--)));
        }
        lArr1[i2 - 1] &= iArr1[i2];
    }
    long meth_res = i2 + s1 + l1 + l2 + Double.doubleToLongBits(d) + Float.floatToIntBits(f) + checkSum(iArr) +
        checkSum(lArr1) + Double.doubleToLongBits(checkSum(dArr)) + checkSum(iArr1);
    sMeth_check_sum += meth_res;
    return (short)meth_res;
}

public static void main(String[] strArr) {

    int i=53, i1=-141, i4=-181, i5=-3, i6=5, i7=-77, i8=-235, i9=40248, i10=11, iArr2[]=new int[N];
    long l=-1812104308L, l3=4127343180368510440L, l4=6322048793466108836L, lArr[]=new long[N];
    short s=1380;
    boolean b=false;
    byte by=-72;
    double d1=2.12588, dArr1[]=new double[N];
    float f1=-48.384F, f2=-2.306F;

    init(lArr, -10L);
    init(iArr2, 14765);
    init(dArr1, -71.71901);

    for (i = 2; i < 83; i++) {
        i1 += (((i * i) + i1) - l);
        s += (short)(lArr[i + 1] = ((s = (short)l) + -65069));
        if (b) {
            s += (short)(l * sMeth());
        }
        s += (short)((--lArr[i]) - ((i1 + i) + (i4 * -5425325813993896818L)));
        i4 &= (int)((-(i1 = (int)lFld)) * (Math.max(i1, i4) - (i1++)));
        for (i5 = 2; i5 < 36; ++i5) {
            i4 = ((i4++) - (--by));
            i6 = 1;
            while (++i6 < 20) {
                s -= (short)((--i4) - i4);
                i1 = (int)(-(l3 * (++i4)));
            }
        }
        lArr[i - 1] = (long)(((-(--i1)) - Math.min(i5, i6)) * ((d1 - i6) * (-s)));
        iArr2[i] >>= (int)(f1 - (lArr[i + 1] - (-2 - (l3 - i6))));
        f1 /= (((long)(-((iArr2[i + 1]--) - (--dArr1[i - 1])))) | 1);
    }
    i7 = 1;
    do {
        for (i8 = 4; i8 < 77; ++i8) {
            iArr2[i7] >>= (i1 >>= (i6 - -32128));
            l = (long)(lFld -= (long)((i4 + lFld) * (i7 - f2)));
            i1 += (int)(l4--);
            i4 = i4;
            i4 += by;
            iArr2[i8 + 1] -= (int)((f2++) + (i6 - (14 - (i6 - i))));
            i4 = i9;
            i9 = (--i10);
        }
    } while (++i7 < 77);

    System.out.println("i i1 l = " + i + "," + i1 + "," + l);
    System.out.println("s b i4 = " + s + "," + (b ? 1 : 0) + "," + i4);
    System.out.println("i5 by i6 = " + i5 + "," + by + "," + i6);
    System.out.println("l3 d1 f1 = " + l3 + "," + Double.doubleToLongBits(d1) + "," + Float.floatToIntBits(f1));
    System.out.println("i7 i8 f2 = " + i7 + "," + i8 + "," + Float.floatToIntBits(f2));
    System.out.println("l4 i9 i10 = " + l4 + "," + i9 + "," + i10);
    System.out.println("lArr iArr2 dArr1 = " + checkSum(lArr) + "," + checkSum(iArr2) + "," +
        Double.doubleToLongBits(checkSum(dArr1)));

    System.out.println("lFld = " + lFld);

    System.out.println("sMeth_check_sum: " + sMeth_check_sum);
}
}
