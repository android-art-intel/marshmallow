/*
 * Copyright (C) 2015 Intel Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by Dalvik Fuzzer tool (2.1.003). Wed Jan 29 06:46:04 2014
package OptimizationTests.regression.test168274;

import OptimizationTests.regression.shared.*;

public class Main extends FuzzerUtils {

    public static final int N = 30;

    public static void main(String[] dj) {

        char n77[] = new char[N];
        byte kz[][] = new byte[N][N];
        long h = 6937698950543538099L, ok[][] = new long[N][N], n1a[] = new long[N];
        int zu = -19740, k8p = -9738, mnl = 42436, pcc = -43308, uq = -41466, o = 53998, t = 58457, cx = -4106, qt = 63753, gh[] = new int[N], p[][] = new int[N][N], ye[] = new int[N], bxp[][] = new int[N][N], xm[][] = new int[N][N], u[] = new int[N], i0g[] = new int[N];

        init(gh, -49580);
        init(p, -34060);
        init(ye, -16697);
        init(bxp, 48940);
        init(xm, -43328);
        init(u, -10666);
        init(ok, 667689714754404474L);
        init(n77, (char) 14146);
        init(n1a, 3585011243873524691L);
        init(kz, (byte) -8);
        init(i0g, 53251);

        for (zu = 1; zu > 1; zu--) {
            gh[zu + 1] = (int) (gh[zu] - gh[zu - 1]);
        }

        for (k8p = 1; k8p < 8; ++k8p) {
            int d = 11;
            while (--d > 0) {
                p[k8p + 1][k8p + 1] = (int) (p[k8p - 1][k8p - 1]);
                for (mnl = 0; mnl > 1; mnl--) {
                    ye[k8p - 1] += (int) (21921);
                }
                bxp[k8p + 1][k8p + 1] += (int) (gh[k8p - 1]);
            }
            h -= (long) (xm[k8p - 1][k8p + 1]);
            try {
                pcc = (int) (xm[k8p - 1][k8p + 1]);
                u[32] = (int) uq;
                if (o > 0)
                    continue;
            } catch (ArrayIndexOutOfBoundsException b1i) {
                p[k8p][k8p - 1] *= (int) ((t--) - (-49452 + (ok[k8p][k8p + 1])));
                int sy = 11;
                while (--sy > 0) {
                    p[k8p - 1][k8p + 1] = (int) (n77[k8p]);
                    cx = (int) (n77[k8p + 1]);
                    t -= (int) (ye[k8p]);
                }
            }
        }

        System.out.println("char: " + (int) checkSum(n77));
        System.out.println("byte: " + checkSum(kz));
        System.out.println("long: " + h + "," + checkSum(ok) + ","
                + checkSum(n1a));
        System.out.println("int: " + zu + "," + k8p + "," + mnl + "," + pcc
                + "," + uq + "," + o + "," + t + "," + cx + "," + qt + ","
                + checkSum(gh) + "," + checkSum(p) + "," + checkSum(ye) + ","
                + checkSum(xm) + "," + checkSum(u) + "," + checkSum(i0g));

        System.out.println("bxp: " + checkSum(bxp));
    }
}
