/*
 * Copyright (C) 2015 Intel Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by Dalvik Fuzzer tool (3.4.001). Fri Oct 17 03:58:29 2014
package OptimizationTests.regression.test760;

import OptimizationTests.regression.shared.*;

public class Main extends FuzzerUtils {

    public static final int N = 100;

    public static void main(String[] o) {

        int l = -63678, nwa = -35620, n2c = 43779, vj = -12008, v = -23155, m = -13282, j = -44554, f = 48794, n = -1787, r = -10258, u[] = new int[N], sox[] = new int[N];
        byte zf = -55;
        long c = 7713600299947215518L, xn[] = new long[N];
        short hn = -13589;
        float fox = -29.1011F;

        init(xn, -6900928184843417281L);
        init(u, -12350);
        init(sox, 26182);

        for (long rjd : xn) {
            for (l = 1; l < 93; l++) {
                rjd = u[l + 1];
            }
            nwa = (int) ((nwa + (fox * n2c)) - zf);
            rjd = (l + l);
            fox += (rjd++);
            rjd = l;
            for (vj = 4; vj < 82; ++vj) {
                fox = (--nwa);
            }
            rjd = ((-nwa) * ((n2c - rjd) + (vj - rjd)));
        }
        for (v = 2; v < 78; ++v) {
            xn[v] += (long) ((m++) * ((fox - c) + u[v + 1]));
            u[v + 1] <<= m;
        }
        for (j = 1; j < 88; j++) {
            f = 1;
            while ((f += 3) < 17) {
                u[j] = ((-(1401 - (++n2c))) - ((f - -10033) - u[f + 1]));
                c -= (-(--n2c));
                for (n = 2; n < 32; n++) {
                    nwa *= (int) ((35835 * (j + -757842657946231817L)) + xn[j + 1]);
                }
                m -= (int) c;
                m -= ((sox[f + 1] - (vj + l)) + (--nwa));
                n2c = hn;
                r = 1;
                while (++r < 72) {
                    m %= (int) 8719145840408188815L;
                    n2c <<= (int) (((c + f) - (vj + -4073)) + vj);
                }
            }
        }

        System.out.println("l nwa fox = " + l + "," + nwa + ","
                + Float.floatToIntBits(fox));
        System.out.println("n2c zf vj = " + n2c + "," + zf + "," + vj);
        System.out.println("v m c = " + v + "," + m + "," + c);
        System.out.println("j f n = " + j + "," + f + "," + n);
        System.out.println("hn r xn = " + hn + "," + r + "," + checkSum(xn));
        System.out.println("u sox = " + checkSum(u) + "," + checkSum(sox));

    }
}
