/*
 * Copyright (C) 2015 Intel Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by Dalvik Fuzzer tool (3.5.001). Tue Apr 14 03:55:22 2015
package OptimizationTests.regression.test1202;

import OptimizationTests.regression.shared.*;

class UserDefinedException extends RuntimeException {
    public int field;
}

public class Main extends FuzzerUtils {

    public static final int N = 100;


    public static long iMeth_check_sum = 0;

public static int iMeth(int i4, int i5, int i6) {

    float f1=-73.445F;
    double d1=1.66475, dArr[]=new double[N];
    byte by1=11;
    long l1=2122514494841027525L;
    int i7=13, i8=-44575, i9=4, i10=-3048, iArr1[][]=new int[N][N];
    short s=24016, sArr[][]=new short[N][N];

    init(iArr1, 7);
    init(dArr, -1.104134);
    init(sArr, (short)6222);

    for (i7 = 4; i7 < 98; i7++) {
        d1 = ((~(-8 - l1)) * (f1 * (-f1)));
        l1 += (((i7 * i4) + f1) - i7);
        l1 += (long)(((-2.94099 + (i4 * i4)) - (d1 + -241)) * ((22881 + i7) * f1));
        for (i8 = i7; i8 < 50; ++i8) {
            iArr1[i8 - 1][i7 - 1] -= (-i6);
            try {
                iArr1[i7][i8 - 1] = (int)((dArr[i7 + 1]++) + sArr[i8 + 1][i7 + 1]);
                for (i9 = 95; i9 > i8; i9--) {
                    i4 += i9;
                    i6 *= (iArr1[i9 + 1][i7] + ((i4 >>= i10) + (i6++)));
                    f1 -= ((-9L * (s++)) - (iArr1[i8 - 1][i9 - 1] * (-76 - (s++))));
                }
            }
            catch (ArrayIndexOutOfBoundsException exc) {
                by1 = (byte)i9;
            }
            finally {
                i10 += (iArr1[i7][i8 - 1] * i8);
            }
        }
    }
    long meth_res = i4 + i5 + i6 + i7 + Double.doubleToLongBits(d1) + l1 + Float.floatToIntBits(f1) + i8 + i9 + i10 + s
        + by1 + checkSum(iArr1) + Double.doubleToLongBits(checkSum(dArr)) + checkSum(sArr);
    iMeth_check_sum += meth_res;
    return (int)meth_res;
}

public static void main(String[] strArr) {

    double d=0.7025, d2=96.118297;
    float f=2.658F;
    byte by=113;
    long l=-170L, lArr[]=new long[N];
    boolean bArr[]=new boolean[N];
    int i=-75, i1=-12987, i2=-4, i3=-13, i11=179, i12=117, i13=0, i14=198, i15=-55, iArr[]=new int[N];
    short s1=26294;

    init(iArr, -9);
    init(bArr, false);
    init(lArr, 4164567426L);

    for (i = 1; i < 95; ++i) {
        f = (i - i1);
    }
    for (i2 = 4; i2 < 87; i2++) {
        i1 -= (int)(((d % (i | 1)) + (i - l)) * ((i - i1) * (by * i1)));
        f += i;
        i3 *= (i1 <<= ((by--) - (iArr[i2 - 1]++)));
        d = (d + ((i3 + i3) * i));
        by = (byte)(-iMeth((int)(-139 * (++l)), i11--, --i1));
        l *= (~(l + i));
        for (i12 = 25; i12 > 1; --i12) {
            i13 <<= iArr[i12 - 1];
            i1 += (++i11);
            l = (long)((i11 - (i2 - i14)) + ((f += s1) - (i13 * i14)));
            l -= (long)((--f) - i1);
            if (bArr[i2 - 1]) continue;
            try {
                if ((((i14 - 64) + (i + -4678)) << ((i14 * s1) + (3885 + (s1 / (s1 | 1))))) == l) break;
                i3 = (int)f;
            }
            catch (ArrayIndexOutOfBoundsException exc1) {
                lArr[i2 - 1] <<= (long)(f - (238 + (l - d)));
            }
            catch (UserDefinedException exc2) {
                for (i15 = 1; i15 < 39; ++i15) {
                    f = (i13 - ((f - i14) * (l - l)));
                    f -= (((i13 * -9719) - (-97L + (i12 / (l | 1)))) * i14);
                    iArr[i12 + 1] -= (int)(((i3--) - (i14++)) - d2);
                    iArr[i15 - 1] -= (int)Math.abs((l * l) - (-95L - (i1 /= (i2 | 1))));
                    i1 -= (int)(l * ((i3 - -234) * (-31982 - (i11 + i3))));
                }
            }
        }
    }

    System.out.println("i f i1 = " + i + "," + Float.floatToIntBits(f) + "," + i1);
    System.out.println("i2 d l = " + i2 + "," + Double.doubleToLongBits(d) + "," + l);
    System.out.println("by i3 i11 = " + by + "," + i3 + "," + i11);
    System.out.println("i12 i13 i14 = " + i12 + "," + i13 + "," + i14);
    System.out.println("s1 i15 d2 = " + s1 + "," + i15 + "," + Double.doubleToLongBits(d2));
    System.out.println("iArr bArr lArr = " + checkSum(iArr) + "," + checkSum(bArr) + "," + checkSum(lArr));


    System.out.println("iMeth_check_sum: " + iMeth_check_sum);
}
}
