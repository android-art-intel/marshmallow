/*
 * Copyright (C) 2015 Intel Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by Android Runtime Fuzzer tool (3.5.002). Wed Nov  4 08:47:00 2015
// srand = 216706521674360456113929783203732737200

package OptimizationTests.regression.test2838;

import OptimizationTests.regression.shared.*;

class UserDefinedException extends RuntimeException {
    public int field;
}

public class Main extends FuzzerUtils {

    public static final int N = 100;

    public static int iFld=-3;
    public static double dFld=-99.78471;
    public static float fArrFld[]=new float[N];

    static {
        init(fArrFld, 111.521F);
    }

    public static long iMeth_check_sum = 0;
    public static long fMeth_check_sum = 0;

public static int iMeth(float f, int i1, long l) {

    double d1=2.79536, dArr[]=new double[N];
    int i3=-50256, i4=2698, iArr[]=new int[N];
    byte by1=-35;
    long lArr[]=new long[N];
    float fArr[]=new float[N];

    init(iArr, 27163);
    init(dArr, -46.23009);
    init(lArr, 9L);
    init(fArr, -1.929F);

    for (int i2 : iArr) {
        i1 *= (int)(((d1 * i1) - (i2 - i1)) * (--i2));
        for (i3 = 3; i3 < 76; i3 += 3) {
            i2 += (int)(f++);
            i2 += (int)(dArr[i3 + 1] - ((by1 * 3827979160L) + (l++)));
            for (i4 = i3; i4 < 68; ++i4) {
                lArr[i4] += (long)fArr[i3];
                fArr[i3] = -10;
            }
            f += ((-(i3 + i3)) + 129);
        }
        for (iFld = 2; iFld < 77; iFld += 2) {
            i1 += i4;
        }
        fArr[(i2 >>> 1) % N] = (++i1);
    }
    long meth_res = Float.floatToIntBits(f) + i1 + l + Double.doubleToLongBits(d1) + i3 + by1 + i4 + checkSum(iArr) +
        Double.doubleToLongBits(checkSum(dArr)) + checkSum(lArr) + Double.doubleToLongBits(checkSum(fArr));
    iMeth_check_sum += meth_res;
    return (int)meth_res;
}

public static float fMeth(long l1, boolean b1) {

    int i5=-19217, i6=-8, i7=1, i8=-57215, iArr1[][]=new int[N][N];
    float f1=-43.114F;

    init(iArr1, -36012);

    for (i5 = 1; i5 < 80; i5++) {
        i6 -= (int)2.392F;
        l1 >>>= i6;
        i6 = iArr1[i5][i5 + 1];
        i6 ^= iFld;
        l1 = (i6 = (int)(iArr1[i5][i5] % (l1 | 1)));
        i6 += (((i5 * iFld) + i6) - i5);
        l1 += (((i5 * i6) + iFld) - l1);
        dFld = (((l1 | l1) * (dFld++)) - (i6 << (long)(-dFld)));
        i7 = 81;
        do {
            i6 += (int)((++f1) + ((dFld + i8) * i5));
            iArr1[i7 + 1][i5] = (int)(++l1);
        } while ((i7 -= 2) > 0);
    }
    long meth_res = l1 + (b1 ? 1 : 0) + i5 + i6 + i7 + Float.floatToIntBits(f1) + i8 + checkSum(iArr1);
    fMeth_check_sum += meth_res;
    return (float)meth_res;
}

public static void main(String[] strArr) {

    int i=-225, i9=11, i10=-32309, i11=-36303, iArr2[]=new int[N];
    boolean b=false;
    double d=1.107481;
    byte by=10;
    long l2=58460L, l3=-7181499701572826421L, lArr1[]=new long[N];
    float f2=-62.117F;

    init(iArr2, -43390);
    init(lArr1, 0L);

    for (i = 4; i < 91; ++i) {
        if (b || (((i + d) * (by >> i)) > iMeth(fMeth(l2, b), iFld + iFld, l2 = i))) continue;
        iArr2[i - 1] -= (int)253L;
        f2 = (float)(dFld - (i9 &= (-(i - i))));
        i9 *= (i - (--i9));
        f2 *= (--i9);
    }
    for (i10 = 3; i10 < 87; i10++) {
        lArr1[i10 - 1] |= (i9--);
        try {
            fArrFld[i10 - 1] -= (i9++);
            l2 += (i9 >>= (int)((l2 + l2) + (i9++)));
            i9 <<= (int)(((iFld - l2) * iFld) * ((++l2) + iArr2[i10 + 1]));
            i9 = (((i9 + -59) + -234) + Integer.reverseBytes(i9));
        }
        catch (UserDefinedException exc) {
            l2 = i;
            l2 *= iArr2[i10 - 1];
        }
        fArrFld[i10 - 1] %= (((10 + (i10 + i9)) - l2) | 1);
        switch (((iMeth(f2, i, l2) >>> 1) % 2) + 54) {
        case 54:
            i9 *= (int)f2;
            i9 /= (int)(i10 | 1);
            break;
        case 55:
            try {
                i9 += (i10 * i10);
            }
            catch (NegativeArraySizeException exc1) {
                l2 *= (long)f2;
                for (i11 = 1; i11 < 37; i11++) {
                    i9 += i11;
                }
                i9 *= (int)(((i11 - i10) + l2) - (Math.min(l3, 45195L) * (++i9)));
            }
            break;
        }
    }

    System.out.println("i b d = " + i + "," + (b ? 1 : 0) + "," + Double.doubleToLongBits(d));
    System.out.println("by l2 f2 = " + by + "," + l2 + "," + Float.floatToIntBits(f2));
    System.out.println("i9 i10 i11 = " + i9 + "," + i10 + "," + i11);
    System.out.println("l3 iArr2 lArr1 = " + l3 + "," + checkSum(iArr2) + "," + checkSum(lArr1));

    System.out.println("iFld dFld fArrFld = " + iFld + "," + Double.doubleToLongBits(dFld) + "," +
        Double.doubleToLongBits(checkSum(fArrFld)));

    System.out.println("iMeth_check_sum: " + iMeth_check_sum);
    System.out.println("fMeth_check_sum: " + fMeth_check_sum);
}
}
