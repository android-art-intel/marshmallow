/*
 * Copyright (C) 2015 Intel Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by Dalvik Fuzzer tool (3.5.001). Sat Mar  7 23:31:28 2015

package OptimizationTests.regression.test1669;

import OptimizationTests.regression.shared.*;

public class Main extends FuzzerUtils {

    public static final int N = 100;

    public static float fFld=1.512F;
    public static int iFld=-186;

public static void main(String[] strArr) {

    boolean b=true;
    short s=16843;
    long l=2572L, l1=-4768465000719909554L, lArr[]=new long[N];
    double d=-62.27561;
    byte by=-127;
    int i=-14191, i1=2093, i2=-5, i3=80, iArr[]=new int[N];

    init(iArr, 65392);
    init(lArr, 2567251973291114569L);

    for (i = 1; i < 86; ++i) {
        d %= (i | 1);
        fFld += (fFld * (--l));
        fFld = (float)(i * 0.26583);
        by %= (byte)((((i - i) + i) + ((l++) + (l + i))) | 1);
        i1 >>= (i1++);
        for (i2 = 46; i2 > 1; i2--) {
            i3 = 1;
            do {
                i1 += i3;
                l = (i1++);
                fFld -= (--l);
                iArr[i3] >>= (-i1);
                d = (((i1 += i) - i2) - ((s - l) * (i1 + fFld)));
                i1 -= (int)l;
            } while (++i3 < i);
            l -= -10;
            i1 = i1;
            b = b;
            l1 -= l;
            i1 >>= (int)((--i1) - d);
            l1 -= (-((--i1) + Math.min(i2, i)));
            iFld = 1;
            do {
                i1 <<= (int)((Math.abs(0.68467) - (i - l1)) + l);
                i1 = (int)((lArr[i2 + 1]++) - ((l1 * 44691) + (l1 * d)));
                i1 -= (-(Math.max(i2, -13) + iArr[i2 + 1]));
                iArr[iFld - 1] = (iFld + iFld);
            } while (++iFld < 88);
        }
    }

    System.out.println("i d l = " + i + "," + Double.doubleToLongBits(d) + "," + l);
    System.out.println("by i1 i2 = " + by + "," + i1 + "," + i2);
    System.out.println("i3 s b = " + i3 + "," + s + "," + (b ? 1 : 0));
    System.out.println("l1 iArr lArr = " + l1 + "," + checkSum(iArr) + "," + checkSum(lArr));

    System.out.println("fFld iFld = " + Float.floatToIntBits(fFld) + "," + iFld);
}
}
