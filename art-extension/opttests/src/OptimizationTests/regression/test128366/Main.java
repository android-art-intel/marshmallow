/*
 * Copyright (C) 2015 Intel Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by Dalvik Fuzzer tool (2.1.003). Sun Aug  4 02:59:51 2013
package OptimizationTests.regression.test128366;

import OptimizationTests.regression.shared.*;

public class Main extends FuzzerUtils {

    public static final int N = 30;

    public static void main(String[] v8m) {

        char i8[] = new char[N];
        int y = -6826, od = -4854, klm = 12896, f11 = -60984, dns = -25871, yn = -14554, hy[][] = new int[N][N], p[] = new int[N], afj[] = new int[N], l[] = new int[N];

        init(i8, (char) 39301);
        init(hy, -40385);
        init(p, -19303);
        init(afj, 27575);
        init(l, -3963);

        for (y = 1; y < 9; ++y) {
            for (char n : i8) {
                hy[y - 1][y + 1] = (int) (p[y]);
                for (char gfl : i8) {
                    p[y] += (int) (hy[y][y - 1]);
                    if (od > 0)
                        continue;
                    od = (int) (-39843 * y);
                }

                int a3 = 11;
                while (--a3 > 0) {
                    i8[y + 1] += (char) (afj[y + 1]);
                    klm *= (int) (l[y + 1]);
                    od -= (int) (--f11);
                }
            }

            int c4x = 11;
            do {
                for (dns = 1; dns < y; ++dns) {
                    l[y - 1] -= (int) ((afj[dns - 1]) - klm);
                    yn *= (int) (yn - (p[dns]));
                }
            } while (--c4x > 0);
        }

        System.out.println("char: " + (int) checkSum(i8));
        System.out.println("int: " + y + "," + od + "," + klm + "," + f11 + ","
                + dns + "," + yn + "," + checkSum(hy) + "," + checkSum(p) + ","
                + checkSum(afj) + "," + checkSum(l));
    }
}
