/*
 * Copyright (C) 2015 Intel Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by Dalvik Fuzzer tool (3.4.001). Sun Aug 24 16:34:34 2014
package OptimizationTests.regression.test569;

import OptimizationTests.regression.shared.*;

public class Main extends FuzzerUtils {

    public static final int N = 100;


public static void main(String[] xuc) {

    double qx=46.394, a95=-4.882;
    int oa=44364, r=31627, qt=60819, d4=-37541, vtq=41616, w5=27149, tk=-46378, e=-36173, ju1[]=new int[N];
    short r7c=11507, m=18386;
    float z1s=-114.903F;
    long bh=3070998310598548877L;

    init(ju1, 44419);

    oa = 1;
    while (++oa < 89) {
        qx -= (oa - (oa * -48624));
        r = (int)(((r7c--) + (qx--)) + ((oa - bh) - 48470));
        z1s = 35635;
        z1s -= (r++);
        r += (int)((r--) * ((-878142402923148427L & (r7c - r)) * (-52829 - oa)));
        z1s += (oa + r);
        r = (int)(r - ((-65249 * (--z1s)) + 64915));
    }
    for (qt = 2; qt < 80; ++qt) {
        qx -= ((~r) + ((z1s - qx) * (z1s--)));
        d4 = 1;
        do {
            r += (d4 * m);
        } while (++d4 < 49);
        bh >>= bh;
        for (vtq = 5; vtq < 83; ++vtq) {
            w5 = (int)((-d4) - ((bh * vtq) * (r--)));
            r -= (int)(w5 - (vtq + (~(long)(oa * qx))));
            z1s = (r--);
            if ((-6784944825221677474L + qx) != bh) continue;
        }
        z1s = ((z1s / ((oa * oa) | 1)) + (r *= r));
    }
    for (a95 = 5; a95 < 85; a95++) {
        tk = 1;
        while (++tk < (int)a95) {
            ju1[(int)(a95)] <<= (ju1[tk + 1] - e);
            bh *= (++r7c);
            r += (int)(z1s--);
            bh += (((tk * w5) + vtq) - tk);
        }
    }

    System.out.println("oa qx r = " + oa + "," + Double.doubleToLongBits(qx) + "," + r);
    System.out.println("r7c bh z1s = " + r7c + "," + bh + "," + Float.floatToIntBits(z1s));
    System.out.println("qt d4 m = " + qt + "," + d4 + "," + m);
    System.out.println("vtq w5 a95 = " + vtq + "," + w5 + "," + Double.doubleToLongBits(a95));
    System.out.println("tk e ju1 = " + tk + "," + e + "," + checkSum(ju1));

}
}
