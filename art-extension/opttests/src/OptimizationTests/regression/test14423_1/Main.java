/*
 * Copyright (C) 2015 Intel Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by Android Runtime Fuzzer tool (3.5.002). Sun Jun 21 16:28:26 2015
// srand = 10561106018584719627239487441557951059835558433954664207501611560385
package OptimizationTests.regression.test14423_1;

import OptimizationTests.regression.shared.*;

public class Main extends FuzzerUtils {

    public static final int N = 100;

    public static long lFld=-1L;

public static void main(String[] strArr) {

    long l=0L;
    byte by=65;
    int i=-197, i1=4, i2=-13, i3=-37825, i4=-40769, i5=250, i6=-10373, i7=-159, i8=9197, i9=-4, iArr[]=new int[N];
    double d=64.81882, dArr[]=new double[N];
    float f=1.177F;
    short s=-21028;

    init(dArr, -95.118948);
    init(iArr, 245);

    for (i = 87; i > 2; i--) {
        dArr[i - 1] = by;
    }
    for (i1 = 1; i1 < 85; ++i1) {
        for (i2 = i1; i2 < 16; i2++) {
            i3 >>= (int)(((i1 * i3) * (-127 - (i1 * -8440139005499006888L))) * ((i4 | i3) - (++i5)));
            lFld = (((lFld + 19715) + (-6 * (-(lFld * lFld)))) - i3);
            by *= (byte)(-iArr[i1 + 1]);
            i5 += i2;
            for (d = 1; d < 19; ++d) {
                lFld = i3;
                iArr[(int)(d - 1)] += (int)(lFld * lFld);
                if (((i3 += (i2 * i6)) / ((iArr[(i3 >>> 1) % N] * (i3 * i6)) | 1)) < -221) continue;
                i5 <<= (--i3);
                lFld += (long)(((-iArr[i1 - 1]) * (dArr[i1 + 1]++)) - ((i6 - 6) - (iArr[i2 + 1] >>>= i2)));
            }
            for (i7 = 1; i7 < 39; i7++) {
                lFld <<= l;
                l = (--l);
                f *= (i6--);
                iArr[i1 + 1] -= i4;
                i6 = ((-(i5 % -22158)) - (i6++));
            }
            i4 += (i2 * i2);
            for (i8 = 2; i8 < 52; i8++) {
                i4 += i8;
                s += (short)(((i8 * l) + l) - i2);
                if ((iArr[i2] = (int)((--f) - (186L - (i1 % (i9 | 1))))) > by) break;
            }
        }
    }

    System.out.println("i by i1 = " + i + "," + by + "," + i1);
    System.out.println("i2 i3 i4 = " + i2 + "," + i3 + "," + i4);
    System.out.println("i5 d i6 = " + i5 + "," + Double.doubleToLongBits(d) + "," + i6);
    System.out.println("i7 l f = " + i7 + "," + l + "," + Float.floatToIntBits(f));
    System.out.println("i8 s i9 = " + i8 + "," + s + "," + i9);
    System.out.println("dArr iArr = " + Double.doubleToLongBits(checkSum(dArr)) + "," + checkSum(iArr));

    System.out.println("lFld = " + lFld);
}
}
