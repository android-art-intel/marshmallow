/*
 * Copyright (C) 2015 Intel Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by Android Runtime Fuzzer tool (3.5.002). Fri Jul 31 19:51:48 2015
// srand = 6377917471288424620090319165717342881519339647953009124094608937227

package OptimizationTests.regression.test2386;

import OptimizationTests.regression.shared.*;

public class Main extends FuzzerUtils {

    public static final int N = 100;

    public static int iFld=18922, iFld1=12;

public static void main(String[] strArr) {

    float f=1.680F;
    double d=-49.34965;
    int i=-3, i1=57580, i2=-8, i3=-64191, i4=-14, iArr[]=new int[N];
    boolean b=false;
    long l=-5337397394859336921L, l1=38L, l2=12L, lArr[]=new long[N];
    short s=-17155;

    init(lArr, -12L);
    init(iArr, 195);

    for (i = 5; i < 98; i++) {
        for (i1 = i; i1 < i; ++i1) {
            i2 = 1;
            do {
                iFld -= Math.max(iFld, iFld++);
                d *= l;
                iFld -= (iFld--);
                d = (i * (f--));
                lArr[i2] = i2;
                l1 += 23651;
                l %= 212;
            } while (++i2 < 35);
            iFld -= (--iArr[i1]);
            iArr[i1 + 1] = (int)(((f * i2) - iFld) + (i * (l - 200)));
            b = ((b = (i1 != d)) != ((b = b) == (l == -1044)));
            iFld >>>= (iFld1 += ((i2 ^ iFld1) - i));
            for (i3 = 1; i3 < i1; i3++) {
                l2 = (long)((f - (l++)) + (i2 - (-(d + d))));
                l1 -= (long)(((iFld1--) - (f + i)) - ((l1 * -51914) - iFld1));
                iFld1 >>= ((iFld1 += (s++)) + (iFld1--));
                iFld = i3;
                iFld1 += i3;
                iFld1 += (int)-92.45173;
            }
        }
        i4 = (--iFld1);
        s += (short)(-((2.67897 * (l2 * l1)) - (++l2)));
        iFld = -15145;
    }
    iFld += i4;

    System.out.println("i i1 i2 = " + i + "," + i1 + "," + i2);
    System.out.println("d l f = " + Double.doubleToLongBits(d) + "," + l + "," + Float.floatToIntBits(f));
    System.out.println("l1 b i3 = " + l1 + "," + (b ? 1 : 0) + "," + i3);
    System.out.println("l2 s i4 = " + l2 + "," + s + "," + i4);
    System.out.println("lArr iArr = " + checkSum(lArr) + "," + checkSum(iArr));

    System.out.println("iFld iFld1 = " + iFld + "," + iFld1);
}
}
