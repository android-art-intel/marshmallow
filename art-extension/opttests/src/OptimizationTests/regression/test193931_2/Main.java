/*
 * Copyright (C) 2015 Intel Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by Dalvik Fuzzer tool (3.3.001). Sat May 10 17:09:38 2014
package OptimizationTests.regression.test193931_2;

import OptimizationTests.regression.shared.*;

public class Main extends FuzzerUtils {

public static final int N = 300;

    public static int hn8=-53123;

public static void main(String[] m) {

    boolean ahk=true;
    byte gk=94;
    long z1g=7545746759153034919L, x=-7531473328838141592L, kf[]=new long[N];
    double cg=-124.803;
    short kp0=29671, fwy[]=new short[N];
    int lq=-15759, kj=32931, cbp=-55047, o=56474, f5w=52857, h=-17411, f[]=new int[N], ng[]=new int[N];
    float cyx=91.621F, uht[][]=new float[N][N];

    init(f, -35775);
    init(kf, -1401942925310102792L);
    init(fwy, (short)28702);
    init(ng, 27873);
    init(uht, -114.901F);

    for (int zc : f) {
        z1g += (z1g--);
        lq += (gk - (f[(zc >>> 1) % N]++));
        lq = (int)(kj + ((cyx - z1g) + (++z1g)));
        kj -= (int)-8398446517307202788L;
    }
    for (cbp = 226; cbp > 9; cbp -= 2) {
        kj += (int)(((kj + cyx) * (lq % -29409)) + (--kp0));
        for (hn8 = 5; hn8 < 288; ++hn8) {
            x += (long)((-(z1g - -67.895)) - (-(kf[hn8 - 1]--)));
            cyx -= (float)(-11502 + ((cg += kp0) + hn8));
            x += (kf[hn8]--);
        }
        z1g <<= (++lq);
        z1g = (lq--);
        for (o = 4; o < 232; o++) {
            for (f5w = o; f5w < 41; ++f5w) {
                fwy[cbp + 1] -= (short)ng[o + 1];
                if ((ahk = (uht[o + 1][o - 1] != (cg * 61889))) && (ahk = false)) break;
                kf[o] *= (long)(((hn8 * 21782) * (cg + cbp)) * cbp);
                ahk = (ahk = ((o <= lq) == (lq >= gk)));
            }
        }
    }
    for (h = 18; h < 288; ++h) {
        ng[h] += (cbp * (hn8 - (-(kj++))));
        kj -= (int)(((--lq) + (hn8 + -46225)) + ((cyx + f5w) - -28700));
        lq |= ((lq--) + (kj--));
        uht[h - 1][h - 1] *= (-(--lq));
        f[h + 1] %= (int)(((lq--) * ((f5w * hn8) - 6397848651950915096L)) | 1);
    }

    System.out.println("z1g lq gk = " + z1g + "," + lq + "," + gk);
    System.out.println("kj cyx cbp = " + kj + "," + Float.floatToIntBits(cyx) + "," + cbp);
    System.out.println("kp0 x cg = " + kp0 + "," + x + "," + Double.doubleToLongBits(cg));
    System.out.println("o f5w ahk = " + o + "," + f5w + "," + ahk);
    System.out.println("h f kf = " + h + "," + checkSum(f) + "," + checkSum(kf));
    System.out.println("fwy ng uht = " + checkSum(fwy) + "," + checkSum(ng) + "," +
        Double.doubleToLongBits(checkSum(uht)));
    
    System.out.println("hn8 = " + hn8);
}
}
