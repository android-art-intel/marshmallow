/*
 * Copyright (C) 2015 Intel Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by Dalvik Fuzzer tool (3.5.001). Sat Feb  7 05:30:55 2015
package OptimizationTests.regression.test1476_1;

import OptimizationTests.regression.shared.*;

public class Main extends FuzzerUtils {

    public static final int N = 100;


public static void main(String[] strArr) {

    float f=33.676F;
    boolean b=false;
    double d=125.42109, dArr[]=new double[N];
    short s=-23381, sArr[]=new short[N];
    byte by=64;
    long l1=-2048524380L, l2=39324L, lArr[]=new long[N];
    int i=-236, i1=140, i2=-21085, i3=14, i4=6, i5=10257, i6=-50183, iArr[]=new int[N];

    init(lArr, -211L);
    init(iArr, 58);
    init(sArr, (short)-11883);
    init(dArr, -1.114395);

    for (long l : lArr) {
        f += (iArr[(59839 >>> 1) % N] - Integer.reverseBytes((int)(f + 8)));
        l >>>= sArr[(i >>> 1) % N];
        l -= (((i - i) * i) + ((++i) - (i - i)));
        for (i1 = 5; i1 < 92; i1++) {
            for (i2 = 20; i2 > 1; i2 -= 2) {
                i = i2;
                iArr[i1 + 1] *= (int)(l1 = (long)((5 + (-(-(l1 + l2)))) + (++dArr[i2 + 1])));
                s = (short)(((i + i2) * i2) * ((i = i) * i1));
                iArr[i2] += i2;
                d *= ((i * -22127L) * ((-2.507F + i2) * (++dArr[i2])));
                b = true;
                l >>= (i = i1);
            }
            l2 += (29493 + (i1 * i1));
            i = (int)Math.min((long)((-(i - 37883)) * (++f)), l1--);
            b = b;
            iArr[i1] = (int)(i *= (int)(-(by + f)));
            i3 *= (i2 - (239 + (i++)));
            i = (i3 -= ((i4++) + (-79 - (i2 + i2))));
            for (i5 = 1; i5 < 31; i5++) {
                try {
                    iArr[i5] = (int)(lArr[i5 - 1] - i3);
                    b = (((i3 - l1) + i3) != f);
                    i4 += (-i1);
                    i3 |= (--i6);
                }
                catch (NullPointerException exc) {
                    f -= (-i5);
                }
                finally {
                    iArr[i5 + 1] <<= (int)(((--i) - (i6 = (int)-12L)) + ((s--) + (i6++)));
                }
            }
        }
    }

    System.out.println("f i i1 = " + Float.floatToIntBits(f) + "," + i + "," + i1);
    System.out.println("i2 l1 l2 = " + i2 + "," + l1 + "," + l2);
    System.out.println("s d b = " + s + "," + Double.doubleToLongBits(d) + "," + (b ? 1 : 0));
    System.out.println("by i3 i4 = " + by + "," + i3 + "," + i4);
    System.out.println("i5 i6 lArr = " + i5 + "," + i6 + "," + checkSum(lArr));
    System.out.println("iArr sArr dArr = " + checkSum(iArr) + "," + checkSum(sArr) + "," +
        Double.doubleToLongBits(checkSum(dArr)));

}
}
