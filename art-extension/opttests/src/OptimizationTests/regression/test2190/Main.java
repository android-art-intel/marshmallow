/*
 * Copyright (C) 2015 Intel Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by Android Runtime Fuzzer tool (3.5.002). Tue Jun 23 14:30:44 2015
// srand = 3666751397957360163967643833795165645118100644868557091467512943128

package OptimizationTests.regression.test2190;

import OptimizationTests.regression.shared.*;

public class Main extends FuzzerUtils {

    public static final int N = 100;

    public static long lFld=-7L;
    public static int iFld=112;

    public static long sMeth_check_sum = 0;
    public static long byMeth_check_sum = 0;

public static short sMeth(int i2, long l1, float f1) {

    short s=-7711;
    long l2=5L, lArr[]=new long[N];
    double d=-2.91446, dArr[]=new double[N];
    float fArr[]=new float[N];

    init(fArr, 1.870F);
    init(lArr, -198L);
    init(dArr, 1.95873);

    for (float f2 : fArr) {
        l2 ^= ((++lArr[(i2 >>> 1) % N]) - (++i2));
        i2 = (int)((-(++i2)) - d);
        i2 -= (int)((-(i2 + -309108768L)) >> ((l1 + i2) & (-5 >> (i2 * i2))));
        i2 = (int)((f2 + -49709) * f1);
        fArr[(i2 >>> 1) % N] = (l2 * 7018377540218951070L);
        s *= (short)((-1 - (l1 - f1)) * ((l1 - i2) + (i2 * 14L)));
        dArr[(i2 >>> 1) % N] = (1 - i2);
        i2 *= (int)(((i2 * l1) - (f1++)) + i2);
    }
    long meth_res = i2 + l1 + Float.floatToIntBits(f1) + l2 + Double.doubleToLongBits(d) + s +
        Double.doubleToLongBits(checkSum(fArr)) + checkSum(lArr) + Double.doubleToLongBits(checkSum(dArr));
    sMeth_check_sum += meth_res;
    return (short)meth_res;
}

public static byte byMeth(int i3, short s1) {

    boolean b1=true;
    long lArr1[]=new long[N];
    double d1=-116.125209;
    int i4=-58268, i5=243, iArr1[]=new int[N];

    init(lArr1, 8589510628657813159L);
    init(iArr1, 6);

    for (i4 = 1; i4 < 81; i4++) {
        lFld -= (++lArr1[i4]);
        lFld += i4;
        d1 += (i3 = i4);
        for (i5 = 1; i5 < 10; i5++) {
            if (b1 = true) continue;
            i3 = (int)lFld;
            if ((long)i5 != (long)0) {
                return (byte)(i3 + s1 + i4 + Double.doubleToLongBits(d1) + i5 + (b1 ? 1 : 0) + checkSum(lArr1) +
                    checkSum(iArr1));
            }
            iArr1[i4 - 1] *= (int)(i3 = (int)(lArr1[i5 - 1]++));
            i3 |= (int)(-((-10 + d1) - (iArr1[i4]++)));
            iArr1[i5] >>= (int)lFld;
            i3 -= i3;
        }
    }
    long meth_res = i3 + s1 + i4 + Double.doubleToLongBits(d1) + i5 + (b1 ? 1 : 0) + checkSum(lArr1) + checkSum(iArr1);
    byMeth_check_sum += meth_res;
    return (byte)meth_res;
}

public static void main(String[] strArr) {

    byte by=-124, by1=69, byArr[]=new byte[N];
    boolean b=true;
    short s2=24103;
    long l=87L, l3=-27633L, lArr2[]=new long[N];
    double dArr1[]=new double[N];
    int i=163, i1=-5, i6=-12, i7=12, iArr[]=new int[N];
    float f=-6.991F, fArr1[]=new float[N];

    init(iArr, 60);
    init(dArr1, 0.40652);
    init(fArr1, -90.793F);
    init(lArr2, 0L);
    init(byArr, (byte)69);

    for (i = 2; i < 77; i++) {
        if (b = (iArr[i - 1] == (i1 + (i1 - i1)))) {
            i1 += (--i1);
        } else if (byMeth(--i1, (short)(s2--)) == (((-32058 - (lFld + i)) - (s2++)) + (i1 = (i + i1)))) {
            i1 = (int)(-((f - f) + (f - i1)));
            i1 -= (int)((l++) - (l / (l | 1)));
            iArr[i + 1] -= (2902 + (-sMeth(-1, l, 0.108F)));
        } else if (l >= ((l--) * ((i - -3503727728502332269L) + (lFld + i1)))) {
            iArr[i + 1] *= (int)(l++);
        }
        l <<= (++i1);
        iArr[i] = i1;
        try {
            i1 = (172 % i);
            i1 = (-45854 / iArr[i]);
            i1 = (-40499 % i);
        } catch (ArithmeticException a_e) {}
        dArr1[i + 1] *= -9;
        iArr[i + 1] = (int)fArr1[i + 1];
        i1 -= (int)(iArr[i + 1] - lArr2[i - 1]);
        i1 >>= (--i1);
        by = (byte)-5;
        i1 = ((++i6) + (4 + byArr[i - 1]));
    }
    for (i7 = 4; i7 < 76; i7++) {
        i1 = (int)(-((i * i) - (-(-89 * (-43 - l)))));
        i6 = (by + -4);
        s2 <<= (short)(((42671 + (i1--)) - (i7 * 8)) - ((l3 - by1) + (i1--)));
        for (iFld = 1; iFld < i7; iFld += 2) {
            i6 += iFld;
            i1 = (int)(--fArr1[i7 + 1]);
            l3 ^= (long)((-f) * (by--));
            l += (i6 + i7);
        }
    }

    System.out.println("i i1 f = " + i + "," + i1 + "," + Float.floatToIntBits(f));
    System.out.println("l b s2 = " + l + "," + (b ? 1 : 0) + "," + s2);
    System.out.println("by i6 i7 = " + by + "," + i6 + "," + i7);
    System.out.println("l3 by1 iArr = " + l3 + "," + by1 + "," + checkSum(iArr));
    System.out.println("dArr1 fArr1 lArr2 = " + Double.doubleToLongBits(checkSum(dArr1)) + "," +
        Double.doubleToLongBits(checkSum(fArr1)) + "," + checkSum(lArr2));
    System.out.println("byArr = " + checkSum(byArr));

    System.out.println("lFld iFld = " + lFld + "," + iFld);

    System.out.println("sMeth_check_sum: " + sMeth_check_sum);
    System.out.println("byMeth_check_sum: " + byMeth_check_sum);
}
}
