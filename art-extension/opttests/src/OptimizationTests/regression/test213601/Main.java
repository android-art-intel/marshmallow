/*
 * Copyright (C) 2015 Intel Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by Dalvik Fuzzer tool (3.3.001). Sat Jul 26 23:06:54 2014
package OptimizationTests.regression.test213601;

import OptimizationTests.regression.shared.*;

public class Main extends FuzzerUtils {

public static final int N = 150;

    public static byte c=-69;

public static void main(String[] y) {

    boolean hc=false, wfz[]=new boolean[N];
    int j9=-347, utw=-23758, wo7=-7068, ynk=-51465, x=59218, o=10997, k7r=-28805, gse=49197, dhc=31203, j4[][]=new
        int[N][N];
    byte mu9=-18;
    short bm=-11178, g=29288;
    double yx=26.608;
    float z=41.270F, yq[]=new float[N];
    long s3=6122257975764943007L, th0=2689548906921379208L, q[][]=new long[N][N];

    init(j4, -16227);
    init(yq, -80.109F);
    init(q, -1792380974219177062L);
    init(wfz, false);

    yx += (-(s3++));
    for (j9 = 4; j9 < 147; j9 += 2) {
        utw -= (int)s3;
        wo7 = 123;
        while ( --wo7 > 0 ) {
            j4[j9][wo7 + 1] = (int)(s3 + yq[j9]);
            q[j9 - 1][j9 + 1] <<= (((utw--) + (wo7 + utw)) + (++utw));
            utw = ((j9 % (utw | 1)) - wo7);
        }
        ynk = 58;
        while ( --ynk > 0 ) {
            bm -= (short)(yx + 36136);
            utw *= (int)(yq[j9] * wo7);
            utw <<= (int)((-100 * (--s3)) + ((q[ynk + 1][ynk - 1] = 30099) * (84.819 - (z + j9))));
            utw *= (utw++);
            z *= (((c * j9) + yq[j9 - 1]) - ((g + z) - (s3 + x)));
            utw += (int)z;
            bm += (short)(((yx++) + utw) - ((q[j9 + 1][ynk] = s3) - j9));
            o -= (int)(-s3);
            for (k7r = 2; k7r < 69; ++k7r) {
                x = -23543;
                bm |= (short)(mu9 + (--x));
                utw >>= (int)(s3 + utw);
                mu9 = (byte)(--s3);
                gse ^= (o++);
            }
        }
        x -= 51242;
        if (hc = (((hc || hc) & hc) && ((gse - z) != (o * 18.976)))) {
            if (false) {
                gse -= (int)s3;
                s3 = (long)(ynk / ((long)((j9 * -56.90F) * (ynk * utw)) | 1));
                yx = (-(x + (s3 >>> gse)));
                utw = (int)((--gse) - ((z * utw) * (s3 - s3)));
            } else if (hc = (wfz[j9] = ((o - utw) < (s3 -= (long)yx)))) {
                o *= (-(g * (o - k7r)));
            } else if (hc = hc) {
                yx -= (((++x) - (-6513821016702536394L * (s3 + j9))) - ((th0 / -13144) * q[j9][j9]));
            } else {
                yx += (((dhc++) - yq[j9 + 1]) - ((j9 - k7r) / ((o--) | 1)));
            }
        } else {
            z = (utw++);
        }
    }

    System.out.println("yx s3 j9 = " + Double.doubleToLongBits(yx) + "," + s3 + "," + j9);
    System.out.println("utw wo7 ynk = " + utw + "," + wo7 + "," + ynk);
    System.out.println("bm z g = " + bm + "," + Float.floatToIntBits(z) + "," + g);
    System.out.println("x o k7r = " + x + "," + o + "," + k7r);
    System.out.println("mu9 gse th0 = " + mu9 + "," + gse + "," + th0);
    System.out.println("hc dhc j4 = " + hc + "," + dhc + "," + checkSum(j4));
    System.out.println("yq q wfz = " + Double.doubleToLongBits(checkSum(yq)) + "," + checkSum(q) + "," + checkSum(wfz));
    
    System.out.println("c = " + c);
}
}
