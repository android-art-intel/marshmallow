/*
 * Copyright (C) 2015 Intel Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by Android Runtime Fuzzer tool (3.5.002). Fri Aug 14 13:00:36 2015
// srand = 282920166021953933761529938750204630763

package OptimizationTests.regression.test2473;

import OptimizationTests.regression.shared.*;

public class Main extends FuzzerUtils {

    public static final int N = 100;


public static void main(String[] strArr) {

    int i=10, i1=2, i2=-13, i3=205, i4=74, i5=9, iArr[][]=new int[N][N];
    long l=-5115657198443903320L;
    float f=-105.447F;
    byte by=-1;
    boolean b=false;
    double d=98.125777, d1=-1.68228;
    short s=7300;

    init(iArr, -11);

    i = 1;
    while ((i += 3) < 86) {
        l = Math.max((int)(Math.abs(f) * (by - l)), i);
        for (i1 = 4; i1 < 69; i1++) {
            i2 += (i1 ^ i);
            for (i3 = 1; i3 < 97; ++i3) {
                i2 >>= (-i1);
                if (false) {
                    b = (!(l > (i - d)));
                    i2 += (i3 | (long)f);
                    i4 *= (int)(l |= (long)((-(-7L + (-(i2--)))) % (((long)(f - i1)) | 1)));
                    i4 *= (int)(l = (i5 = (int)(i - l)));
                } else if (b = ((--i2) >= iArr[(i3 >>> 1) % N][i3 - 1])) {
                    b = (b & b);
                    i4 -= (int)(((++i2) + (l + i1)) % -18113);
                }
                l *= 34810;
                d += (i2 *= ((i4 + i2) + i2));
            }
            i4 += i1;
            i4 += (i5++);
            i4 = (int)(((i3 - s) + (-(-(i4 + d)))) - (i5 % ((l + i4) | 1)));
            for (d1 = i; d1 < 40; d1++) {
                iArr[(int)(d1)][(int)(d1 + 1)] = (int)((i3 % ((s--) | 1)) + f);
            }
            i2 ^= (int)l;
        }
        l *= (i2 -= (i2--));
        iArr[i + 1][i - 1] = iArr[i][(i2 >>> 1) % N];
        l = i;
        l = (++i4);
    }

    System.out.println("i l f = " + i + "," + l + "," + Float.floatToIntBits(f));
    System.out.println("by i1 i2 = " + by + "," + i1 + "," + i2);
    System.out.println("i3 b d = " + i3 + "," + (b ? 1 : 0) + "," + Double.doubleToLongBits(d));
    System.out.println("i4 i5 s = " + i4 + "," + i5 + "," + s);
    System.out.println("d1 iArr = " + Double.doubleToLongBits(d1) + "," + checkSum(iArr));

}
}
