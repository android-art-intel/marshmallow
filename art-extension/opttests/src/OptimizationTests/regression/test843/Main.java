/*
 * Copyright (C) 2015 Intel Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by Dalvik Fuzzer tool (3.4.001). Mon Nov 10 12:35:25 2014
package OptimizationTests.regression.test843;

import OptimizationTests.regression.shared.*;

public class Main extends FuzzerUtils {

    public static final int N = 100;

    public static void main(String[] u) {

        byte mh = 67;
        long bd = 7607270907017722705L, slt = -5385393612430220116L, eu = 3980815526193343191L, km[] = new long[N];
        int i4 = -48163, ktx = 13438, g00 = -19735, iq = -7308, v = 9395, fqz = 34273, tik = 33590, v4c = 19555, l9 = -60267, t = 54111, hb[] = new int[N];
        short p4 = 4492, gz0[] = new short[N];
        float bm = 77.984F, q = 11.470F, h[] = new float[N];
        double xi = -23.728, kjg = 85.444, t5[][] = new double[N][N];

        init(h, -74.126F);
        init(hb, 2736);
        init(t5, 68.788);
        init(km, -1086058351783770515L);
        init(gz0, (short) 11058);

        i4 = 79;
        do {
            ktx += (int) (((-3520711961260058490L + (ktx--)) + (ktx--)) - ((h[i4 + 1]--) * (bm - i4)));
        } while (--i4 > 0);
        for (g00 = 2; g00 < 90; g00 += 2) {
            hb[g00] -= (ktx--);
            ktx += (((g00 * bm) + bd) - i4);
            t5[g00 - 1][g00 + 1] = (km[g00 + 1] * ((g00 * bd) % (i4 | 1)));
            for (iq = 1; iq < 5; iq++) {
                ktx >>= (45364 - (ktx--));
                v = (int) (((iq + i4) - bd) + hb[iq]);
                for (xi = 2; xi < 82; ++xi) {
                    bd = iq;
                    q += (float) ((19.464 - (-(i4 - ktx))) / (((iq - fqz) * (-64850 + fqz)) | 1));
                    v -= (++tik);
                    t5[iq][(int) (xi)] *= ((-bd) - ((mh + ktx) * (bd * bd)));
                    bd += hb[g00];
                    tik >>= hb[iq - 1];
                    v = (int) (((iq + tik) + (km[(int) (xi)]--)) + hb[(int) (xi - 1)]);
                    v = (int) -789235695647174777L;
                    kjg += (((-(i4 - fqz)) + (tik--)) + ((bd - bd) + (bm * v)));
                    v *= (int) ((--fqz) + ((bd + -7432) - gz0[(int) (xi - 1)]));
                }
                ktx = (int) (v4c + ((v++) - (bm++)));
                fqz = (int) ((long) ((-(6049514624362844209L - (++p4))) * (iq % ((long) q | 1))) << (long) ((-52993 - (slt - v)) + (++kjg)));
                l9 = 1;
                do {
                    kjg += (t + (eu--));
                    eu = iq;
                } while (++l9 < 63);
            }
        }

        System.out.println("i4 ktx bm = " + i4 + "," + ktx + ","
                + Float.floatToIntBits(bm));
        System.out.println("g00 bd iq = " + g00 + "," + bd + "," + iq);
        System.out.println("v xi q = " + v + "," + Double.doubleToLongBits(xi)
                + "," + Float.floatToIntBits(q));
        System.out.println("fqz tik mh = " + fqz + "," + tik + "," + mh);
        System.out.println("kjg v4c p4 = " + Double.doubleToLongBits(kjg) + ","
                + v4c + "," + p4);
        System.out.println("slt l9 t = " + slt + "," + l9 + "," + t);
        System.out.println("eu h hb = " + eu + ","
                + Double.doubleToLongBits(checkSum(h)) + "," + checkSum(hb));
        System.out.println("t5 km gz0 = "
                + Double.doubleToLongBits(checkSum(t5)) + "," + checkSum(km)
                + "," + checkSum(gz0));

    }
}
