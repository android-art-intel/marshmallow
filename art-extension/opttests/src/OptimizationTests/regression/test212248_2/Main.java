/*
 * Copyright (C) 2015 Intel Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by Dalvik Fuzzer tool (3.3.001). Sun Jul 20 06:37:59 2014
package OptimizationTests.regression.test212248_2;

import OptimizationTests.regression.shared.*;

public class Main extends FuzzerUtils {

public static final int N = 150;


public static void main(String[] tob) {

    float x2q=-25.562F, n[][]=new float[N][N];
    double r=77.583, ugw[][]=new double[N][N];
    byte t=89;
    long sn=6720499907841991743L, shv[]=new long[N];
    boolean z9=true, h[]=new boolean[N];
    short v=-18991;
    int tg2=-55233, a=14725, g=13508, iig=54883, j=26793, yf=22441, n8=30932, c=54663, i6=-16663, emo[]=new int[N],
        q[]=new int[N];

    init(emo, -3663);
    init(shv, -2840311053175280970L);
    init(n, 56.499F);
    init(ugw, 91.592);
    init(h, false);
    init(q, 10701);

    for (int b4 : emo) {
        for (long e39 : shv) {
            tg2 += (-((tg2 - tg2) - (tg2--)));
            if (z9) break;
            sn = (-107 * emo[(tg2 >>> 1) % N]);
            tg2 = (int)(((v + v) * (v * -32300)) + r);
        }
        tg2 -= (int)(((n[(0 >>> 1) % N][(a >>> 1) % N]++) + x2q) + (shv[(tg2 >>> 1) % N] + (-29266 + (emo[(tg2 >>> 1) %
            N]--))));
        x2q += (--a);
        tg2 += (int)ugw[(a >>> 1) % N][(tg2 >>> 1) % N];
        sn = (long)(-x2q);
        sn = (b4 * (tg2++));
        tg2 ^= (int)sn;
    }
    for (g = 3; g < 115; ++g) {
        emo[g - 1] = (int)((sn = (43255 | (sn + a))) + emo[g - 1]);
        h[g] = (z9 || ((g + sn) >= (sn / -8339)));
    }
    for (iig = 2; iig < 120; iig++) {
        sn = g;
    }
    for (j = 1; j < 115; ++j) {
        yf = j;
        do {
            for (n8 = 5; n8 < 133; ++n8) {
                sn = sn;
            }
            emo[j] = (++emo[yf - 1]);
        } while ( --yf > 0 );
        a %= (int)((long)(tg2 = (int)((r * tg2) * (++tg2))) | 1);
        for (c = j; c < 131; c++) {
            if ((--tg2) <= (((c + -62352) + (-560182367025327509L / (iig | 1))) + (tg2 + (j - n8)))) continue;
        }
    }
    for (i6 = 148; i6 > 9; --i6) {
        r -= (q[i6] -= (-n8));
        tg2 = (int)((x2q++) * ((-2562717474014916087L + (-7156 - (t - 9062))) - (8220811666445364153L + (g - 3383))));
        ugw[i6 - 1][i6 + 1] = (-41759 + (-(shv[i6 - 1] >>= t)));
        ugw[i6 - 1][i6 + 1] = tg2;
    }

    System.out.println("tg2 z9 sn = " + tg2 + "," + z9 + "," + sn);
    System.out.println("v r a = " + v + "," + Double.doubleToLongBits(r) + "," + a);
    System.out.println("x2q g iig = " + Float.floatToIntBits(x2q) + "," + g + "," + iig);
    System.out.println("j yf n8 = " + j + "," + yf + "," + n8);
    System.out.println("c i6 t = " + c + "," + i6 + "," + t);
    System.out.println("emo shv n = " + checkSum(emo) + "," + checkSum(shv) + "," +
        Double.doubleToLongBits(checkSum(n)));
    System.out.println("ugw h q = " + Double.doubleToLongBits(checkSum(ugw)) + "," + checkSum(h) + "," + checkSum(q));
    
}
}
