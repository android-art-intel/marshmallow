/*
 * Copyright (C) 2015 Intel Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by Android Runtime Fuzzer tool (4.1.002). Wed Apr 13 22:58:53 2016
// srand = 11732047246720247289447029099170590687969694694357902022479605793912

package OptimizationTests.regression.test3859;

import OptimizationTests.regression.shared.*;

public class Main extends FuzzerUtils {

    public static final int N = 100;

    public static long instanceCount=718809385L;
    public static float fFld=-2.275F;

public static void main(String[] strArr) {

    double dArr[]=new double[865851];
    Cls O=new Cls();
    int i=91, i2=-9, i3=45939, i4=14, i5=35686;

    init(O.fArrFld, -10.75F);
    init(dArr, 126.45937);
    init(O.lArrFld, -85L);

    i = 1;
    do {
        for (int i1 : Cls.iArrFld) {
            float f=2.296F;
            i1 += (i1 = (i1--));
            i1 += Cls.byFld;
            i1 += i;
            i1 -= (-i1);
            O.bFld = false;
            O = (O = (O = (O = O)));
            i1 = ((i2--) + i);
            f *= (((--i1) - (i2 + i1)) + O.fArrFld[i + 1]);
            Cls.instanceCount += (long)-15.977F;
            O.dFld *= (++dArr[i]);
        }
        i2 <<= i2;
    } while (++i < 82);
    i3 = 1;
    do {
        for (i4 = 1; i4 < i3; i4++) {
            long lArr[]=new long[N];
            O = (O = new Cls());
            lArr = (lArr = (lArr = (O.lArrFld = O.lArrFld)));
            i2 += (int)(Main.fFld * (i2 <<= (int)(Main.fFld + 3400395080L)));
            Main.fFld += O.fArrFld[i3 - 1];
            Main.fFld *= i4;
        }
        i2 += i4;
        for (i5 = 2; i5 < 46; i5 += 2) {
            Object OArr[][]=new Object[N][N];
            i2 >>= 63173;
            OArr[i5 - 1][i3] = OArr[i3 + 1][i5];
        }
        Cls4.OFld = (Cls4.OFld = (Cls4.OFld = (Cls4.OFld = Cls4.OFld)));
    } while (++i3 < 98);

    System.out.println("i O.bFld i2 = " + i + "," + (O.bFld ? 1 : 0) + "," + i2);
    System.out.println("O.dFld i3 i4 = " + Double.doubleToLongBits(O.dFld) + "," + i3 + "," + i4);
    System.out.println("i5 O.fArrFld dArr = " + i5 + "," + Double.doubleToLongBits(checkSum(O.fArrFld)) + "," +
        Double.doubleToLongBits(checkSum(dArr)));
    System.out.println("O.lArrFld O Cls = " + checkSum(O.lArrFld) + "," + checkSum(O) + "," + Cls.instanceCount);
    System.out.println("Cls1 Cls2 Cls3 = " + Cls1.instanceCount + "," + Cls2.instanceCount + "," + Cls3.instanceCount);
    System.out.println("Cls4 Cls5 Cls6 = " + Cls4.instanceCount + "," + Cls5.instanceCount + "," + Cls6.instanceCount);
    System.out.println("Cls7 = " + Cls7.instanceCount);

    System.out.println("Main.instanceCount Main.fFld Cls = " + Main.instanceCount + "," +
        Float.floatToIntBits(Main.fFld) + "," + Cls.instanceCount);
    System.out.println("Cls1 Cls2 Cls3 = " + Cls1.instanceCount + "," + Cls2.instanceCount + "," + Cls3.instanceCount);
    System.out.println("Cls4 Cls5 Cls6 = " + Cls4.instanceCount + "," + Cls5.instanceCount + "," + Cls6.instanceCount);
    System.out.println("Cls7 = " + Cls7.instanceCount);
}
}

class Cls extends FuzzerUtils {

    public static final int N = 100;

    public static long instanceCount=7694511898929942182L;
    public static byte byFld=64;
    public volatile boolean bFld=true;
    public double dFld=33.98525;
    public static int iArrFld[]=new int[N];
    public float fArrFld[]=new float[N];
    public long lArrFld[]=new long[592626];
    public static volatile int iArrFld1[]=new int[738135];
    public static int iArrFld2[]=new int[N];

    static {
        init(Cls.iArrFld, 166);
        init(Cls.iArrFld1, -46399);
        init(Cls.iArrFld2, 7);
    }

}

class Cls1 extends FuzzerUtils {

    public static final int N = 100;

    public static long instanceCount=291199344L;
    public long lArrFld1[]=new long[84776];

    public static long Cls1_check_sum = 0;

public  Cls1() {

    instanceCount++;
    int i6=-34684, i10=8, iArr[]=new int[N], iArr1[]=new int[N];

    init(iArr, -99);
    init(iArr1, -61618);

    for (i6 = 3; i6 < 91; ++i6) {
        for (int i7 : iArr) {
            iArr = (iArr = iArr1);
            iArr[i6 - 1] -= (i7--);
            Cls7.OFld2 = (Cls7.OFld2 = (Cls7.OFld2 = (Cls7.OFld2 = null)));
            Cls2.instanceCount -= (i7 -= i6);
            lArrFld1[i6 + 1] += i6;
        }
        i10 = 1;
        while (++i10 < 76) {
            int i11=-1360;
            iArr1[i6 - 1] += i10;
            i11 -= (int)((11952 + (--Cls4.OFld.fFld1)) % (((i11 + i10) - Cls3.instanceCount) | 1));
            Cls.byFld += (byte)i10;
            iArr1[i6 + 1] *= (int)(((i11 = (int)Cls7.instanceCount) + (9.55F + (i11 + i11))) +
                (Double.longBitsToDouble(Cls1.instanceCount) - i6));
        }
    }
    long meth_res = i6 + i10 + Float.floatToIntBits(Cls4.OFld.fFld1) + checkSum(iArr) + checkSum(iArr1);
    Cls1_check_sum += meth_res;
    return;
}

}

class Cls2 extends FuzzerUtils {

    public static final int N = 100;

    public static long instanceCount=1457224557521305285L;
    public int iFld=2;
    public static short sFld=9964;

    public static long Cls2_check_sum = 0;

public  Cls2() {

    instanceCount++;
    Cls4 O1=new Cls4();
    int i8=-63471, i9=-3042;

    init(Cls6.OFld1.bArrFld, false);

    switch ((((iFld * Cls.byFld) >>> 1) % 2) + 104) {
    case 104:
        for (i8 = 2; i8 < 94; ++i8) {
            int iArr2[]=new int[714441];
            try {
                Cls.iArrFld1[i8] = (i8 / 25309);
                iFld = (-49927 / iFld);
                iFld = (-10 % Cls.iArrFld2[i8 - 1]);
            } catch (ArithmeticException a_e) {}
            Cls.instanceCount = (long)(((-160 * (Cls2.instanceCount - Cls4.OFld.fFld1)) + Cls2.instanceCount) -
                ((++iFld) * (Cls.instanceCount + iFld)));
            iFld += (int)(Cls2.instanceCount + ((iArr2[i8]--) + Math.abs(iFld)));
            iFld -= (int)(((--O1.dFld1) - (--iFld)) - (iArr2[i8 + 1] + (iFld + iFld)));
            for (i9 = 2; i9 < 41; ++i9) {
                boolean b=true;
                Cls3.instanceCount -= (--iFld);
                Cls2.sFld += (short)(15442 + (i9 * i9));
                iFld >>= (iFld--);
                Cls6.OFld1.bArrFld = (Cls6.OFld1.bArrFld = Cls6.OFld1.bArrFld);
                if (!b) continue;
            }
        }
    case 105:
        O1 = new Cls4();
        break;
    }
    long meth_res = i8 + Float.floatToIntBits(Cls4.OFld.fFld1) + Double.doubleToLongBits(O1.dFld1) + i9 +
        checkSum(Cls6.OFld1.bArrFld) + checkSum(O1);
    Cls2_check_sum += meth_res;
    return;
}

}

class Cls3 extends FuzzerUtils {

    public static final int N = 100;

    public static long instanceCount=-2531918628L;
    public float fFld1=-98.569F;

}

class Cls4 extends FuzzerUtils {

    public static final int N = 100;

    public static long instanceCount=-3043043487304703282L;
    public double dFld1=0.13036;
    public static Cls3 OFld=new Cls3();

}

class Cls5 extends FuzzerUtils {

    public static final int N = 100;

    public static long instanceCount=238L;
    public boolean bArrFld[]=new boolean[N];

}

class Cls6 extends FuzzerUtils {

    public static final int N = 100;

    public static long instanceCount=9798L;
    public static Cls5 OFld1=new Cls5();

}

class Cls7 extends FuzzerUtils {

    public static final int N = 100;

    public static long instanceCount=-171L;
    public static volatile Cls2 OFld2=new Cls2();

}

//DEBUG  Cls2 ->  Cls2 Cls1 main Test Cls7
//DEBUG  Cls1 ->  Cls1 main Test
//DEBUG  Cls5 ->  Cls5 Cls2 Cls1 main Test Cls6 Cls7
//DEBUG  Cls6 ->  Cls6 Cls2 Cls1 main Test Cls7
//DEBUG  Test ->  Test
//DEBUG  Cls ->  Cls main Test Cls2 Cls1 Cls7
//DEBUG  Cls4 ->  Cls4 Cls2 Cls1 main Test Cls7
//DEBUG  main ->  main Test
//DEBUG  Cls7 ->  Cls7 Cls1 main Test
//DEBUG  Cls3 ->  Cls3 Cls2 Cls1 main Test Cls4 Cls7
//DEBUG  Depth = 6
//DEBUG  Classes = 9
//DEBUG  static objects = {Cls3: [, Cls4.OFld], Cls2: [, Cls7.OFld2], Cls5: [, Cls6.OFld1], }
