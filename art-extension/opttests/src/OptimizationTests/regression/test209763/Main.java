/*
 * Copyright (C) 2015 Intel Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by Dalvik Fuzzer tool (3.3.001). Tue Jul  8 00:14:08 2014
package OptimizationTests.regression.test209763;

import OptimizationTests.regression.shared.*;

public class Main extends FuzzerUtils {

public static final int N = 300;

    public static float x8y[]=new float[N];

    static {
        init(x8y, 23.180F);
    }

public static void main(String[] j6a) {

    byte mw=78, n[][]=new byte[N][N];
    short b=2385;
    float m0=40.778F;
    boolean o=true, vik=true, el2[]=new boolean[N];
    int q=25453, fcn=25210, oer=31953, o84=28060, c=28100, fqq=17191, g=-22916, k2=-38103, yyz=11366, t9=-20749,
        ewu=13826, dy3[]=new int[N];
    long kf=-567007344384695929L, y[][]=new long[N][N];
    double z=0.263, wmc=30.287;

    init(y, -7722962335537129729L);
    init(dy3, 8994);
    init(n, (byte)-56);
    init(el2, false);

    for (q = 14; q < 227; q++) {
        fcn -= (int)((y[q - 1][q] = (long)(fcn * z)) - (m0 + (m0 - 7700641870043133847L)));
        dy3[q] -= (q + q);
        if (o) continue;
        kf <<= 9354;
        fcn -= (int)(((fcn = q) * (kf - kf)) * (b * (z + q)));
        kf = (long)((m0 += (kf++)) + ((--kf) / (q | 1)));
        vik = (((kf++) != (fcn + -33.195F)) || (z == (kf * z)));
        n[(49656 >>> 1) % N][q + 1] += (byte)((kf = (long)(mw + -118.977F)) + ((q * z) - (mw + z)));
        dy3[q] -= (int)(((--m0) - (dy3[(q >>> 1) % N]++)) * ((kf * kf) - (-oer)));
    }
    o84 = 226;
    while ( --o84 > 0 ) {
        oer *= (int)(((long)(kf * m0) >>> (b << c)) - o84);
        for (fqq = 1; fqq < o84; fqq++) {
            fcn = (int)m0;
            if (!((vik = el2[fqq + 1]) != vik)) {
                try {
                    for (g = fqq; g < 291; g++) {
                        m0 = o84;
                        oer += (int)-9.328F;
                        oer = k2;
                    }
                    dy3[fqq - 1] += yyz;
                    fcn <<= (((t9 * fqq) + (mw *= (byte)o84)) * (-dy3[fqq]));
                    z += (kf * (-(-20401 - (wmc - m0))));
                    t9 -= (((-(-54853 - (k2 - fcn))) * (--dy3[fqq - 1])) + ((yyz - 47027) << o84));
                    t9 = (int)(g * ((12577 / kf) + (kf--)));
                }
                catch (ArithmeticException x) {
                    oer = (int)(-x8y[o84]);
                }
            } else if (vik = false) {
                dy3[o84 - 1] += ewu;
            }
        }
    }

    System.out.println("q fcn z = " + q + "," + fcn + "," + Double.doubleToLongBits(z));
    System.out.println("m0 o kf = " + Float.floatToIntBits(m0) + "," + o + "," + kf);
    System.out.println("b vik mw = " + b + "," + vik + "," + mw);
    System.out.println("oer o84 c = " + oer + "," + o84 + "," + c);
    System.out.println("fqq g k2 = " + fqq + "," + g + "," + k2);
    System.out.println("yyz t9 wmc = " + yyz + "," + t9 + "," + Double.doubleToLongBits(wmc));
    System.out.println("ewu y dy3 = " + ewu + "," + checkSum(y) + "," + checkSum(dy3));
    System.out.println("n el2 = " + checkSum(n) + "," + checkSum(el2));
    
    System.out.println("x8y = " + Double.doubleToLongBits(checkSum(x8y)));
}
}
