/*
 * Copyright (C) 2015 Intel Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by Android Runtime Fuzzer tool (4.1.002). Sun Jan 10 01:39:41 2016
// srand = 108380630972282105695086766007960160155

package OptimizationTests.regression.test3075;

import OptimizationTests.regression.shared.*;

public class Main extends FuzzerUtils {

    public static final int N = 100;

    public static long instanceCount=-7L;
    public static int iFld=51885;
    public static double dArrFld[]=new double[N];
    public static short sArrFld[]=new short[N];

    static {
        init(Main.dArrFld, -41.105416);
        init(Main.sArrFld, (short)28464);
    }

public static void main(String[] strArr) {

    int i=-50085, i1=-5, i2=-14, i3=-42002, i4=-156;
    byte by=-73, byArr[]=new byte[N];
    float f=1.367F;
    double d=2.70836, d1=2.76407;
    long lArr[]=new long[N];

    init(byArr, (byte)71);
    init(lArr, 39L);

    i = 1;
    do {
        int iArr[]=new int[N];
        for (i1 = 1; i1 < 10; ++i1) {
            by *= (byte)1.561F;
        }
        iArr[i] = (int)(((f + i) * i1) + ((-2686608216L * (i1 ^ 97)) / ((++byArr[i - 1]) | 1)));
        for (d = 1; d < 58; ++d) {
            float fArr[]=new float[N];
            iArr[(int)(d)] *= (int)(i * ((f - d) + (32063 * fArr[(int)(d)])));
            Main.instanceCount = (long)((++i2) - ((i2 * f) - Math.max(Main.instanceCount, -3927709525L)));
            i2 <<= -167;
            lArr[i - 1] |= (++iArr[i]);
            i2 = (int)lArr[i - 1];
            f += (i + Math.abs(--Main.instanceCount));
            Main.dArrFld[i] = i1;
        }
        i2 = (int)(Main.instanceCount++);
    } while (++i < 92);
    for (i3 = 4; i3 < 86; ++i3) {
        int iArr1[][]=new int[N][N];
        i2 *= (int)((i * (i3 + f)) + (-61274 + (i3 * 2)));
        Main.iFld = (-Math.min((int)(-(d1 = -34393)), (int)(Main.instanceCount + f)));
        Main.dArrFld[i3] = ((d1++) - (Main.iFld + Main.iFld));
        iArr1[i3][i3 + 1] -= (int)(-58 - ((Main.iFld--) + (f + i2)));
        lArr[(i2 >>> 1) % N] >>>= (long)(((Main.instanceCount + f) * d1) + (i2 - (i3 * i)));
        i4 = 66;
        do {
            i2 >>= (int)(Main.sArrFld[i3 + 1] * ((--Main.instanceCount) + f));
            i2 += (((i4 * i1) + i4) - Main.iFld);
            Main.iFld = (int)(((i - i) - (i4 + -29.96047)) - (-(2.30701 * (-77 << (Main.iFld - i4)))));
            f = (i2++);
            Main.iFld = i3;
        } while ((i4 -= 3) > 0);
    }

    System.out.println("i i1 by = " + i + "," + i1 + "," + by);
    System.out.println("f d i2 = " + Float.floatToIntBits(f) + "," + Double.doubleToLongBits(d) + "," + i2);
    System.out.println("i3 d1 i4 = " + i3 + "," + Double.doubleToLongBits(d1) + "," + i4);
    System.out.println("byArr lArr = " + checkSum(byArr) + "," + checkSum(lArr));

    System.out.println("Main.instanceCount Main.iFld Main.dArrFld = " + Main.instanceCount + "," + Main.iFld + "," +
        Double.doubleToLongBits(checkSum(Main.dArrFld)));
    System.out.println("Main.sArrFld = " + checkSum(Main.sArrFld));
}
}
