/*
 * Copyright (C) 2015 Intel Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by Dalvik Fuzzer tool (3.3.001). Mon Jun 16 01:54:08 2014
package OptimizationTests.regression.test204182;

import OptimizationTests.regression.shared.*;

public class Main extends FuzzerUtils {

public static final int N = 300;

    public static int qb[]=new int[N];
    public static long sj[]=new long[N];
    public static float jpp=68.470F;

    static {
        init(sj, 7772563214952648171L);
        init(qb, 45983);
    }

public static void main(String[] ghh) {

    byte zw=-9, qo=-78;
    double sw=82.355, tot=74.243;
    boolean pa=false, ve=false;
    short anv=31393;
    long i21=1276561786355420458L, q=3258607424639650454L, oyb=-5882838224575173501L, r[][]=new long[N][N];
    int f=9332, gel=-11521, whw=-51421, jv=-55801, g=-15751, n=-19011, zh6=-10753, d=-61147;
    float h2o[][]=new float[N][N];

    init(r, -3908129383642379806L);
    init(h2o, 27.1022F);

    if ((d - (q - (g = (int)i21))) <= (i21--)) {
        for (f = 4; f < 297; f++) {
            gel = (int)(sj[f - 1]--);
            gel = (int)(r[f + 1][f]--);
            i21 ^= (long)(sw - (--jpp));
            for (whw = 1; whw < f; whw++) {
                if (pa) {
                    jv = 47;
                    while ( --jv > 0 ) {
                        gel = (int)((--gel) + ((f * sw) * (++qb[f])));
                        gel %= (gel | 1);
                        zw -= (byte)((jv + (51693 * (jpp - whw))) + sw);
                        jpp -= jv;
                        i21 *= (long)(((-7212159621661638571L - (i21 >>>= g)) + sw) - ((jv - whw) * (i21++)));
                        i21 &= (long)(((++gel) + (jpp--)) * ((long)(1772065790859060589L - (tot--)) >>> (gel -= f)));
                        sj[f - 1] -= (((14646 >> gel) - 42007) * (qb[f + 1]--));
                        q *= (qb[jv - 1] + ((f + i21) + (anv * q)));
                    }
                    qo += (byte)(gel++);
                } else {
                    tot += sj[whw];
                }
                gel -= (int)(((-(jv + g)) * (++gel)) - 61.689F);
                for (n = 215; n > whw; n -= 3) {
                    try {
                        i21 = (qb[whw]++);
                        jpp = h2o[f - 1][f - 1];
                        qb[n] = (qo--);
                        zh6 = jv;
                    }
                    catch (NullPointerException b) {
                        oyb += (g - (--zh6));
                    }
                    finally {
                        if (((pa = (q != 39799)) || (pa = (true || (pa == ve)))) || true) continue;
                    }
                }
            }
        }
    } else if (ve) {
        g += (int)((-(g * sw)) - ((-27.871F % ((-(oyb - 64390)) | 1)) - qb[(g >>> 1) % N]));
    }

    System.out.println("f gel i21 = " + f + "," + gel + "," + i21);
    System.out.println("sw whw jv = " + Double.doubleToLongBits(sw) + "," + whw + "," + jv);
    System.out.println("zw g tot = " + zw + "," + g + "," + Double.doubleToLongBits(tot));
    System.out.println("q anv qo = " + q + "," + anv + "," + qo);
    System.out.println("pa n zh6 = " + pa + "," + n + "," + zh6);
    System.out.println("oyb ve d = " + oyb + "," + ve + "," + d);
    System.out.println("r h2o = " + checkSum(r) + "," + Double.doubleToLongBits(checkSum(h2o)));
    
    System.out.println("jpp sj qb = " + Float.floatToIntBits(jpp) + "," + checkSum(sj) + "," + checkSum(qb));
}
}
