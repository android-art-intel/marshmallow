/*
 * Copyright (C) 2015 Intel Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// test generated by Dalvik Fuzzer on Thu May 23 22:55:28 2013
package OptimizationTests.regression.test111518_2;

import OptimizationTests.regression.shared.*;

public class Main extends FuzzerUtils {

	public static final int N = 100;

	public static void main(String[] args) {
		char teq[][] = new char[N][N];
		int xh0 = 30159, n7b = 54711, i99 = 34544, to = -56872, r1 = 38922, fez = -40151, n = -11182, ns = -7838, c0y = 11541, xc = 46459, can = 39405, z2[] = new int[N], z3[] = new int[N], g[] = new int[N], ojs[][] = new int[N][N], cc[] = new int[N], t[] = new int[N], lkg[][] = new int[N][N], br3[][] = new int[N][N], nv6[] = new int[N];
		short dib[] = new short[N];
		double ads[][] = new double[N][N], r[] = new double[N];
		float r6a[][] = new float[N][N];
		long bb[][] = new long[N][N], y3h[] = new long[N];

		init(z2, 57761);
		init(z3, 55830);
		init(ads, 36.336);
		init(bb, -3239590471839960654L);
		init(g, -1326);
		init(r, -83.104);
		init(dib, (short) 29781);
		init(y3h, -2223197265316844579L);
		init(ojs, 63086);
		init(cc, 47430);
		init(t, 34929);
		init(teq, (char) 25728);
		init(r6a, -94.719F);
		init(lkg, 33783);
		init(br3, -31255);
		init(nv6, -48820);

		for (xh0 = 2; xh0 < 49; ++xh0) {
			int x = 11;
			while (--x > 0) {
				z2[xh0 - 1] = (int) ((ads[xh0][xh0]) % (((xh0 / (((ads[xh0][xh0 + 1])
						* ((ads[xh0 + 1][xh0 + 1]) / ((xh0 != 0) ? xh0 : 1)) != 0) ? (ads[xh0][xh0 + 1])
						* ((ads[xh0 + 1][xh0 + 1]) / ((xh0 != 0) ? xh0 : 1))
							: 1))
						/ ((50074 - ((bb[xh0 - 1][xh0 + 1]) % ((xh0 != 0) ? xh0
								: 1)) != 0) ? 50074 - ((bb[xh0 - 1][xh0 + 1]) % ((xh0 != 0) ? xh0
								: 1))
								: 1) != 0) ? (xh0 / (((ads[xh0][xh0 + 1])
						* ((ads[xh0 + 1][xh0 + 1]) / ((xh0 != 0) ? xh0 : 1)) != 0) ? (ads[xh0][xh0 + 1])
						* ((ads[xh0 + 1][xh0 + 1]) / ((xh0 != 0) ? xh0 : 1))
							: 1))
						/ ((50074 - ((bb[xh0 - 1][xh0 + 1]) % ((xh0 != 0) ? xh0
								: 1)) != 0) ? 50074 - ((bb[xh0 - 1][xh0 + 1]) % ((xh0 != 0) ? xh0
								: 1))
								: 1)
						: 1));
			}
			for (n7b = 1; n7b < 9; n7b++) {
				z2[xh0] = (int) (g[xh0 + 1] + r[xh0 + 1]);
			}
			dib[xh0] -= (short) (y3h[xh0]);
			for (i99 = 1; i99 < xh0; i99++) {
				z3[i99 - 1] = (int) (44114);
			}
		}
		for (to = 92; to > 2; --to) {
			for (r1 = 39; r1 > 1; r1--) {
				int xxv = 11;
				while (--xxv > 0) {
					if (r[r1 - 1] > 0)
						continue;
					ojs[r1][r1 - 1] -= (int) (cc[r1 - 1]);
				}
				ads[to - 1][r1] -= (double) (t[r1 - 1]);
				bb[to + 1][r1 - 1] *= (long) (fez++);
				for (int gq : g) {
					for (n = 1; n < 19; n++) {
						fez *= (int) ((-(ns++)) + (y3h[to - 1]));
						try {
							teq[to][r1 - 1] = (char) (teq[r1][to] % bb[n][r1 - 1]);
							g[r1] = (int) (r[to] / ns);
							bb[r1][r1] = (long) (-21216 / z2[to]);
							ojs[n][r1 + 1] = (int) (fez % 37041);
							ns = (int) (bb[r1 + 1][to - 1] / r6a[n][r1 - 1]);
						} catch (ArithmeticException a_e) {
						}
					}
				}
			}
		}

		System.out.println("char: " + (int) checkSum(teq));
		System.out.println("int: " + xh0 + "," + n7b + "," + i99 + "," + to
				+ "," + r1 + "," + fez + "," + n + "," + ns + "," + c0y + ","
				+ xc + "," + can + "," + checkSum(z2) + "," + checkSum(z3)
				+ "," + checkSum(g) + "," + checkSum(ojs) + "," + checkSum(cc)
				+ "," + checkSum(t) + "," + checkSum(lkg) + "," + checkSum(br3)
				+ "," + checkSum(nv6));
		System.out.println("short: " + checkSum(dib));
		System.out.println("double: " + checkSum(ads) + "," + checkSum(r));
		System.out.println("float: " + checkSum(r6a));
		System.out.println("long: " + checkSum(bb) + "," + checkSum(y3h));
	}

}
