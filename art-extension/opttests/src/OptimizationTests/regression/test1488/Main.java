/*
 * Copyright (C) 2015 Intel Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by Dalvik Fuzzer tool (3.5.001). Wed Feb 11 15:39:03 2015
package OptimizationTests.regression.test1488;

import OptimizationTests.regression.shared.*;

public class Main extends FuzzerUtils {

    public static final int N = 100;

    public static double dFld=-1.76239;

public static void main(String[] strArr) {

    long l=-7246628814787521105L, lArr[]=new long[N];
    byte by=19;
    short s=-32602;
    float f=0.177F;
    boolean b=false, bArr[]=new boolean[N];
    int i=-50, i1=-109, i2=-8, i3=-33606, i4=14, i5=14, i6=23757, i7=3, iArr[]=new int[N];

    init(iArr, -13);
    init(lArr, -11L);
    init(bArr, true);

    for (i = 2; i < 80; ++i) {
        i1 &= (i1 = (++i1));
        for (i2 = 1; i2 < 35; i2++) {
            i1 += (int)(f++);
            switch (((-5 >>> 1) % 4) + 103) {
            case 103:
                s >>= (short)((l - iArr[i2]) * ((i3++) + (l + f)));
            case 104:
                for (i4 = 1; i4 < 46; i4++) {
                    i1 = (((s - i4) * (i + i5)) * (-(i1 * by)));
                    dFld = (i3--);
                    switch (((i >>> 1) % 2) + 15) {
                    case 15:
                        i3 -= (int)((long)((f + i1) * (-(++i3))) & (long)(i3 - (-(43221 + (i2 - f)))));
                        break;
                    case 16:
                        i3 += (i4 + i2);
                        l -= i;
                        break;
                    }
                }
                l -= (i1 + ((l + 15184) + (--i1)));
            case 105:
                iArr[i2] = (int)((i3 + i5) * ((i5 * i5) + (dFld - -31034)));
            case 106:
                i3 >>= (int)lArr[i - 1];
                i6 >>= (((++iArr[i]) * -153) - i2);
                break;
            }
            lArr[i2] |= Integer.reverseBytes(i2);
            s = (short)((i6 >>= (~i)) + (i5 * (i5 * l)));
            i3 += i1;
            i3 += (((i2 * i) + i) - i4);
            iArr[i2 + 1] = (int)l;
            b = bArr[i];
            i3 += (int)((i7 <<= -1) * l);
            iArr[i2 + 1] = (++i7);
        }
    }

    System.out.println("i i1 i2 = " + i + "," + i1 + "," + i2);
    System.out.println("f s l = " + Float.floatToIntBits(f) + "," + s + "," + l);
    System.out.println("i3 i4 i5 = " + i3 + "," + i4 + "," + i5);
    System.out.println("by i6 b = " + by + "," + i6 + "," + (b ? 1 : 0));
    System.out.println("i7 iArr lArr = " + i7 + "," + checkSum(iArr) + "," + checkSum(lArr));
    System.out.println("bArr = " + checkSum(bArr));

    System.out.println("dFld = " + Double.doubleToLongBits(dFld));
}
}
