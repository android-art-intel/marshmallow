/*
 * Copyright (C) 2015 Intel Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by Android Runtime Fuzzer tool (3.5.001). Fri May 15 19:37:34 2015
package OptimizationTests.regression.test2072_1;

import OptimizationTests.regression.shared.*;

public class Main extends FuzzerUtils {

    public static final int N = 100;

    public static int iFld=-11574;

public static void main(String[] strArr) {

    short s=28678;
    boolean b=false;
    int i=-8, i1=2, i2=-26556, i3=-32619, i4=-5, iArr[]=new int[N];
    double d=0.39914;
    float f=0.113F, fArr[]=new float[N];
    byte by=-123, byArr[]=new byte[N];
    long l=-11L, lArr[]=new long[N];

    init(iArr, -6);
    init(lArr, -96L);
    init(fArr, 32.644F);
    init(byArr, (byte)-99);

    for (iFld = 94; iFld > 1; --iFld) {
        i = 1;
        do {
            l >>= (++iArr[iFld]);
            i1 = (int)(-22L + (12589 % ((i1 + iFld) | 1)));
            l >>= l;
            iArr[iFld + 1] -= Integer.reverseBytes(7);
            i1 -= (int)(((f * d) / ((long)(d + i) | 1)) - (i1++));
        } while (++i < iFld);
        i1 += (int)(i1 = (int)((-8L - (l--)) * (l / ((long)d | 1))));
        lArr[iFld + 1] >>= (i & i1);
        fArr[iFld] = ((i1--) * (--iArr[iFld + 1]));
        l += iFld;
        s += (short)(i1--);
        byArr[iFld + 1] = (byte)(l--);
    }
    i2 = 1;
    do {
        iArr[i2] ^= (i1 /= (((i2 - iFld) * (-171 / ((++i1) | 1))) | 1));
        i1 += (i2 * i1);
    } while (++i2 < 96);
    if (b) {
        for (i3 = 2; i3 < 88; i3 += 2) {
            for (i4 = 2; i4 < 36; ++i4) {
                l = s;
                f = ((lArr[i4 + 1] + (-(i4 << by))) - Integer.reverseBytes(i1));
                l = (-((-l) * (-l)));
                l = (long)(-138 - (-(i - 2.417F)));
            }
            i1 |= i2;
            d -= fArr[(i4 >>> 1) % N];
        }
    }

    System.out.println("i l i1 = " + i + "," + l + "," + i1);
    System.out.println("f d s = " + Float.floatToIntBits(f) + "," + Double.doubleToLongBits(d) + "," + s);
    System.out.println("i2 i3 i4 = " + i2 + "," + i3 + "," + i4);
    System.out.println("by b iArr = " + by + "," + (b ? 1 : 0) + "," + checkSum(iArr));
    System.out.println("lArr fArr byArr = " + checkSum(lArr) + "," + Double.doubleToLongBits(checkSum(fArr)) + "," +
        checkSum(byArr));

    System.out.println("iFld = " + iFld);
}
}
