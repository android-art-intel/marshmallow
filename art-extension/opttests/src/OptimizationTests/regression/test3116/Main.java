/*
 * Copyright (C) 2015 Intel Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by Android Runtime Fuzzer tool (4.1.002). Tue Jan 19 11:13:25 2016
// srand = 326292356472267471904508447558869207375

package OptimizationTests.regression.test3116;

import OptimizationTests.regression.shared.*;

public class Main extends FuzzerUtils {

    public static final int N = 100;

    public static long instanceCount=4072969400076624378L;
    public static double dFld=-81.37013;
    public static int iArrFld[]=new int[N];

    static {
        init(Main.iArrFld, -49546);
    }

public static void main(String[] strArr) {

    int i=-213, i1=20563, i2=-47814, i3=-63231, i4=-2;
    float f=-80.380F;
    byte by=105;
    boolean b=false, bArr[]=new boolean[N];
    short s1=-7195;
    double dArr[]=new double[N];

    init(bArr, false);
    init(dArr, -14.45487);

    for (i = 80; i > 2; i--) {
        i1 = (--Main.iArrFld[i - 1]);
        i1 -= (int)(((~(i + i)) * (Main.dFld + f)) - ((i + Main.dFld) - (i1 - i)));
        i1 += i;
        i1 *= (int)(((by + f) + (-(-151 * i))) * ((-(i + Main.instanceCount)) * Main.instanceCount));
        Main.instanceCount >>= Main.instanceCount;
        i1 += (int)(-2.218F / ((long)(f) | 1));
        for (i2 = i; i2 < 70; ++i2) {
            short s=23906;
            s = (short)(i % ((Main.iArrFld[i2] + (-(i1 * i2))) | 1));
            for (i3 = 1; i3 < 84; ++i3) {
                Main.iArrFld[i3 - 1] <<= (int)(--Main.instanceCount);
                Main.iArrFld[i3 + 1] = (--i1);
                b = bArr[i3];
                Main.instanceCount ^= (((--i1) + (i1 += i3)) + (i1--));
                i1 = -42803;
                s += (short)(i3 * i);
                i1 *= Main.iArrFld[i2 - 1];
                i1 += (int)(i1 <<= (int)(-76.82546 - (i1 - f)));
                by = (byte)(((Main.iArrFld[i3]++) % ((Main.iArrFld[i - 1]--) | 1)) - (++Main.instanceCount));
                i1 = i3;
            }
        }
        for (i4 = 3; i4 < 86; i4++) {
            Main.dFld *= 2153993379L;
            i1 += (i4 ^ i3);
            i1 += (((i4 * i3) + i1) - s1);
            dArr[i4 - 1] = (i1--);
        }
    }

    System.out.println("i i1 f = " + i + "," + i1 + "," + Float.floatToIntBits(f));
    System.out.println("by i2 i3 = " + by + "," + i2 + "," + i3);
    System.out.println("b i4 s1 = " + (b ? 1 : 0) + "," + i4 + "," + s1);
    System.out.println("bArr dArr = " + checkSum(bArr) + "," + Double.doubleToLongBits(checkSum(dArr)));

    System.out.println("Main.instanceCount Main.dFld Main.iArrFld = " + Main.instanceCount + "," +
        Double.doubleToLongBits(Main.dFld) + "," + checkSum(Main.iArrFld));
}
}
