/*
 * Copyright (C) 2015 Intel Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by Android Runtime Fuzzer tool (3.5.002). Fri Sep 18 22:20:16 2015
// srand = 111769179403787110040028499105933004254

package OptimizationTests.regression.test2655;

import OptimizationTests.regression.shared.*;

public class Main extends FuzzerUtils {

    public static final int N = 100;

    public static int iFld=7;

public static void main(String[] strArr) {

    int i=64841, i1=59, i2=16993, i3=-5, i4=-10, iArr[]=new int[N];
    long l=5992483568857999184L, l1=-135L;
    short s=-1286;
    float f=0.81F;
    double d=0.20413;
    byte by=11;
    boolean bArr[]=new boolean[N];

    init(iArr, 179);
    init(bArr, true);

    for (i = 97; i > 1; --i) {
        l += (iArr[i - 1] >>= (int)l);
        l |= (++i1);
        i1 = (i1--);
        s >>= (short)(--i1);
        f *= iArr[i];
        iArr[i] = (int)l;
        for (i2 = 1; i2 < 23; i2++) {
            d *= (l + (Math.sqrt(d) * (i3 - i2)));
            by = (byte)((++i1) + ((--l) + Math.max(202, i)));
            i3 -= (int)((++l) * (-(d * i)));
            iArr[i2 + 1] -= (int)(++d);
            f += 108702978L;
            by = (byte)(((by + l) - i1) - s);
            iFld /= (int)((-iArr[i2 + 1]) | 1);
            l = ((i + (++iArr[i])) + iFld);
            for (i4 = 2; i4 < 47; i4 += 2) {
                bArr[i2 - 1] = (154 >= ((iFld -= (int)l) - (f - iFld)));
                iArr[i4 - 1] -= (int)f;
                l += i;
                i3 <<= (++iArr[i + 1]);
                d = (l -= (l1++));
                iFld |= (int)(i1 %= (int)((long)(f) | 1));
            }
            i1 <<= (int)(((0.600F * (s + i2)) - (--l1)) - (by--));
        }
        d = ((++iArr[i + 1]) * ((++iFld) + iArr[i - 1]));
    }

    System.out.println("i l i1 = " + i + "," + l + "," + i1);
    System.out.println("s f i2 = " + s + "," + Float.floatToIntBits(f) + "," + i2);
    System.out.println("d i3 by = " + Double.doubleToLongBits(d) + "," + i3 + "," + by);
    System.out.println("i4 l1 iArr = " + i4 + "," + l1 + "," + checkSum(iArr));
    System.out.println("bArr = " + checkSum(bArr));

    System.out.println("iFld = " + iFld);
}
}
