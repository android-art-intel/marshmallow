/*
 * Copyright (C) 2015 Intel Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by Dalvik Fuzzer tool (3.4.001). Tue Dec  9 00:20:20 2014
package OptimizationTests.regression.test995;

import OptimizationTests.regression.shared.*;

public class Main extends FuzzerUtils {

    public static final int N = 100;

    public static double sd=101.951;

    public static long h85_check_sum = 0;
    public static long njg_check_sum = 0;

public static void h85(boolean uv, int ysg) {

    int t4u=-53874, ok=4653, r2[]=new int[N];
    long v9w=8440459597937478434L, ijq[]=new long[N];
    float c=-12.367F;
    double z=88.153;

    init(ijq, 2485776369029640646L);
    init(r2, 42279);

    for (t4u = 3; t4u < 84; t4u++) {
        ysg = (int)-3067347403285306060L;
        for (ok = 5; ok < 80; ++ok) {
            ysg += (int)(--z);
            ysg *= ((--ysg) + ok);
            c %= 15861;
            ysg = (ysg * -13769);
            ysg <<= (ysg++);
            ysg += ok;
        }
        ijq[t4u] = (ijq[(ok >>> 1) % N] + r2[t4u + 1]);
        ysg = (ysg--);
        v9w = (--ysg);
    }
    h85_check_sum += (uv ? 1 : 0) + ysg + t4u + ok + Double.doubleToLongBits(z) + Float.floatToIntBits(c) + v9w +
        checkSum(ijq) + checkSum(r2);
}

public static int njg() {

    int ty=57056, i=-2949, a=-53142, qa5[]=new int[N];
    short pu=-11719;
    long p=-2736442596467614396L;
    float qk=-65.453F;

    init(qa5, 48493);

    for (sd = 1; sd < 83; ++sd) {
        ty += (int)(((sd * qk) + p) - ty);
        ty >>= (ty++);
        for (i = (int)sd; i < 33; i++) {
            pu = (short)(ty - ((-(ty * i)) - -28601));
            for (a = (int)sd; a < 6; ++a) {
                qa5[a + 1] &= 31881;
                qk = (((ty + -44857) * (qa5[i]--)) + (--ty));
                ty += (int)7536251545357830336L;
                ty = (int)(a + ((p * -66.36F) * (ty + p)));
                p = ty;
            }
            ty >>= (int)(((a - qk) - (45258 * (sd + ty))) - (-(i + i)));
        }
    }
    long meth_res = ty + Float.floatToIntBits(qk) + p + i + pu + a + checkSum(qa5);
    njg_check_sum += meth_res;
    return (int)meth_res;
}

public static void main(String[] ylq) {

    int n=-33505, kt=5478, h=31889, k=25155, l=9388, js=42145, t=13877, fi[]=new int[N];
    long jr1=-121044581471093844L, r=7016279979550782936L, xk=-3630565405826325241L, w[][]=new long[N][N];
    short sm=-24306;
    byte kk=107;
    float kf=-80.703F, g2l=-123.303F;
    double u=11.977;
    boolean f=true;

    init(w, 271754553580201467L);
    init(fi, -51861);

    for (n = 88; n > 1; --n) {
        kt = 1;
        do {
            sm = (short)((long)(kf + (jr1--)) ^ (long)(n - (kk - kf)));
            h += (int)(jr1 + (kf--));
            w[(h >>> 1) % N][(h >>> 1) % N] = 8174983170362891999L;
            h += (((kt * jr1) + n) - kt);
            h -= (h -= -48950);
            h += (int)jr1;
            jr1 = (jr1 - ((n + h) + (-46831 + (++jr1))));
        } while (++kt < n);
        h += (int)g2l;
        h += ((long)n | (long)jr1);
        jr1 += (((n * jr1) + h) - jr1);
        for (k = n; k > 1; k--) {
            h -= (int)((fi[k] - (k - h)) - ((++h) - (-41722 * (jr1++))));
            h = (-(--h));
        }
        kk *= (byte)jr1;
        switch ((n % 2) + 123) {
        case 123:
            h *= (int)((-(r--)) * kt);
            break;
        case 124:
            h85(f, (int)((jr1 + (l - k)) - (n + (u--))));
            js = 1;
            while (++js < 83) {
                sm |= (short)(h++);
                xk -= (long)g2l;
                for (t = 49; t > 2; --t) {
                    h = -46855;
                    f = (((js * -2910978105894027616L) * (js - -15437)) < (fi[t + 1]--));
                }
            }
            break;
        default:
            r = (njg() + (fi[n - 1] += njg()));
        }
    }

    System.out.println("n kt sm = " + n + "," + kt + "," + sm);
    System.out.println("kf jr1 kk = " + Float.floatToIntBits(kf) + "," + jr1 + "," + kk);
    System.out.println("h g2l k = " + h + "," + Float.floatToIntBits(g2l) + "," + k);
    System.out.println("r f l = " + r + "," + (f ? 1 : 0) + "," + l);
    System.out.println("u js xk = " + Double.doubleToLongBits(u) + "," + js + "," + xk);
    System.out.println("t w fi = " + t + "," + checkSum(w) + "," + checkSum(fi));

    System.out.println("sd = " + Double.doubleToLongBits(sd));

    System.out.println("h85_check_sum: " + h85_check_sum);
    System.out.println("njg_check_sum: " + njg_check_sum);
}
}
