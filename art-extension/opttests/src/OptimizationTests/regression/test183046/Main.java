/*
 * Copyright (C) 2015 Intel Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by Dalvik Fuzzer tool (3.2.001). Sat Mar 29 20:31:04 2014
package OptimizationTests.regression.test183046;

import OptimizationTests.regression.shared.*;

class UserDefinedException extends RuntimeException {
    public int field;
}

public class Main extends FuzzerUtils {

    public static final int N = 500;

    public static int eu7 = -21933, vt4[] = new int[N];

    static {
        init(vt4, -48312);
    }

    public static void main(String[] zs9) {

        double b3o = -109.327;
        int mcm = 8006, t = 32268, xht = -39908, pc = 47331, gw = -11235, gyc = -53693, sn = -22447, ikw = -15597, wn = -47914, zc = 49010, v = -24274, gdj = -24595;
        short mzy = 27264, f = 29439;
        long k = 992388804570515873L, n[] = new long[N], m[] = new long[N], nyd[] = new long[N], yvw[] = new long[N];
        byte thr = 105, li = 26;
        boolean rn = true, ve = false;
        float uwe = -76.878F, yac = -118.933F;

        init(n, 2754103120434584284L);
        init(m, 1212915630763605963L);
        init(nyd, 3311949261514641211L);
        init(yvw, 2850231961447983563L);

        try {
            mcm = 449;
            while (--mcm > 0) {
                for (t = 10; t < 276; t++) {
                    if (rn != (rn = ve))
                        break;
                    n[t - 1] = (long) uwe;
                    xht -= vt4[t - 1];
                    for (pc = 12; pc < 210; pc += 3) {
                        m[mcm] *= ((thr++) - (vt4[t] += (xht++)));
                    }
                }
            }
            for (gw = 4; gw < 473; gw++) {
                m[gw - 1] = vt4[gw];
                for (gyc = 1; gyc < gw; ++gyc) {
                    for (sn = 120; sn > 1; --sn) {
                        li += (byte) (((mzy << 31170) - ikw) - ((-wn) / (++vt4[gyc + 1])));
                    }
                    wn = (int) ((-(24661 - (mcm / zc))) / b3o);
                    eu7 *= (int) ((++k) - ((-(mzy + -55952)) + (pc * wn)));
                }
            }
        } catch (ArithmeticException fmc) {
            f >>= (short) (((nyd[(49550 >>> 1) % N] <<= f) + (v / ((long) uwe | 1))) / ((--k) | 1));
        } catch (UserDefinedException dk4) {
            yvw[(-46562 >>> 1) % N] = (long) (gdj - ((sn - b3o) * (k - yac)));
        }

        System.out.println("mcm t rn = " + mcm + "," + t + "," + rn);
        System.out.println("ve uwe xht = " + ve + ","
                + Float.floatToIntBits(uwe) + "," + xht);
        System.out.println("pc thr gw = " + pc + "," + thr + "," + gw);
        System.out.println("gyc sn li = " + gyc + "," + sn + "," + li);
        System.out.println("mzy ikw wn = " + mzy + "," + ikw + "," + wn);
        System.out.println("zc b3o k = " + zc + ","
                + Double.doubleToLongBits(b3o) + "," + k);
        System.out.println("f v gdj = " + f + "," + v + "," + gdj);
        System.out.println("yac n m = " + Float.floatToIntBits(yac) + ","
                + checkSum(n) + "," + checkSum(m));
        System.out.println("nyd yvw = " + checkSum(nyd) + "," + checkSum(yvw));

        System.out.println("eu7 vt4 = " + eu7 + "," + checkSum(vt4));
    }
}
