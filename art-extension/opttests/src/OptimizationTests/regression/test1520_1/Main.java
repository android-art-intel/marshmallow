/*
 * Copyright (C) 2015 Intel Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by Dalvik Fuzzer tool (3.5.001). Fri Feb 13 23:55:52 2015
package OptimizationTests.regression.test1520_1;

import OptimizationTests.regression.shared.*;

public class Main extends FuzzerUtils {

    public static final int N = 100;

    public static long lFld=-43L;

    public static long iMeth_check_sum = 0;

public static int iMeth() {

    float f=0.659F;
    long lArr[]=new long[N];
    int i1=-5, i2=-8, i3=-8, i4=-199, iArr[][]=new int[N][N];
    double d=2.123621;
    byte by=45;
    short s=-3058, s1=6911;

    init(iArr, 49182);
    init(lArr, -2448167711995626208L);

    i1 = 1;
    do {
        for (i2 = i1; i2 > 1; i2 -= 3) {
            i3 = (int)(((++by) - i3) + ((-47 - (i3--)) * (f -= -7)));
            i3 >>= Math.min((int)((s * i2) - (-1.353F + (d - f))), i3);
            i3 = (int)(lFld--);
            i3 += (int)(((d + lFld) + (-1 + lFld)) - (iArr[i2][i2] * (i3--)));
            try {
                d += (-s1);
            }
            catch (NullPointerException exc) {
                i4 = (--i3);
                i4 = (int)(25236 * ((3455417119311086309L >>> (lFld++)) - (--i3)));
                s1 /= (short)(lArr[i1 - 1] | 1);
            }
            finally {
                lFld *= (--i3);
            }
        }
    } while (++i1 < 90);
    long meth_res = i1 + i2 + i3 + by + Float.floatToIntBits(f) + s + Double.doubleToLongBits(d) + s1 + i4 +
        checkSum(iArr) + checkSum(lArr);
    iMeth_check_sum += meth_res;
    return (int)meth_res;
}

public static void main(String[] strArr) {

    float f1=2.223F, f2=0.29F, fArr[]=new float[N];
    long lArr1[]=new long[N];
    int i=59119, i5=8, i6=-7, i7=28689, iArr1[]=new int[N];
    double d1=-2.15830, dArr[]=new double[N];
    byte byArr[]=new byte[N];

    init(iArr1, 62708);
    init(lArr1, -1654385235L);
    init(dArr, -43.109697);
    init(fArr, -76.821F);
    init(byArr, (byte)12);

    for (i = 5; i < 94; i++) {
        lFld = iMeth();
        i5 = (int)(((i5 - i) + i) + (i5 -= (int)(d1 * i)));
        iArr1[(i5 >>> 1) % N] = -73;
        i6 += (-(iArr1[i]++));
    }
    for (i7 = 4; i7 < 78; ++i7) {
        d1 = lArr1[i7];
        dArr[i7] *= (iMeth() + (--lFld));
        i5 -= (int)(i6 * lFld);
        f1 -= fArr[i7 + 1];
        fArr[i7] -= (lFld--);
        lFld *= (Double.doubleToRawLongBits(d1++) | (long)((lFld - f2) - byArr[i7 + 1]));
    }

    System.out.println("i i5 d1 = " + i + "," + i5 + "," + Double.doubleToLongBits(d1));
    System.out.println("i6 i7 f1 = " + i6 + "," + i7 + "," + Float.floatToIntBits(f1));
    System.out.println("f2 iArr1 lArr1 = " + Float.floatToIntBits(f2) + "," + checkSum(iArr1) + "," + checkSum(lArr1));
    System.out.println("dArr fArr byArr = " + Double.doubleToLongBits(checkSum(dArr)) + "," +
        Double.doubleToLongBits(checkSum(fArr)) + "," + checkSum(byArr));

    System.out.println("lFld = " + lFld);

    System.out.println("iMeth_check_sum: " + iMeth_check_sum);
}
}
