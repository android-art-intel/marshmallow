/*
 * Copyright (C) 2015 Intel Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by Android Runtime Fuzzer tool (3.5.002). Fri Jul 31 11:04:24 2015
// srand = 9563313536414965118825291267579539131167440028176106569299418180860

package OptimizationTests.regression.test2382;

import OptimizationTests.regression.shared.*;

public class Main extends FuzzerUtils {

    public static final int N = 100;

    public static long lFld=11335L;
    public static double dFld=-106.53281;

public static void main(String[] strArr) {

    short s=-22311;
    int i=-88, i1=22, i2=58174, i4=-21223, i5=7, i6=-178, iArr[]=new int[N];
    long l=42392L, l1=-4003619360848845827L, lArr[]=new long[N];
    byte by=-116;
    float f=64.813F, fArr[]=new float[N];

    init(iArr, -11);
    init(lArr, -4127496716857455635L);
    init(fArr, -81.660F);

    i = 1;
    do {
        for (i1 = i; i1 < i; i1++) {
            s += (short)(i1 * i1);
            i2 <<= (int)(((-201 - (2102696178L - by)) >> Math.min(-2571, 39637)) - ((i1 * i2) * (++l)));
        }
        i2 -= (s--);
        i2 = (int)(((31175 + i) + (i2 + f)) - (i2 -= (int)dFld));
        i2 >>= iArr[i + 1];
        i2 = (int)(l++);
        l = ((++l) - -29846);
        l -= (i2--);
    } while (++i < 76);
    for (int i3 : iArr) {
        l += (--i2);
        for (i4 = 4; i4 < 81; ++i4) {
            s += (short)(((i4 * i3) + f) - l);
        }
    }
    for (i5 = 1; i5 < 76; i5++) {
        iArr[i5 + 1] = (int)(i1 + l);
        i6 = 1;
        do {
            l1 = (((++i2) - iArr[i5 + 1]) + lArr[i6 + 1]);
            l *= -27808;
            s = (short)((i2++) + ((-459471660L * (i6 - i5)) + 0));
            s = (short)(i2++);
            l1 = i2;
            iArr[i6 + 1] <<= i;
            fArr[i6 - 1] = (-(iArr[i6 - 1]++));
        } while ((i6 += 2) < 53);
        i2 = (int)(l << ((i2++) >>> (l -= lFld)));
    }

    System.out.println("i i1 s = " + i + "," + i1 + "," + s);
    System.out.println("i2 by l = " + i2 + "," + by + "," + l);
    System.out.println("f i4 i5 = " + Float.floatToIntBits(f) + "," + i4 + "," + i5);
    System.out.println("i6 l1 iArr = " + i6 + "," + l1 + "," + checkSum(iArr));
    System.out.println("lArr fArr = " + checkSum(lArr) + "," + Double.doubleToLongBits(checkSum(fArr)));

    System.out.println("dFld lFld = " + Double.doubleToLongBits(dFld) + "," + lFld);
}
}
