/*
 * Copyright (C) 2015 Intel Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by Dalvik Fuzzer tool (3.3.001). Sat Jun 21 23:44:46 2014
package OptimizationTests.regression.test206031;

import OptimizationTests.regression.shared.*;

public class Main extends FuzzerUtils {

public static final int N = 300;

    public static int ar[]=new int[N];

    static {
        init(ar, -13506);
    }

public static void main(String[] f5) {

    int x=-30842, n83=21358, o=-6725, xro=26286, k=43390, vu=-33703, uce=17906, j=-7093;
    float mz=108.903F;
    long r=2040683919224168750L, n2e=6139057507338943074L, ecl=-9007061194414510745L, n[][]=new long[N][N];
    short t=-12920;
    double zx=94.221;

    init(n, -3529733290790667005L);

    for (x = 247; x > 6; --x) {
        n83 = (int)(((r + r) * (26.683 + (r - n83))) + (r + (-1742851410522910456L - r)));
        n83 = (int)((x * (x + x)) * (mz--));
        for (o = 1; o < x; ++o) {
            n[o + 1][o + 1] += (long)((6226418717731229626L + (r + o)) + ((mz * xro) - r));
            for (k = 2; k < 228; k += 3) {
                ar[k + 1] -= (int)(((r + x) & (--n83)) + mz);
                n83 += (int)(r--);
                ar[x] *= (n83 - ar[k]);
                n[o + 1][k - 1] = (long)mz;
                n83 += (int)(mz * ((xro--) << (++xro)));
                n83 *= (int)((--r) - (zx--));
                n83 = (int)n[o][x];
                ar[k - 1] -= (int)((--xro) - (--r));
                n83 += (int)((--zx) - ((43049 - (mz + xro)) + (r - -20408)));
            }
            n83 = (int)(((o * 92) + ar[x - 1]) + (r + (-7199 + (-(r + r)))));
            mz -= (float)(x - ((-(zx - r)) * (-(xro - n83))));
        }
        for (vu = 3; vu < 267; vu++) {
            n83 = xro;
            n83 = vu;
            ar[(10418 >>> 1) % N] = (int)(n2e + ((x - uce) - (xro--)));
            uce = ((ar[x - 1] + (x - x)) + ((o - o) + (uce++)));
        }
        ecl += (++r);
        ar[x + 1] += (int)(((t + j) + (mz + x)) + o);
        zx += (n2e++);
    }

    System.out.println("x n83 r = " + x + "," + n83 + "," + r);
    System.out.println("mz o xro = " + Float.floatToIntBits(mz) + "," + o + "," + xro);
    System.out.println("k zx vu = " + k + "," + Double.doubleToLongBits(zx) + "," + vu);
    System.out.println("n2e uce ecl = " + n2e + "," + uce + "," + ecl);
    System.out.println("t j n = " + t + "," + j + "," + checkSum(n));
    
    System.out.println("ar = " + checkSum(ar));
}
}
