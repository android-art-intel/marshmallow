/*
 * Copyright (C) 2015 Intel Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by Dalvik Fuzzer tool (3.3.001). Sat May 10 08:55:18 2014
package OptimizationTests.regression.test193932;

import OptimizationTests.regression.shared.*;

public class Main extends FuzzerUtils {

public static final int N = 300;

    public static int k=62311, g[][]=new int[N][N];

    static {
        init(g, -11994);
    }

public static void main(String[] v3) {

    int f=-6508, hn=28776, u=59187, z=-60179, n=-16284, st=-18280, v=-49102, s96=62012, khu=-49112, m[]=new int[N];
    byte w=24;
    long suj=-8373138599046610228L, bof=-1084517243690457906L, p76[]=new long[N];
    double a=-67.843, rg[]=new double[N];
    short mn6=26936;
    float oc=-106.471F, agi[]=new float[N];

    init(m, 3998);
    init(p76, 7791070841922085414L);
    init(rg, -43.932);
    init(agi, -40.681F);

    for (f = 7; f < 267; f++) {
        g[f][f - 1] >>= -62;
    }
    for (int e5 : m) {
        p76[(e5 >>> 1) % N] <<= (long)(((-24293 * f) + e5) * 114.571);
        for (hn = 8; hn < 285; ++hn) {
            u = (int)(rg[hn] - ((a = -48951) - p76[hn - 1]));
            z = (int)(((++suj) + (u - e5)) + ((8242831055909432688L * (-(w = (byte)u))) + (m[hn] >>>= -56909)));
            u = (int)(((--oc) - u) + (u++));
            z = (int)(((f + suj) - (hn + hn)) * (--w));
            u -= (int)((-(mn6 * f)) * agi[hn - 1]);
        }
        g[(f >>> 1) % N][(hn >>> 1) % N] = (int)(++oc);
        for (n = 248; n > 4; n--) {
            a = u;
            z -= (int)(((++m[n - 1]) - (e5 - e5)) * ((++oc) + (-(w / (hn | 1)))));
            try {
                u = (14214 % hn);
                u = (3 / f);
                u = (17893 % f);
            } catch (ArithmeticException a_e) {}
            z = (-st);
            for (k = 4; k < 83; k++) {
                suj <<= -9285;
            }
            z += (int)(((u++) + (2112 ^ suj)) + ((f - suj) + k));
        }
    }
    for (v = 11; v < 252; ++v) {
        suj -= (g[v][v] >>>= (int)bof);
        for (s96 = 1; s96 < 129; s96++) {
            for (khu = 11; khu < 188; ++khu) {
                u = (u++);
                suj -= (long)-59.175F;
            }
        }
    }

    System.out.println("f hn u = " + f + "," + hn + "," + u);
    System.out.println("a z suj = " + Double.doubleToLongBits(a) + "," + z + "," + suj);
    System.out.println("w oc mn6 = " + w + "," + Float.floatToIntBits(oc) + "," + mn6);
    System.out.println("n st v = " + n + "," + st + "," + v);
    System.out.println("bof s96 khu = " + bof + "," + s96 + "," + khu);
    System.out.println("m p76 rg = " + checkSum(m) + "," + checkSum(p76) + "," + Double.doubleToLongBits(checkSum(rg)));
    System.out.println("agi = " + Double.doubleToLongBits(checkSum(agi)));
    
    System.out.println("k g = " + k + "," + checkSum(g));
}
}
