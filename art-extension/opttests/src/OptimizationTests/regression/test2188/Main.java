/*
 * Copyright (C) 2015 Intel Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by Android Runtime Fuzzer tool (3.5.002). Tue Jun 23 14:28:33 2015
// srand = 17571870645578254739723208659270744480412788633301972026821798050421

package OptimizationTests.regression.test2188;

import OptimizationTests.regression.shared.*;

public class Main extends FuzzerUtils {

    public static final int N = 100;

    public static double dArrFld[]=new double[N];
    public static long lArrFld[]=new long[N];

    static {
        init(dArrFld, 2.77773);
        init(lArrFld, 14L);
    }

    public static long iMeth_check_sum = 0;
    public static long bMeth_check_sum = 0;

public static int iMeth(int i3) {

    float f=0.917F;
    int i4=0, i5=-54975, i6=225, iArr[]=new int[N];
    double d=-2.113696;
    boolean bArr[]=new boolean[N];
    short s=14311;
    long l1=-3524737597L, l2=-3919220703035008606L, lArr1[]=new long[N];

    init(bArr, true);
    init(iArr, -46646);
    init(lArr1, -9329L);

    i4 = 1;
    while (++i4 < 94) {
        i3 ^= (int)(l1 >>= ((l1 = i4) * (i4 + l1)));
        s += (short)(0 + (i4 * i4));
        s -= (short)(i3--);
        bArr[i4 + 1] = (((--d) * (-2.31570 - (l1 - l1))) != (3L - (i3 * -37323L)));
        for (i5 = 1; i5 < i4; i5 += 3) {
            i3 -= (int)((Math.min(l1, l1) * (i5 / (i3 | 1))) * (++f));
            try {
                i6 = (i6 / i3);
                iArr[i4 - 1] = (i5 % -641952081);
                i6 = (i3 / -183);
            } catch (ArithmeticException a_e) {}
            l1 = iArr[i4 - 1];
            i3 -= (int)(((l2 - f) - i6) - (i5 - (i3 - l1)));
            i3 += (((i5 * l1) + i5) - i6);
            iArr[i5 - 1] = (int)((--i3) * (lArr1[i5] - i3));
        }
    }
    long meth_res = i3 + i4 + l1 + s + Double.doubleToLongBits(d) + i5 + Float.floatToIntBits(f) + i6 + l2 +
        checkSum(bArr) + checkSum(iArr) + checkSum(lArr1);
    iMeth_check_sum += meth_res;
    return (int)meth_res;
}

public static boolean bMeth(byte by1) {

    float f2=-1.104F, fArr[]=new float[N];
    int i9=-38106, i10=2, i11=-54048, i12=147, iArr3[]=new int[N];
    double d2=1.55298;
    short s2=30141;
    long l4=-740783907L, l5=-7L;

    init(iArr3, 6185);
    init(fArr, 1.553F);

    i9 = 1;
    while (++i9 < 84) {
        for (i10 = 17; i10 > i9; --i10) {
            i11 += (i10 + i9);
            f2 += (i11++);
            i11 -= (int)((l4 += (-15501 - (--l5))) * iArr3[i9]);
            lArrFld[i10 + 1] -= (long)fArr[i10 + 1];
            l4 = (s2--);
            d2 *= (((l5 * f2) + (i9 * i9)) * i11);
            for (i12 = i10; i12 < 58; ++i12) {
                d2 = i9;
            }
            i11 = (-((-(i11 -= -8)) + (i9 * i10)));
        }
        l4 = i12;
    }
    long meth_res = by1 + i9 + i10 + i11 + Float.floatToIntBits(f2) + l4 + l5 + s2 + Double.doubleToLongBits(d2) + i12
        + checkSum(iArr3) + Double.doubleToLongBits(checkSum(fArr));
    bMeth_check_sum += meth_res;
    return meth_res % 2 > 0;
}

public static void main(String[] strArr) {

    float f1=-116.660F;
    int i=-48584, i1=25583, i2=14, i7=-149, i8=-14, iArr1[]=new int[N], iArr2[]=new int[N];
    double d1=-29.34794;
    boolean b=false;
    short s1=-21195, sArr[]=new short[N];
    byte by=-14;
    long l=-2006801085L, l3=-64364L, lArr[]=new long[N];

    init(lArr, -38464L);
    init(iArr1, -6);
    init(sArr, (short)-16256);
    init(iArr2, -236);

    for (i = 3; i < 91; i += 3) {
        i1 -= (int)(--l);
        i1 += (i ^ i1);
    }
    for (i2 = 6; i2 < 98; i2++) {
        lArr[i2 - 1] += (((i + i) + iMeth(13)) + Math.abs((int)(i1 - -11L)));
    }
    if (bMeth(by)) {
        switch ((((-8 >>> 1) % 1) * 5) + 74) {
        case 76:
            i7 = 91;
            while (--i7 > 0) {
                i1 += i7;
                if (b = (((l++) == (126 * (f1++))) ^ ((l = l) <= -14818))) {
                    dArrFld[i7 - 1] = (((iArr1[i7 + 1]--) - (l - i2)) + (i - (--i1)));
                    f1 += i1;
                    i1 = Math.abs(i2);
                } else if (2750391594L != l) {
                    by += (byte)i2;
                    iArr1[i7] = (int)l;
                } else {
                    l -= (--i1);
                    d1 *= (((++sArr[i7]) + (d1 * i7)) - s1);
                    i1 <<= (--i1);
                }
                for (i8 = 1; i8 < 52; ++i8) {
                    i1 = 10;
                    l3 -= (by + (i - i1));
                    i1 = (int)((iArr2[(i >>> 1) % N] * (-2.18135 + (i8 + i))) / ((-(l3 + by)) | 1));
                    i1 -= (int)((-94L + i8) + ((i8 + by) - (i - f1)));
                    iArr1[i7 + 1] -= (i1++);
                    l *= ((l + (-(l3 - i1))) + iArr1[i7 - 1]);
                }
            }
            break;
        }
    } else {
        i1 = 0;
    }

    System.out.println("i i1 l = " + i + "," + i1 + "," + l);
    System.out.println("i2 i7 f1 = " + i2 + "," + i7 + "," + Float.floatToIntBits(f1));
    System.out.println("by b d1 = " + by + "," + (b ? 1 : 0) + "," + Double.doubleToLongBits(d1));
    System.out.println("s1 i8 l3 = " + s1 + "," + i8 + "," + l3);
    System.out.println("lArr iArr1 sArr = " + checkSum(lArr) + "," + checkSum(iArr1) + "," + checkSum(sArr));
    System.out.println("iArr2 = " + checkSum(iArr2));

    System.out.println("dArrFld lArrFld = " + Double.doubleToLongBits(checkSum(dArrFld)) + "," + checkSum(lArrFld));

    System.out.println("iMeth_check_sum: " + iMeth_check_sum);
    System.out.println("bMeth_check_sum: " + bMeth_check_sum);
}
}
