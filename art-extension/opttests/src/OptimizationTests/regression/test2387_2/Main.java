/*
 * Copyright (C) 2015 Intel Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by Android Runtime Fuzzer tool (3.5.002). Fri Jul 31 15:14:45 2015
// srand = 24851795744021131396987749364952356943095399091892656957078016562218

package OptimizationTests.regression.test2387_2;

import OptimizationTests.regression.shared.*;

public class Main extends FuzzerUtils {

    public static final int N = 100;

    public static int iFld=-153;

    public static long lMeth_check_sum = 0;

public static long lMeth(long l, double d2) {

    short s=-5424;
    float f1=116.593F, fArr[][]=new float[N][N];
    int i2=34879, i3=33674, i4=-229, iArr1[]=new int[N];

    init(iArr1, 13);
    init(fArr, 0.644F);

    i2 = 1;
    while (++i2 < 83) {
        i3 = ((i3++) + -40);
        l *= 14;
        f1 += (float)(s - ((f1 * d2) + (i3 = i2)));
    }
    iFld = 1;
    while (++iFld < 89) {
        i3 = (int)f1;
    }
    for (i4 = 3; i4 < 79; ++i4) {
        if (iFld != ((f1++) + l)) continue;
        i3 += (int)(((d2 *= i2) * 118) + ((f1 * iFld) * (l * i3)));
        iArr1[i4 + 1] = (int)((++fArr[i4][i4 + 1]) + i4);
    }
    d2 = (Integer.reverseBytes(i3) + (f1++));
    iArr1[(i4 >>> 1) % N] = (int)(-((++l) << (i4 + l)));
    long meth_res = l + Double.doubleToLongBits(d2) + i2 + i3 + Float.floatToIntBits(f1) + s + i4 + checkSum(iArr1) +
        Double.doubleToLongBits(checkSum(fArr));
    lMeth_check_sum += meth_res;
    return (long)meth_res;
}

public static void main(String[] strArr) {

    short s1=-18894;
    double d=-1.107590, d1=70.58402, dArr[][]=new double[N][N];
    float f=0.502F, fArr1[]=new float[N];
    byte by=27, byArr[]=new byte[N];
    long l1=-834255103L, l2=-2738630963L, l3=-15935L, lArr[]=new long[N];
    int i=-10, i1=-12, i5=-1150, i6=14, i7=12, iArr[]=new int[N];

    init(lArr, -39L);
    init(iArr, -26);
    init(byArr, (byte)48);
    init(fArr1, 0.470F);
    init(dArr, 0.84532);

    for (f = 2; f < 95; ++f) {
        lArr[(int)(f - 1)] += (i--);
        i = (-(-(i--)));
        i -= (int)(((i * i) + i) + f);
        iArr[(int)(f + 1)] = (int)(((i / ((long)(f) | 1)) - (--i)) + ((i + d) * i));
        i *= (int)(1 + (-14 - (85.80394 - (d * 19.90817))));
    }
    for (d1 = 4; d1 < 94; ++d1) {
        i *= (i--);
    }
    for (i1 = 4; i1 < 93; ++i1) {
        i >>= (int)((i ^= (int)lMeth(l1, d)) + -64489);
        l1 = (l1 - ((++byArr[i1]) + (l1++)));
        i = (iArr[i1 + 1] + i1);
        if ((-(-32841L + (i5 / ((long)(f) | 1)))) > i) break;
        i5 -= (int)((long)(i - (-74.8301 - (d1 - f))) & (long)((i + l1) + (s1 % 0.42F)));
        l1 = (long)(fArr1[i1]--);
        fArr1[i1 - 1] += (float)((dArr[i1][i1 + 1] - Integer.reverseBytes(i1)) + (i - (i5 + -2L)));
        i6 = (s1--);
    }
    for (i7 = 1; i7 < 88; ++i7) {
        i5 -= 20607;
        d = (i6--);
        l1 = (long)f;
        i6 = (i6--);
        d -= (by--);
        i &= i6;
        l2 -= (long)((84.266F + (d1 - l3)) * ((-(i7 * i6)) + (i6 + i1)));
    }

    System.out.println("f i d = " + Float.floatToIntBits(f) + "," + i + "," + Double.doubleToLongBits(d));
    System.out.println("d1 i1 l1 = " + Double.doubleToLongBits(d1) + "," + i1 + "," + l1);
    System.out.println("i5 s1 i6 = " + i5 + "," + s1 + "," + i6);
    System.out.println("i7 by l2 = " + i7 + "," + by + "," + l2);
    System.out.println("l3 lArr iArr = " + l3 + "," + checkSum(lArr) + "," + checkSum(iArr));
    System.out.println("byArr fArr1 dArr = " + checkSum(byArr) + "," + Double.doubleToLongBits(checkSum(fArr1)) + "," +
        Double.doubleToLongBits(checkSum(dArr)));

    System.out.println("iFld = " + iFld);

    System.out.println("lMeth_check_sum: " + lMeth_check_sum);
}
}
