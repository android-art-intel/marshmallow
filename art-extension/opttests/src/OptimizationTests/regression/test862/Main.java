/*
 * Copyright (C) 2015 Intel Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by Dalvik Fuzzer tool (3.4.001). Sun Nov 16 13:19:00 2014
package OptimizationTests.regression.test862;

import OptimizationTests.regression.shared.*;

public class Main extends FuzzerUtils {

    public static final int N = 100;

    public static double gl=100.34;

    public static long xo9_check_sum = 0;

public static long xo9(int qs, int h) {

    double mov=104.708;
    float t7=26.419F, g=-116.173F, tzb[]=new float[N];
    byte bcd=118;
    int g9b=17047, it=-13137, xlu[]=new int[N];
    short nf=20176;
    long a=4098881662473393591L;

    init(xlu, 55998);
    init(tzb, 82.211F);

    for (g9b = 87; g9b > 4; g9b--) {
        qs += (g9b + g9b);
        bcd = (byte)(xlu[g9b] -= xlu[g9b - 1]);
        mov *= (h + h);
        qs += (int)(h / (((a + g9b) - (++qs)) | 1));
        t7 -= (((--a) / (g9b | 1)) % -24015);
        xlu[g9b] = h;
    }
    for (it = 2; it < 81; it++) {
        tzb[it] -= a;
        h -= (int)(((a * -8879593456124250116L) * (38316 + (--xlu[it]))) * (qs += (h & 29193)));
        nf >>= (short)(qs = (int)((g9b - a) + (qs * it)));
        qs -= (int)(((it + g) % ((long)(t7 - nf) | 1)) + (it - (++t7)));
    }
    long meth_res = qs + h + g9b + bcd + Double.doubleToLongBits(mov) + a + Float.floatToIntBits(t7) + it + nf +
        Float.floatToIntBits(g) + checkSum(xlu) + Double.doubleToLongBits(checkSum(tzb));
    xo9_check_sum += meth_res;
    return (long)meth_res;
}

public static void main(String[] e) {

    double zab=51.735;
    byte x=52;
    float cvr=-101.290F, r2[]=new float[N];
    int lt=-12307, l=64676, zw=14991, rr9=-9129, oy=62903, qq=-38387, rph[][]=new int[N][N], f[]=new int[N];
    short i=10750;
    long ze3=3732762687571186909L, t[]=new long[N];

    init(rph, -55733);
    init(f, 10127);
    init(r2, -56.958F);
    init(t, -2408560380257312031L);

    lt -= (int)(((zab++) - (-(lt - 45968))) * (lt++));
    for (l = 3; l < 77; ++l) {
        lt += (int)((--ze3) - (lt++));
        rph[l][l - 1] -= (int)(-(ze3 += (long)(91.379F + xo9(lt, lt))));
        try {
            f[l] = (l % 29665);
            lt = (l % -97);
            zw = (l % 69);
        } catch (ArithmeticException a_e) {}
        lt = (int)((cvr * zw) + (-ze3));
        for (rr9 = 1; rr9 < l; ++rr9) {
            ze3 += (((rr9 * rr9) + lt) - zw);
            for (gl = 15; gl > 1; gl--) {
                zw += (int)(100.821 - (r2[(int)(gl + 1)]++));
                lt >>= (int)(x <<= (byte)(ze3--));
                lt = (int)zab;
                zab *= l;
                t[l - 1] = rr9;
                zw -= ((++lt) + (-(-59093 / ((++zw) | 1))));
                zw = (int)((++lt) * (f[(int)(gl)] = (int)(-5263988318624516977L * (oy * ze3))));
                switch (((l % 1) * 5) + 24) {
                case 25:
                    oy += 28481;
                    rph[l + 1][rr9] += rph[(int)(gl - 1)][rr9 + 1];
                    break;
                default:
                    lt -= ((++oy) - (oy = -6606));
                    f[l - 1] = (int)(((rr9 * ze3) + (oy + rr9)) + ((l * qq) - qq));
                    if (oy > (rph[(int)(gl - 1)][l + 1] - qq)) break;
                }
            }
            oy <<= (--rph[rr9 - 1][l - 1]);
            rph[rr9][rr9] <<= (--qq);
            oy -= (int)((-1145546927701499441L * zw) + (i++));
        }
    }

    System.out.println("lt zab l = " + lt + "," + Double.doubleToLongBits(zab) + "," + l);
    System.out.println("ze3 zw cvr = " + ze3 + "," + zw + "," + Float.floatToIntBits(cvr));
    System.out.println("rr9 x oy = " + rr9 + "," + x + "," + oy);
    System.out.println("qq i rph = " + qq + "," + i + "," + checkSum(rph));
    System.out.println("f r2 t = " + checkSum(f) + "," + Double.doubleToLongBits(checkSum(r2)) + "," + checkSum(t));

    System.out.println("gl = " + Double.doubleToLongBits(gl));

    System.out.println("xo9_check_sum: " + xo9_check_sum);
}
}
