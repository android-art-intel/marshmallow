/*
 * Copyright (C) 2015 Intel Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by Dalvik Fuzzer tool (3.5.001). Fri Jan 30 23:10:38 2015
package OptimizationTests.regression.test1380;

import OptimizationTests.regression.shared.*;

public class Main extends FuzzerUtils {

    public static final int N = 100;

    public static long lFld=7399489155514940635L;
    public static int iFld=65055;

public static void main(String[] strArr) {

    float f=44.251F, f1=-1.506F, f2=-2.257F;
    long l=-4216502860L, l1=-801073344L, lArr[][]=new long[N][N];
    int i=-112, i1=222, i2=-229, i3=-83, i5=21579, i6=30235, iArr[]=new int[N], iArr1[]=new int[N];
    short s=-6432;
    byte by=-103;
    double d=-44.115588;

    init(lArr, 0L);
    init(iArr, -31028);
    init(iArr1, -4);

    for (d = 3; d < 80; d++) {
        by = (byte)(l = (long)(f++));
        i = ((++i) + (i++));
        i1 = 1;
        do {
            i += (-i);
            i &= (int)(lArr[i1 - 1][i1] + ((i = 32401) * i1));
        } while (++i1 < (int)d);
        i ^= ((iArr[(int)(d + 1)]--) - ((i + i1) * (--s)));
    }
    i2 = 1;
    do {
        for (i3 = 3; i3 < 79; i3++) {
            i = (iArr[i2]--);
            s += (short)((i - (l1 - 8262)) + ((d + l) - (i2 + 3)));
            i = (int)(i - ((106 * (i1 * i1)) - (d % ((long)f1 | 1))));
            l1 = lArr[i2 + 1][i3];
        }
        f1 = ((iFld * f2) - ((1 - (-82 + (i3 + i3))) - s));
        iFld += (++iArr1[i2 + 1]);
        i -= i1;
        for (int i4 : iArr) {
            iFld += (int)lArr[i2][i2];
            for (i5 = 2; i5 < 39; ++i5) {
                l1 ^= (i++);
                iArr[i2] &= (int)lArr[i2 - 1][i2];
                i4 = (--i);
                i4 = (int)((i6--) + (i6 += (int)(l = i6)));
                l1 = lFld;
                f1 = iArr1[i2];
            }
        }
    } while (++i2 < 89);

    System.out.println("d by l = " + Double.doubleToLongBits(d) + "," + by + "," + l);
    System.out.println("f i i1 = " + Float.floatToIntBits(f) + "," + i + "," + i1);
    System.out.println("s i2 i3 = " + s + "," + i2 + "," + i3);
    System.out.println("l1 f1 f2 = " + l1 + "," + Float.floatToIntBits(f1) + "," + Float.floatToIntBits(f2));
    System.out.println("i5 i6 lArr = " + i5 + "," + i6 + "," + checkSum(lArr));
    System.out.println("iArr iArr1 = " + checkSum(iArr) + "," + checkSum(iArr1));

    System.out.println("iFld lFld = " + iFld + "," + lFld);
}
}
