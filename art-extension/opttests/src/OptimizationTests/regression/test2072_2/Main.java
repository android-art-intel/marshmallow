/*
 * Copyright (C) 2015 Intel Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by Android Runtime Fuzzer tool (3.5.001). Sun May 17 09:47:55 2015
package OptimizationTests.regression.test2072_2;

import OptimizationTests.regression.shared.*;

public class Main extends FuzzerUtils {

    public static final int N = 100;


    public static long lMeth_check_sum = 0;

public static long lMeth(int i6, long l1) {

    float f1=-82.671F, fArr1[]=new float[N];
    boolean b1=false, bArr[]=new boolean[N];
    int i7=30350, i8=-12, iArr2[]=new int[N];

    init(iArr2, -37159);
    init(fArr1, -14.506F);
    init(bArr, true);

    i7 = 93;
    while (--i7 > 0) {
        iArr2[i7 - 1] = (iArr2[i7]++);
        for (i8 = 1; i8 < 15; ++i8) {
            fArr1[i8] = (i7 - -64190);
            iArr2[i8 - 1] = (--i6);
        }
        b1 = b1;
        i6 += ((i6++) + i8);
    }
    for (f1 = 3; f1 < 93; f1++) {
        b1 = (bArr[(int)(f1 - 1)] = ((i6 + l1) == (i6 - f1)));
        i6 = (int)l1;
        if ((long)i7 != (long)0) {
            return (long)(i6 + l1 + i7 + i8 + (b1 ? 1 : 0) + Float.floatToIntBits(f1) + checkSum(iArr2) +
                Double.doubleToLongBits(checkSum(fArr1)) + checkSum(bArr));
        }
        i6 = (int)(l1 - ((i7 + -148) + (i8 - l1)));
    }
    long meth_res = i6 + l1 + i7 + i8 + (b1 ? 1 : 0) + Float.floatToIntBits(f1) + checkSum(iArr2) +
        Double.doubleToLongBits(checkSum(fArr1)) + checkSum(bArr);
    lMeth_check_sum += meth_res;
    return (long)meth_res;
}

public static void main(String[] strArr) {

    long l=-251L;
    byte by=-14, by1=-40;
    float f=-2.494F, fArr[]=new float[N];
    boolean b=true;
    int i=14, i1=-50822, i2=93, i3=-13117, i4=-12, i5=18158, iArr[]=new int[N], iArr1[]=new int[N];
    short s=-20632, sArr[]=new short[N];
    double d=-112.110681;

    init(sArr, (short)24899);
    init(iArr, -97);
    init(fArr, -62.495F);
    init(iArr1, -10);

    i = 1;
    do {
        i1 += (i1 - ((i1++) % ((i - by) | 1)));
        sArr[i] <<= (short)(i1 ^= (int)l);
        by *= (byte)i1;
        if (b = b) {
            l += (long)(-80.187F + (i * i));
            i1 <<= (i1 * i1);
            i1 = (int)(((by1 * i) - l) + ((l + i1) - (i1 - i)));
        } else {
            i2 = 1;
            while (++i2 < 95) {
                i1 += (int)(176L + (i2 * i2));
                i1 += (++i1);
                i3 = (int)(Math.abs(d) * ((i3 + i2) - -17595));
                l = ((i2 * (++l)) + ((i1 = (int)1430233103782055639L) - (i3 * i1)));
                i1 += (i1--);
                i3 = (int)((--i1) + ((i2 * l) | (long)(s * d)));
                iArr[i + 1] -= (int)(l++);
                l += (long)(iArr[i] * ((d + i1) + (i2 + i)));
                for (i4 = i2; i4 < 55; ++i4) {
                    s = (short)(++i3);
                    fArr[i2 - 1] += (i5 - (i1 - (i1 + i5)));
                    i1 <<= (int)(((-(d - i4)) + (f + i5)) + ((-(d--)) - (--i3)));
                }
                f *= ((--i5) * (iArr1[i]++));
            }
            i1 >>= (int)(((-191 - i2) - 2.320F) + lMeth(i3, i1 - l));
        }
        f *= (f - -9);
    } while (++i < 97);
    i1 -= (int)(((--l) * (i1 * i4)) * l);

    System.out.println("i i1 by = " + i + "," + i1 + "," + by);
    System.out.println("l by1 b = " + l + "," + by1 + "," + (b ? 1 : 0));
    System.out.println("i2 i3 d = " + i2 + "," + i3 + "," + Double.doubleToLongBits(d));
    System.out.println("s i4 i5 = " + s + "," + i4 + "," + i5);
    System.out.println("f sArr iArr = " + Float.floatToIntBits(f) + "," + checkSum(sArr) + "," + checkSum(iArr));
    System.out.println("fArr iArr1 = " + Double.doubleToLongBits(checkSum(fArr)) + "," + checkSum(iArr1));


    System.out.println("lMeth_check_sum: " + lMeth_check_sum);
}
}
