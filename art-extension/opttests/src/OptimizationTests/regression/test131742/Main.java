/*
 * Copyright (C) 2015 Intel Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by Dalvik Fuzzer tool (3.1.000). Mon Aug 19 07:39:57 2013
package OptimizationTests.regression.test131742;

import OptimizationTests.regression.shared.*;

public class Main extends FuzzerUtils {

    public static final int N = 30;

    public static void main(String[] vou) {

        int a = 34056, eqq = 2186, ypp = 16232, q = -59922, om3 = 20288, nmq = -57204, l7g = -22918, h = 3147, zm = -37400, qk = 34458, sm = -7546, fw = -61452, mj9 = -54083, p2 = 38348, ud5 = -2387, n9 = -23475, in = -63480, e = -26992, y17[] = new int[N];
        byte j = -17;
        double p = 21.518, ie = -100.934, rhu = -47.567, z[][] = new double[N][N];
        short s = -23373, y = 12566, d = -4434, vhx[][] = new short[N][N];
        float bh0 = -117.896F, ehl = -121.80F;
        long x5a = -5039851245703586370L;

        init(vhx, (short) -28119);
        init(y17, -63130);
        init(z, 66.591);

        for (a = 1; a < 16; a++) {
            for (eqq = 6; eqq > a; --eqq) {
                ypp /= (((-a) >>> 1) + 1);
            }
            s = (short) (((p + y) - x5a) - (-(q - ypp)));
            for (om3 = 1; om3 < 16; ++om3) {
                nmq >>= l7g;
            }
            h = 21;
            while (--h > 0) {
                zm *= 51727;
                vhx[a - 1][a - 1] += (short) ypp;
                qk = (int) (((nmq + y) << (-(sm >>> fw))) + ((-(-58813 * (56398 + (j >> 27436)))) + (mj9 - p)));
                j = (byte) (((-(nmq - zm)) + (d / ((ypp >>> 1) + 1))) - ((nmq * x5a) + (sm--)));
                bh0 += (float) ((29382 >> (j * -40171)) * ((x5a / (((long) bh0 >>> 1) + 1)) * (ie * p2)));
            }
            y17[a - 1] = (int) ((rhu * (ypp - ud5)) - eqq);
        }
        ehl += h;
        z[(n9 >>> 1) % N][(in >>> 1) % N] += (-(-e));

        System.out.println("float: " + bh0 + "," + ehl);

    }
}
