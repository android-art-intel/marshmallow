/*
 * Copyright (C) 2015 Intel Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by Android Runtime Fuzzer tool (3.5.002). Sat Aug  8 07:05:20 2015
// srand = 3958832767189638979262370990975436125137337410071013677218588805716

package OptimizationTests.regression.test2436;

import OptimizationTests.regression.shared.*;

public class Main extends FuzzerUtils {

    public static final int N = 100;


    public static long vMeth_check_sum = 0;

public static void vMeth(short s1, int i8, long l1) {

    long lArr1[]=new long[N];
    short sArr1[]=new short[N];
    double d1=-63.68649, dArr[]=new double[N];
    float f1=-53.896F, f2=-1.524F, fArr[]=new float[N];
    boolean b=false, bArr[]=new boolean[N];
    byte by1=113;
    int i9=20097, i10=-2037, iArr1[]=new int[N];

    init(sArr1, (short)560);
    init(iArr1, -4);
    init(lArr1, -4L);
    init(dArr, -79.110179);
    init(bArr, false);
    init(fArr, -31.737F);

    if ((++f2) != (i10--)) {
        switch ((((i8 - i8) >>> 1) % 2) + 104) {
        case 104:
            if (b) {
                for (i9 = 2; i9 < 88; i9++) {
                    for (f1 = i9; f1 < 5; f1++) {
                        f2 *= ((-(-(l1 + l1))) - ((i8++) * (i8 + by1)));
                        l1 = (--sArr1[(int)(f1 - 1)]);
                        iArr1[i9 - 1] >>= (int)(((i8 - i9) + (-39385 + i10)) - ((i9 + f2) / ((i10 = (int)l1) | 1)));
                        i8 = (i10 - i8);
                        i10 *= (i10++);
                        l1 = (iArr1[(int)(f1 + 1)] * (-(lArr1[i9 - 1]++)));
                        s1 += (short)(((i8--) - (-(dArr[i9 + 1]++))) + i9);
                    }
                }
            }
        case 105:
            lArr1[(i9 >>> 1) % N] -= (long)(i10 - ((l1 - f2) * s1));
            break;
        }
    } else if (fArr[(i8 >>> 1) % N] >= (((++i10) + iArr1[(i8 >>> 1) % N]) + (i10 |= (++iArr1[(i8 >>> 1) % N])))) {
        i8 += (int)(((s1 - l1) * (d1 * i10)) - ((long)(-(-(i9 + f1))) & (i10++)));
    } else if ((l1 != sArr1[(i10 >>> 1) % N]) || (!bArr[(i10 >>> 1) % N])) {
        i10 = i8;
    }
    vMeth_check_sum += s1 + i8 + l1 + i9 + Float.floatToIntBits(f1) + Float.floatToIntBits(f2) + by1 + i10 + (b ? 1 :
        0) + Double.doubleToLongBits(d1) + checkSum(sArr1) + checkSum(iArr1) + checkSum(lArr1) +
        Double.doubleToLongBits(checkSum(dArr)) + checkSum(bArr) + Double.doubleToLongBits(checkSum(fArr));
}

public static void main(String[] strArr) {

    long l=-79282796L, lArr[]=new long[N];
    double d=0.10042;
    short s=7901, sArr[]=new short[N];
    float f=2.62F;
    byte by=-58;
    int i=189, i1=39934, i2=57716, i3=6, i4=-242, i5=1, i6=56206, i7=196, i11=-43839, iArr[]=new int[N];

    init(lArr, -2697525165L);
    init(iArr, 2);
    init(sArr, (short)-23972);

    for (i = 5; i < 84; i++) {
        i1 = (int)l;
        i1 = (int)(((i1++) + (i + i2)) * (l -= i2));
        for (i3 = 1; i3 < 31; ++i3) {
            s += (short)(i3 + i);
            for (i4 = i; i4 < 51; i4++) {
                lArr[i] <<= ((--i2) - (--lArr[i]));
                l += (++l);
                i1 = ((++iArr[i3]) - (i3 * i1));
                i1 += (int)((by + -16214) + lArr[i]);
                i2 += i2;
                l >>>= (long)((s *= (short)1.430F) - (--i2));
            }
            l %= ((((i3 - i5) + (l - -15056)) - (--l)) | 1);
            l = ((lArr[i3 + 1]++) >> ((9 - (~(i5 /= (int)(i3 | 1)))) * (l + i2)));
            d += (i5 * ((i1 * -54829) - Math.min(l, l)));
            i2 += (i3 * i3);
            d = (sArr[i3] = (short)i1);
            l *= (i6 >>= ((i + 30) * (i1 & i6)));
        }
        for (i7 = i; i7 < 55; ++i7) {
            i1 = (-i);
            i6 = (i5--);
        }
        d += (++i2);
        i5 ^= (int)((-(l - i)) + (i7 * (i5 % ((long)(f) | 1))));
    }
    vMeth((short)((d++) * ((i11 += i5) * (-(i2 >>= 3971)))), (int)((l--) - (++lArr[(i3 >>> 1) % N])), l <<= (i6 =
        (int)(-(f + i7))));
    vMeth((short)(s++), (int)(((f * -56) + (f++)) + 230), l += (iArr[(i4 >>> 1) % N]++));

    System.out.println("i i1 l = " + i + "," + i1 + "," + l);
    System.out.println("i2 i3 s = " + i2 + "," + i3 + "," + s);
    System.out.println("i4 by i5 = " + i4 + "," + by + "," + i5);
    System.out.println("d i6 i7 = " + Double.doubleToLongBits(d) + "," + i6 + "," + i7);
    System.out.println("f i11 lArr = " + Float.floatToIntBits(f) + "," + i11 + "," + checkSum(lArr));
    System.out.println("iArr sArr = " + checkSum(iArr) + "," + checkSum(sArr));


    System.out.println("vMeth_check_sum: " + vMeth_check_sum);
}
}
