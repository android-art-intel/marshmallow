/*
 * Copyright (C) 2015 Intel Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by Dalvik Fuzzer tool (3.5.001). Sun Apr 19 11:31:13 2015
package OptimizationTests.regression.test1210;
                                 
import OptimizationTests.regression.shared.*;

public class Main extends FuzzerUtils {

    public static final int N = 100;

    public static int iFld=21471;
    public static double dFld=0.122698;

    public static long iMeth_check_sum = 0;

public static int iMeth(byte by) {

    byte byArr[]=new byte[N];
    int i6=1, i7=-3, i8=11, iArr1[][]=new int[N][N];
    float f2=0.233F, fArr1[][]=new float[N][N];
    long l3=-208L;
    short sArr[]=new short[N];

    init(sArr, (short)-13539);
    init(iArr1, 42515);
    init(fArr1, 58.843F);
    init(byArr, (byte)-73);

    for (i6 = 79; i6 > 3; --i6) {
        sArr[i6] >>>= (short)(((iArr1[i6 - 1][i6 + 1]--) - (l3 + i6)) + (-20 + (i6 - l3)));
        iFld = (int)fArr1[i6][i6];
        for (i7 = 2; i7 < 81; i7++) {
            for (i8 = i7; i8 < 83; ++i8) {
                f2 -= ((iFld <<= (int)(l3 + i8)) ^ i6);
                by += (byte)-141;
                iFld += (int)((-(-(l3 - l3))) * (++byArr[i7 + 1]));
            }
            iFld = (iFld--);
            dFld += (((++iFld) * 34101L) * (iArr1[i6][i7] + (8918 / ((++iFld) | 1))));
            iFld += (i7 - i6);
            f2 += (-iArr1[i7 - 1][i6 - 1]);
        }
    }
    long meth_res = by + i6 + l3 + i7 + i8 + Float.floatToIntBits(f2) + checkSum(sArr) + checkSum(iArr1) +
        Double.doubleToLongBits(checkSum(fArr1)) + checkSum(byArr);
    iMeth_check_sum += meth_res;
    return (int)meth_res;
}

public static void main(String[] strArr) {

    byte byArr1[]=new byte[N];
    int i=14645, i1=-51804, i2=74, i3=-4, i4=2, i5=-10167, iArr[]=new int[N];
    boolean b=false, b1=false, bArr[]=new boolean[N];
    float f=-1.691F, f1=-7.737F, fArr[]=new float[N];
    long l=64734L, l2=25242L, lArr[]=new long[N];

    init(iArr, 7);
    init(bArr, true);
    init(lArr, -13L);
    init(fArr, -94.677F);
    init(byArr1, (byte)-41);

    if (b = ((b = (b1 = b)) && bArr[(i >>> 1) % N])) {
        for (i = 3; i < 93; i++) {
            iArr[i] >>= (int)l;
            f = 1;
            while (++f < 89) {
                i1 -= (int)-46.705F;
                i1 -= ((i1 + i) - (i1++));
            }
        }
    }
    for (i2 = 3; i2 < 89; i2++) {
        for (long l1 : lArr) {
            f1 *= (((l++) + (++i1)) * ((i * l) + (l2 - i)));
            dFld = (l1--);
            iArr[i2 - 1] -= (int)((l2 += i2) - ((l2 - l2) - (i1 - dFld)));
            i1 -= (int)l;
            i1 = (int)((i + (l2 + f1)) - i1);
            iArr[i2 - 1] = (--i1);
        }
        l <<= -27255;
        iFld = (iFld *= (iFld * (i2 - i2)));
        i1 = (int)(((f1--) - (l2 - 193)) - iFld);
    }
    for (i3 = 5; i3 < 96; ++i3) {
        iArr[i3 - 1] >>= i2;
        iFld = (int)fArr[i3 + 1];
        i1 *= (i4 - iArr[i3]);
        l2 >>>= i2;
    }
    i5 = 90;
    do {
        try {
            iArr[i5 + 1] = (36755 % iArr[i5]);
            i1 = (i1 % i1);
            i4 = (i1 % -164);
        } catch (ArithmeticException a_e) {}
    } while (--i5 > 0);
    iMeth((byte)(byArr1[(i >>> 1) % N]--));

    System.out.println("i l f = " + i + "," + l + "," + Float.floatToIntBits(f));
    System.out.println("i1 b b1 = " + i1 + "," + (b ? 1 : 0) + "," + (b1 ? 1 : 0));
    System.out.println("i2 f1 l2 = " + i2 + "," + Float.floatToIntBits(f1) + "," + l2);
    System.out.println("i3 i4 i5 = " + i3 + "," + i4 + "," + i5);
    System.out.println("iArr bArr lArr = " + checkSum(iArr) + "," + checkSum(bArr) + "," + checkSum(lArr));
    System.out.println("fArr byArr1 = " + Double.doubleToLongBits(checkSum(fArr)) + "," + checkSum(byArr1));

    System.out.println("dFld iFld = " + Double.doubleToLongBits(dFld) + "," + iFld);

    System.out.println("iMeth_check_sum: " + iMeth_check_sum);
}
}
