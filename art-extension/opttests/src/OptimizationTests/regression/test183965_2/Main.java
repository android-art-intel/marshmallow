/*
 * Copyright (C) 2015 Intel Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by Dalvik Fuzzer tool (3.2.001). Fri Mar 28 17:14:24 2014
package OptimizationTests.regression.test183965_2;

import OptimizationTests.regression.shared.*;

public class Main extends FuzzerUtils {

    public static final int N = 500;

    public static long py = 6016899148728865099L;

    public static void main(String[] hnh) {

        float v = 96.427F, us = 33.282F, ju = -113.24F, oi = 17.110F;
        byte s3d = 66, r06 = 5;
        long ob = 6959013600114755915L, i7a = 1135305590399496676L, vf3 = 636605699503336094L, vxg = -39037133713686818L, lj = 3588967604870846525L, e = 4506286697912535799L;
        short j = 10687;
        int ke = -11344, n2 = -56357, h8 = 49009, a = -56656, k7 = 33114, q = -48395, m = -13182, x = -54199, lkm = -61993, u = 40115, qc = 37788, go4 = -13209, h = -62264, d = -11188, t = 18276, p = 17575, f[] = new int[N], y[] = new int[N];

        init(f, -39020);
        init(y, -55950);

        ke = 498;
        do {
            n2 -= (int) ((h8 - (ob - n2)) - (++f[ke - 1]));
            n2 -= (int) ((v * (us - a)) - ((a * k7) - (q * a)));
            k7 -= (int) (((i7a / (m | 1)) + (vf3++)) - ((j + m) + (j + py)));
            x = (int) (-17.810F - ((-(ju * 3721)) * (x - x)));
        } while (--ke > 0);
        for (lkm = 411; lkm > 9; --lkm) {
            vxg = u;
            qc *= (int) ((y[lkm] = (int) (49.488F + (lj & vxg))) + (i7a--));
        }
        for (go4 = 485; go4 > 15; --go4) {
            h -= (int) (((e--) >> (++s3d)) * (h8 << lj));
            for (d = 5; d < 125; d++) {
                h8 += (((d * t) * q) * ((-h) - (h + 3895)));
            }
            ob = a;
            h8 = (int) -11.515F;
        }
        lj = (long) (((p + -44312) + oi) + ((--y[(a >>> 1) % N]) / (r06 | 1)));

        System.out.println("ke n2 h8 = " + ke + "," + n2 + "," + h8);
        System.out.println("ob v us = " + ob + "," + Float.floatToIntBits(v)
                + "," + Float.floatToIntBits(us));
        System.out.println("a k7 q = " + a + "," + k7 + "," + q);
        System.out.println("i7a m vf3 = " + i7a + "," + m + "," + vf3);
        System.out.println("j x ju = " + j + "," + x + ","
                + Float.floatToIntBits(ju));
        System.out.println("lkm vxg u = " + lkm + "," + vxg + "," + u);
        System.out.println("qc lj go4 = " + qc + "," + lj + "," + go4);
        System.out.println("h e s3d = " + h + "," + e + "," + s3d);
        System.out.println("d t p = " + d + "," + t + "," + p);
        System.out.println("oi r06 f = " + Float.floatToIntBits(oi) + "," + r06
                + "," + checkSum(f));
        System.out.println("y = " + checkSum(y));

        System.out.println("py = " + py);
    }
}
