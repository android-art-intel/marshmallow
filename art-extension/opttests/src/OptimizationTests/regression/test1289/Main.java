/*
 * Copyright (C) 2015 Intel Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by Dalvik Fuzzer tool (3.5.001). Wed Jan 28 04:25:35 2015
package OptimizationTests.regression.test1289;

import OptimizationTests.regression.shared.*;

public class Main extends FuzzerUtils {

    public static final int N = 100;

    public static long lFld=-41138L;
    public static int iFld=7, iFld1=8;

    public static long dMeth_check_sum = 0;

public static double dMeth() {

    int i4=13, i5=-61100, i6=50, i7=53478;
    float f1=5.216F;
    double d=2.95937, dArr[]=new double[N];
    boolean b1=true, bArr[]=new boolean[N];

    init(dArr, -96.100933);
    init(bArr, true);

    for (i4 = 4; i4 < 78; i4 += 2) {
        lFld = i4;
        for (i5 = 1; i5 < i4; ++i5) {
            i6 %= (i6 | 1);
            d += (((f1--) - (i5 - lFld)) * dArr[i4 + 1]);
            bArr[i5] = (((i5 - lFld) != (lFld - i5)) || b1);
        }
        i7 = (int)(i5 + ((--i6) - (lFld - lFld)));
        for (iFld1 = 1; iFld1 < i4; ++iFld1) {
            i6 += (((iFld1 * i5) + iFld) - i6);
            i7 >>= (int)(3671000253723462278L + ((i7 * i6) + i5));
            d -= ((i5 - lFld) - ((i7--) + (i7 * i7)));
            i6 += (((iFld1 * i4) + iFld1) - i7);
        }
    }
    long meth_res = i4 + i5 + i6 + Double.doubleToLongBits(d) + Float.floatToIntBits(f1) + (b1 ? 1 : 0) + i7 +
        Double.doubleToLongBits(checkSum(dArr)) + checkSum(bArr);
    dMeth_check_sum += meth_res;
    return (double)meth_res;
}

public static void main(String[] strArr) {

    long lArr[]=new long[N];
    int i=1, i1=143, i2=-13, i3=-62946, i8=68, i9=206, i10=-183, iArr[]=new int[N];
    byte byArr[]=new byte[N];
    float f=-1.182F;
    boolean b=true;

    init(iArr, -64556);
    init(lArr, 36201L);
    init(byArr, (byte)111);

    for (i = 4; i < 81; ++i) {
        lFld += (long)(((i - -111.123762) - lFld) - (++i1));
        b = false;
        lFld %= (((180 * i1) * i) | 1);
        for (i2 = 2; i2 < 47; ++i2) {
            i1 = ((iArr[i]--) - (iArr[i - 1]--));
            lFld += i2;
            try {
                i1 = (iArr[i] % i);
                i1 = (i1 % i2);
                i1 = (iArr[i2 - 1] % -61614);
            } catch (ArithmeticException a_e) {}
            i1 >>= i;
            iArr[i2] = (-39563 + (++i1));
            for (iFld = 1; iFld < i2; ++iFld) {
                lFld = i1;
                i1 += ((i1--) - 6);
                lFld <<= ((i1--) - (lFld--));
                f += lFld;
                iArr[iFld - 1] = (int)((++lArr[i + 1]) + (--i1));
            }
            byArr[i - 1] = (byte)(((i2 + iFld) - lFld) - 36);
            i1 -= (int)(lArr[i - 1] * ((i3 - i2) - (-1 - (--iArr[i]))));
        }
        lFld = (lFld - i2);
        i3 += i;
        i3 = (int)((i1 * (--lFld)) + (dMeth() - (f + iFld)));
    }
    for (i8 = 6; i8 < 96; ++i8) {
        for (i9 = 1; i9 < 24; ++i9) {
            lFld <<= (--byArr[i9 - 1]);
            iArr[i9] = (int)(((i3 + i10) - (lFld--)) - (iFld1 + (-(i8 + i9))));
        }
    }

    System.out.println("i i1 b = " + i + "," + i1 + "," + (b ? 1 : 0));
    System.out.println("i2 f i3 = " + i2 + "," + Float.floatToIntBits(f) + "," + i3);
    System.out.println("i8 i9 i10 = " + i8 + "," + i9 + "," + i10);
    System.out.println("iArr lArr byArr = " + checkSum(iArr) + "," + checkSum(lArr) + "," + checkSum(byArr));

    System.out.println("lFld iFld iFld1 = " + lFld + "," + iFld + "," + iFld1);

    System.out.println("dMeth_check_sum: " + dMeth_check_sum);
}
}
