/*
 * Copyright (C) 2015 Intel Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by Dalvik Fuzzer tool (3.5.001). Sat Jan 31 11:07:46 2015
package OptimizationTests.regression.test1398;

import OptimizationTests.regression.shared.*;

public class Main extends FuzzerUtils {

    public static final int N = 100;


public static void main(String[] strArr) {

    double d=121.69708;
    byte byArr[]=new byte[N];
    float f=-1.605F, f1=-66.920F, fArr[]=new float[N];
    int i=-61055, i1=54393, i2=31699, i3=-7, i4=-5168, iArr[]=new int[N];
    long l=758390376067638764L, l1=4045642682073189973L, lArr[]=new long[N];

    init(iArr, 192);
    init(fArr, 54.53F);
    init(lArr, -81L);
    init(byArr, (byte)-93);

    for (i = 78; i > 4; i--) {
        iArr[i] *= (int)(++fArr[i - 1]);
        lArr[i] *= i;
        byArr[i] &= (byte)((-17249 - l) * fArr[i + 1]);
        i1 += i;
    }
    for (f = 4; f < 80; f++) {
        iArr[(int)(f)] += (int)(--f1);
        l -= (long)(i1 * ((i1 - 61004) * f1));
        for (i2 = 1; i2 < 46; ++i2) {
            i1 >>= (++i1);
            i1 = (i % (i2 | 1));
            i1 += (int)(((l1 *= l1) + 97L) >> iArr[i2 - 1]);
            for (i3 = 2; i3 < 51; ++i3) {
                byArr[i2] = (byte)(f + (iArr[(int)(f)]++));
                l1 = (i3 + (i1 - (++l1)));
                iArr[i2 - 1] = (i1--);
                f1 -= l1;
            }
            try {
                i1 = (iArr[i2 - 1] % iArr[(int)(f)]);
                i1 = (iArr[(-8 >>> 1) % N] / 103);
                iArr[(int)(f)] = (i1 / i2);
            } catch (ArithmeticException a_e) {}
        }
        for (float f2 : fArr) {
            for (i4 = 77; i4 > 4; i4 -= 2) {
                i1 = (int)(--d);
                l1 = (((iArr[(int)(f + 1)] <<= -64) >> (l1 + 50)) * (i2 ^ (long)(f + i)));
                i1 *= i;
                l = (++i1);
                f2 += (lArr[(int)(f + 1)]++);
            }
        }
    }

    System.out.println("i l i1 = " + i + "," + l + "," + i1);
    System.out.println("f f1 i2 = " + Float.floatToIntBits(f) + "," + Float.floatToIntBits(f1) + "," + i2);
    System.out.println("l1 i3 i4 = " + l1 + "," + i3 + "," + i4);
    System.out.println("d iArr fArr = " + Double.doubleToLongBits(d) + "," + checkSum(iArr) + "," +
        Double.doubleToLongBits(checkSum(fArr)));
    System.out.println("lArr byArr = " + checkSum(lArr) + "," + checkSum(byArr));

}
}
