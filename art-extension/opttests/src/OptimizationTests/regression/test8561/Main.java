/*
 * Copyright (C) 2015 Intel Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by Dalvik Fuzzer tool (3.5.001). Sat Apr 25 03:36:42 2015
package OptimizationTests.regression.test8561;

import OptimizationTests.regression.shared.*;

public class Main extends FuzzerUtils {

    public static final int N = 100;

    public static int iArrFld[]=new int[N];
    public static boolean bFld=false;

    static {
        init(iArrFld, -23471);
    }

    public static long lMeth_check_sum = 0;
    public static long dMeth_check_sum = 0;

public static long lMeth(int i2, int i3, int i4) {

    int i5=-4, i6=-173, i7=-113, i8=55693, iArr[][]=new int[N][N];
    byte by=45;
    long l=-13L;
    short s=9562;
    float f=-1.836F;

    init(iArr, -61801);

    switch ((((++iArr[(i4 >>> 1) % N][(i4 >>> 1) % N]) >>> 1) % 1) + 87) {
    case 87:
        i5 = 79;
        while ((i5 -= 2) > 0) {
            f = (iArr[i5 + 1][i5 + 1] = (int)((i4 = 12) + (l - 16.694F)));
            i4 = (int)(((i3 - i4) + (l << l)) >> (i2 * (-(i4 &= s))));
            i3 += (i5 - l);
            s *= (short)(++f);
            i3 = (int)(((f -= i6) + (-202 - (i4 * by))) - ((-60 + (5448523950669980186L - (-(++iArr[i5 - 1][i5])))) +
                (i2 + l)));
            l += (-2 + (i5 * i5));
            for (i7 = 2; i7 < 56; i7++) {
                for (i8 = 1; i8 < 60; ++i8) {
                    i4 += s;
                    i4 += (-49388 - (-59761 + (-i3)));
                }
            }
        }
        break;
    }
    long meth_res = i2 + i3 + i4 + i5 + Float.floatToIntBits(f) + l + s + i6 + by + i7 + i8 + checkSum(iArr);
    lMeth_check_sum += meth_res;
    return (long)meth_res;
}

public static double dMeth(int i9, int i10, float f2) {

    double d=0.113744;
    int i11=-3, i12=-4, i13=34764;
    byte by1=120;
    long l1=-2824982485134109282L, l2=3233532607289278929L;
    float f3=1.992F;

    if (bFld) {
        for (i11 = 2; i11 < 76; i11++) {
            d -= ((i10 &= (int)(l1 + i10)) - ((iArrFld[i11] *= i11) - l1));
            l1 += ((long)((4 + (4257620598L % ((long)(f2 * d) | 1))) + (--l1)) | l1);
            i12 = 1;
            while (++i12 < 84) {
                f3 = (float)(((240 - (i9 - i9)) + iArrFld[i11 + 1]) + -2.80653);
                i10 >>= -40;
                i9 = iArrFld[i12];
                by1 <<= (byte)((long)((l1 - i9) - f2) << by1);
                if ((long)i12 != (long)0) {
                    return (double)(i9 + i10 + Float.floatToIntBits(f2) + i11 + Double.doubleToLongBits(d) + l1 + i12 +
                        Float.floatToIntBits(f3) + by1 + l2 + i13);
                }
                f3 += (-2042301247L + (i12 * i12));
                iArrFld[i11 - 1] = (int)(((i9 * i10) - (++i9)) + ((f3 + i12) * l2));
            }
        }
    } else {
        i10 = (i12 << ((-i13) * i13));
    }
    long meth_res = i9 + i10 + Float.floatToIntBits(f2) + i11 + Double.doubleToLongBits(d) + l1 + i12 +
        Float.floatToIntBits(f3) + by1 + l2 + i13;
    dMeth_check_sum += meth_res;
    return (double)meth_res;
}

public static void main(String[] strArr) {

    double d1=-2.26668;
    int i=-22023, i1=-49645, i14=8, i15=19036, i16=-207, i17=-15522, i18=22434, i19=-4, i20=27591, i21=20456;
    byte by2=-93;
    long l3=13L, lArr[]=new long[N];
    float f1=-122.422F, fArr[]=new float[N];

    init(lArr, -25150L);
    init(fArr, 1.64F);

    for (i = 4; i < 91; i++) {
        i1 = (int)lMeth((int)((i - i) * (--f1)), 27726 + i, (int)(dMeth(i1, i, -2.46F) + (-114 >> (i1++))));
    }
    for (i14 = 3; i14 < 88; i14 += 3) {
        i1 += (i14 * l3);
        i15 = 1;
        do {
            lArr[i14] -= (++i1);
            i1 -= (--i1);
            iArrFld[i15 - 1] += (int)((l3 - iArrFld[i15]) - ((l3 * 8L) * (l3 -= i16)));
            l3 += (((i15 * l3) + i1) - i17);
            i16 = (int)(((i - i14) - (l3 + l3)) * l3);
            l3 = ((long)(i17 - (f1 - i14)) | (long)((f1 + i) - i1));
            d1 += l3;
            by2 += (byte)(i15 ^ i);
        } while (++i15 < i14);
        for (i18 = 3; i18 < 63; ++i18) {
            i19 -= (int)l3;
            for (i20 = i18; i20 < 53; i20++) {
                i16 = (int)fArr[i14 + 1];
                i17 -= (2 - (-(-(i20 % (i19 | 1)))));
                l3 -= l3;
            }
            i17 += (int)(lArr[i14]++);
        }
        iArrFld[i14] = (int)(((--lArr[i14 - 1]) * (++iArrFld[i14 - 1])) - ((i1 >>= (int)4L) * i15));
    }
    for (i21 = 2; i21 < 96; i21++) {
        i17 = i20;
        d1 += (i17 = ((i16 - i1) + by2));
        i1 |= (int)(50.47555 - ((i19--) + (i16++)));
    }

    System.out.println("i i1 f1 = " + i + "," + i1 + "," + Float.floatToIntBits(f1));
    System.out.println("i14 l3 i15 = " + i14 + "," + l3 + "," + i15);
    System.out.println("i16 i17 d1 = " + i16 + "," + i17 + "," + Double.doubleToLongBits(d1));
    System.out.println("by2 i18 i19 = " + by2 + "," + i18 + "," + i19);
    System.out.println("i20 i21 lArr = " + i20 + "," + i21 + "," + checkSum(lArr));
    System.out.println("fArr = " + Double.doubleToLongBits(checkSum(fArr)));

    System.out.println("bFld iArrFld = " + (bFld ? 1 : 0) + "," + checkSum(iArrFld));

    System.out.println("lMeth_check_sum: " + lMeth_check_sum);
    System.out.println("dMeth_check_sum: " + dMeth_check_sum);
}
}
