/*
 * Copyright (C) 2015 Intel Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package OptimizationTests.regression.test106335;

/*
 * The test is based on test1.java generated by Dalvik Fuzzer on Tue Apr  9 19:46:47 2013 
 */
public class Main {

	public static final int N = 100;

	private static void init(int[] a, int n, int seed) {
		for (int j = 0; j < n; j++) {
			a[j] = ((j % 2 == 0) ? seed + j : seed - j) % 65535;
		}
	}

	private static void init(int[][] a, int n, int seed) {
		for (int j = 0; j < a.length; j++) {
			init(a[j], a[j].length, seed);
		}
	}

	private static int checkSum(int[] a, int n) {
		int sum = 0;
		for (int j = 0; j < n; j++) {
			sum += ((j % 2 == 0) ? a[j] : -a[j]);
		}
		return sum;
	}

	private static int checkSum(int[][] a, int n) {
		int sum = 0;
		for (int j = 0; j < a.length; j++) {
			sum += checkSum(a[j], a[j].length);
		}
		return sum;
	}

	public static void main(String[] args) {
		int kp9 = -20702, j2 = -63814, n = 59858, k7 = -29347, n0 = -27617, js = -58935, na = -8906, d = 25245, fu5 = -47963, ji = 22351, lj = 38828, h = -14639, jk9 = -60069, kk = -5606, n7 = -8709, res = -29767;

		int xe[] = new int[N], w[] = new int[N], u[] = new int[N], p7[] = new int[N], ku[] = new int[N], c2[] = new int[N], kq[] = new int[N], e0[] = new int[N], g[] = new int[N], cn0[] = new int[N], px[] = new int[N], p[] = new int[N], r[] = new int[N], jl[] = new int[N], b[] = new int[N], gx[] = new int[N], pd6[] = new int[N], ag[] = new int[N], j[] = new int[N], i[] = new int[N], k[] = new int[N], xz7[] = new int[N], x[] = new int[N], jy[] = new int[N], s[] = new int[N], ln6[] = new int[N], ff[] = new int[N];

		init(xe, N, 57127);
		init(w, N, 63555);
		init(u, N, 17625);
		init(p7, N, 17657);
		init(ku, N, 58984);
		init(c2, N, 51680);
		init(kq, N, 62635);
		init(e0, N, 31903);
		init(g, N, 45190);
		init(cn0, N, 52043);
		init(px, N, 21653);
		init(p, N, 18811);
		init(r, N, 59900);
		init(jl, N, 53292);
		init(b, N, 39973);
		init(gx, N, 52353);
		init(pd6, N, 24238);
		init(ag, N, 50440);
		init(j, N, 48994);
		init(i, N, 39596);
		init(k, N, 56035);
		init(xz7, N, 53681);
		init(x, N, 60276);
		init(jy, N, 29056);
		init(s, N, 31593);
		init(ln6, N, 55423);
		init(ff, N, 61834);

		if (xe[34] != (-64305 % ((w[6] != 0) ? w[6] : 1))
				+ ((((w[50]) - (u[49])) - (xe[24])) + 818)) {
			kp9 -= (w[3])
					- ((p7[14]) + (((ku[68]) + 32594) % ((c2[15] != 0) ? c2[15]
							: 1)));
			kp9 = (u[1]) - (kq[81]);
		}

		for (j2 = 1; j2 < 40; j2++) {
			w[j2 + 1] -= (((xe[j2 + 1]) - (e0[j2 + 1])) / ((kp9 + -18759 != 0) ? kp9
					+ -18759
					: 1))
					- (n++);
		}

		n = g[30];
		g[77] = (cn0[22]) - ((n / ((j2 != 0) ? j2 : 1)) - (ku[41]));
		ku[35] += kp9
				- (j2 - ((cn0[84]) / (((px[61]) % ((kp9 != 0) ? kp9 : 1) != 0) ? (px[61])
						% ((kp9 != 0) ? kp9 : 1)
						: 1)));
		// Enhanced For statement
		for (int contr_1 : p) {
			int[] exc_1;
			int exc_2 = -10;

			// Test exceptions with NegativeArraySizeException
			try {
				int exc_3 = 0;

				// Test exceptions with ArithmeticException
				try {
					n += r[29];
					int exc_4 = 0;

					// Test exceptions with ArithmeticException
					try {
						int contr_2 = 11;
						while (--contr_2 > 0) {

							if (kq[79] <= jl[11]) {
								if (n > 0)
									break;

								for (k7 = 1; k7 < 37; ++k7) {
									int contr_3 = 11;
									while (--contr_3 > 0) {

										if (n0++ > (ku[k7 - 1]) + k7) {
											b[k7 - 1] += gx[k7 - 1];
											p7[k7] += xe[k7 + 1];
										}

										n *= (ku[k7])
												/ ((p[k7] != 0) ? p[k7] : 1);
										pd6[k7] += (b[k7])
												+ (((xe[k7 + 1]) / ((n0 != 0) ? n0
														: 1)) / ((ag[k7 + 1] != 0) ? ag[k7 + 1]
														: 1));
									}

									kp9 *= j[k7 - 1];
								}

							}

						}

						js = i[64] % exc_4;
						int contr_4 = 11;
						while (--contr_4 > 0) {
							js += k7 + (--na);
						}

					} catch (NegativeArraySizeException exc_5) {
						kp9 = -10702 / ((n0 != 0) ? n0 : 1);
						int contr_5 = 11;
						do {
							p7[82] = p7[3];
						} while (--contr_5 > 0);

					} catch (ArithmeticException exc_6) {
						kp9 = k[63];
						int contr_6 = 11;
						do {
							d *= px[27];
						} while (--contr_6 > 0);

					}

					fu5 = xe[58] % exc_3;

					for (ji = 1; ji < 33; ++ji) {
						g[ji + 1] += p7[ji + 1];
					}

				} catch (NullPointerException exc_7) {
					lj -= (na * (cn0[59]))
							/ ((50601 + (xz7[61]) != 0) ? 50601 + (xz7[61]) : 1);
					kp9 = (e0[3])
							* (((r[52]) - ((((x[57]) % ((23217 != 0) ? 23217
									: 1)) + (p[33])) % ((((kq[88]) / ((lj != 0) ? lj
									: 1)) + 37851 != 0) ? ((kq[88]) / ((lj != 0) ? lj
									: 1)) + 37851
									: 1))) * d);
				} catch (ArithmeticException exc_8) {
					xz7[66] -= j2 * (ag[42]);
				} catch (NegativeArraySizeException exc_9) {
					h = (ku[24]) % ((jy[60] != 0) ? jy[60] : 1);

				}

				exc_1 = new int[exc_2];
			} catch (NegativeArraySizeException exc_10) {

				for (jk9 = 3; jk9 < 82; ++jk9) {
					s[jk9] -= (ln6[jk9 - 1])
							% ((((pd6[jk9]) - ((w[jk9]) * (c2[jk9 - 1])))
									+ (js - ((jy[jk9]) % ((fu5 != 0) ? fu5 : 1))) != 0) ? ((pd6[jk9]) - ((w[jk9]) * (c2[jk9 - 1])))
									+ (js - ((jy[jk9]) % ((fu5 != 0) ? fu5 : 1)))
									: 1);
				}

				for (kk = 1; kk < 12; ++kk) {
					kp9 = (ku[kk - 1]) - js;
				}

			} catch (NullPointerException exc_11) {
				pd6[94] -= n0
						/ ((-1005
								/ (((ff[12])
										- (((jk9 / (((s[0]) - kk != 0) ? (s[0])
												- kk : 1)) / ((js != 0) ? js
													: 1)) / (((ln6[12])
												/ ((j2 + -44239 != 0) ? j2
														+ -44239 : 1) != 0) ? (ln6[12])
												/ ((j2 + -44239 != 0) ? j2
														+ -44239 : 1)
													: 1)) != 0) ? (ff[12])
										- (((jk9 / (((s[0]) - kk != 0) ? (s[0])
												- kk : 1)) / ((js != 0) ? js
													: 1)) / (((ln6[12])
												/ ((j2 + -44239 != 0) ? j2
														+ -44239 : 1) != 0) ? (ln6[12])
												/ ((j2 + -44239 != 0) ? j2
														+ -44239 : 1)
													: 1))
										: 1) != 0) ? -1005
								/ (((ff[12])
										- (((jk9 / (((s[0]) - kk != 0) ? (s[0])
												- kk : 1)) / ((js != 0) ? js
													: 1)) / (((ln6[12])
												/ ((j2 + -44239 != 0) ? j2
														+ -44239 : 1) != 0) ? (ln6[12])
												/ ((j2 + -44239 != 0) ? j2
														+ -44239 : 1)
													: 1)) != 0) ? (ff[12])
										- (((jk9 / (((s[0]) - kk != 0) ? (s[0])
												- kk : 1)) / ((js != 0) ? js
													: 1)) / (((ln6[12])
												/ ((j2 + -44239 != 0) ? j2
														+ -44239 : 1) != 0) ? (ln6[12])
												/ ((j2 + -44239 != 0) ? j2
														+ -44239 : 1)
													: 1))
										: 1)
								: 1);
				if (n > 0)
					continue;

			} finally {
				// Enhanced For statement
				for (int contr_7 : p) {
					ku[70] += -(n7++);
				}

				if (n7 > 0)
					continue;

			}

		}

		res = kp9 + n - n0 + js - na + d - fu5 + lj - h + n7;
		res += checkSum(xe, N) + checkSum(w, N) - checkSum(u, N)
				+ checkSum(p7, N) - checkSum(ku, N) + checkSum(c2, N)
				- checkSum(kq, N) + checkSum(e0, N) - checkSum(g, N)
				+ checkSum(cn0, N) - checkSum(px, N) + checkSum(p, N)
				- checkSum(r, N) + checkSum(jl, N) - checkSum(b, N)
				+ checkSum(gx, N) - checkSum(pd6, N) + checkSum(ag, N)
				- checkSum(j, N) + checkSum(i, N) - checkSum(k, N)
				+ checkSum(xz7, N) - checkSum(x, N) + checkSum(jy, N)
				- checkSum(s, N) + checkSum(ln6, N) - checkSum(ff, N);

                System.out.println("res = " + res);
	}
}
