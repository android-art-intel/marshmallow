/*
 * Copyright (C) 2015 Intel Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by Dalvik Fuzzer tool (3.1.004). Thu Dec 19 09:34:30 2013
package OptimizationTests.regression.test160147_1;

import OptimizationTests.regression.shared.*;

public class Main extends FuzzerUtils {

    public static final int N = 30;

    public static void main(String[] v) {

        float zl = 126.570F;
        double o[] = new double[N], a2n[][] = new double[N][N], s4[] = new double[N];
        long ql = 6885759089604462243L, ale = 6138624296237328749L, w8[] = new long[N];
        byte x = 16, xur = -89;
        int dj = 51306, sqj = -48677, r = 36544, fm4 = -28288, ts = -7902, v0 = -15103, acf = 58582, j8 = 48814, sms = 18775, o81 = -8061, qs = -15104, nh = -34427, os = -23578, hd = 13562, e1 = -54337, t6[] = new int[N];

        init(t6, 6879);
        init(w8, 4900698875805480702L);
        init(o, 0.569);
        init(a2n, -91.535);
        init(s4, -115.560);

        for (dj = 1; dj < 5; dj++) {
            t6[dj] += (int) ((-(49266 * (--ql))) ^ (sqj++));
        }
        for (long go : w8) {
            r ^= (int) ((sqj--) * (o[(fm4 >>> 1) % N] + fm4));
            r <<= (int) (ql -= ((-4951311247752528332L + ts) >> (long) (v0 - zl)));
            acf = (int) ((--zl) + ts);
        }
        j8 = 26;
        do {
            ale *= ((ql - (dj % (sms | 1))) + (ale--));
        } while (--j8 > 0);
        for (o81 = 8; o81 > 1; --o81) {
            a2n[o81 - 1][o81 + 1] = x;
            for (qs = o81; qs < 5; qs++) {
                nh += (int) s4[o81];
                xur -= (byte) (((o81 + os) + (42544 + (hd >>= -18704))) >> -6969888411583630677L);
            }
            t6[o81 + 1] = (sqj + 7738);
            e1 |= fm4;
        }

        System.out.println("dj ql sqj = " + dj + "," + ql + "," + sqj);
        System.out.println("r fm4 ts = " + r + "," + fm4 + "," + ts);
        System.out.println("v0 zl acf = " + v0 + "," + Float.floatToIntBits(zl)
                + "," + acf);
        System.out.println("j8 ale sms = " + j8 + "," + ale + "," + sms);
        System.out.println("o81 x qs = " + o81 + "," + x + "," + qs);
        System.out.println("nh xur os = " + nh + "," + xur + "," + os);
        System.out.println("hd e1 t6 = " + hd + "," + e1 + "," + checkSum(t6));
        System.out.println("w8 o a2n = " + checkSum(w8) + ","
                + Double.doubleToLongBits(checkSum(o)) + ","
                + Double.doubleToLongBits(checkSum(a2n)));
        System.out.println("s4 = " + Double.doubleToLongBits(checkSum(s4)));

    }
}
