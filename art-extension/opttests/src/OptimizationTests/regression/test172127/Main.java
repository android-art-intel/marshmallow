/*
 * Copyright (C) 2015 Intel Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by Dalvik Fuzzer tool (3.2.001). Sat Feb 15 03:52:59 2014
package OptimizationTests.regression.test172127;

import OptimizationTests.regression.shared.*;

class UserDefinedException extends RuntimeException {
    public int field;
}

public class Main extends FuzzerUtils {

    public static final int N = 600;

    public static int tj = 25801, b9[] = new int[N];
    public static float v = -105.854F;

    static {
        init(b9, -40719);
    }

    public static void main(String[] h) {

        long t = 8672960875920254795L, ij[] = new long[N];
        double i = -30.598;
        int al = -63657, m3 = -38296, b6 = 11074, y = 11267, zdi = -37132, ewx = -23412, dnf = 40030, w34 = -9378, beb = -54449, v4 = 57794, mg = 10173, gzt = -44630, tu = -34323, l9 = 63266, tt[] = new int[N], ex[] = new int[N];
        byte fhe = -85;
        boolean k5 = false;
        float o = 85.217F;

        init(tt, 995);
        init(ij, -1659018028203747764L);
        init(ex, 14948);

        for (al = 1; al < 570; al += 3) {
            for (m3 = 340; m3 > 2; m3--) {
                b9[al - 1] = (++b6);
                try {
                    try {
                        tj = (33249 % b6);
                        b6 = (b6 / -11);
                        y = (tj / -38);
                    } catch (ArithmeticException a_e) {
                    }
                } catch (UserDefinedException sf) {
                }
                b9[m3 - 1] = (int) ((--i) - ((y *= (int) v) * tt[m3]));
            }
            zdi = (int) (fhe *= (byte) (ij[al - 1] - (b6 - t)));
        }
        for (ewx = 560; ewx > 3; ewx -= 3) {
            v -= ((++zdi) - v);
            b6 *= (ewx * (zdi = (tj = tj)));
        }
        for (dnf = 460; dnf > 1; --dnf) {
            y = (int) (((t = w34) * (o - o)) - (++beb));
            if (k5)
                break;
        }
        v4 = (int) ((-(t >> tj)) - (-(2060 >> (mg * gzt))));
        ex[(dnf >>> 1) % N] = (int) (((tu &= (int) t) - l9) + ex[(beb >>> 1)
                % N]);

        System.out.println("al m3 b6 = " + al + "," + m3 + "," + b6);
        System.out.println("y i zdi = " + y + "," + Double.doubleToLongBits(i)
                + "," + zdi);
        System.out.println("fhe t ewx = " + fhe + "," + t + "," + ewx);
        System.out.println("dnf w34 o = " + dnf + "," + w34 + ","
                + Float.floatToIntBits(o));
        System.out.println("beb k5 v4 = " + beb + "," + k5 + "," + v4);
        System.out.println("mg gzt tu = " + mg + "," + gzt + "," + tu);
        System.out.println("l9 tt ij = " + l9 + "," + checkSum(tt) + ","
                + checkSum(ij));
        System.out.println("ex = " + checkSum(ex));

        System.out.println("tj v b9 = " + tj + "," + Float.floatToIntBits(v)
                + "," + checkSum(b9));
    }
}
