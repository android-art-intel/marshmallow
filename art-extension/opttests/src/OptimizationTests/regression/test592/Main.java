/*
 * Copyright (C) 2015 Intel Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by Dalvik Fuzzer tool (3.4.001). Fri Sep  5 12:52:06 2014
package OptimizationTests.regression.test592;

import OptimizationTests.regression.shared.*;

public class Main extends FuzzerUtils {

    public static final int N = 100;

    public static int g=24093, am=9822, xr=14196;

    public static long bjo_check_sum = 0;
    public static long n_check_sum = 0;

public static long bjo(int jyf) {

    short w=-24189;
    float on2=-17.90F;
    byte ip=75;
    long j=215137131450441312L, l7f[]=new long[N];
    int tj=31202, hn4=39983;

    init(l7f, -2921975721121065054L);

    for (g = 2; g < 89; g++) {
        tj = g;
        while (--tj > 0) {
            l7f[tj] -= g;
            try {
                jyf -= (int)(g + (-(on2 /= (g | 1))));
                jyf ^= (jyf--);
                for (hn4 = 49; hn4 > 1; hn4 -= 3) {
                    jyf = (int)j;
                    jyf += hn4;
                    ip = (byte)(j--);
                    jyf += hn4;
                    j = w;
                }
            }
            catch (NegativeArraySizeException sb) {
                l7f[g + 1] = (jyf++);
            }
            catch (NullPointerException p) {
                jyf -= (int)64.336F;
            }
        }
    }
    long meth_res = jyf + tj + Float.floatToIntBits(on2) + hn4 + j + ip + w + checkSum(l7f);
    bjo_check_sum += meth_res;
    return (long)meth_res;
}

public static int n(float etj, double r, int gny) {

    double ei=51.692;
    byte t7b=107;
    long oa=3489408843973999014L;
    int b7=-60051, z=50848, yil=-62851, zp[]=new int[N];

    init(zp, 36015);

    for (b7 = 1; b7 < 91; ++b7) {
        zp[b7 + 1] = (--gny);
        for (z = 2; z < 58; ++z) {
            zp[b7 + 1] = (int)((etj--) * ((--gny) + (-39.483F - (5336219465427140311L * (etj / (oa | 1))))));
            ei = 1;
            while (++ei < 39) {
                gny -= am;
                zp[z + 1] += (int)(((-(-(am * g))) + (oa * -48772)) - -2571284698693656271L);
                gny *= ((++gny) + (yil--));
                yil += (int)(((ei * etj) + xr) - yil);
                yil *= (int)(oa + oa);
            }
            oa = ((oa * (5430957950995459314L + (10822 * (-oa)))) - zp[b7 + 1]);
            etj += (((--yil) * (yil--)) + t7b);
        }
    }
    long meth_res = Float.floatToIntBits(etj) + Double.doubleToLongBits(r) + gny + b7 + z + oa +
        Double.doubleToLongBits(ei) + yil + t7b + checkSum(zp);
    n_check_sum += meth_res;
    return (int)meth_res;
}

public static void main(String[] l) {

    float f=-7.91F;
    short vs=-31609;
    double yb=-127.4, fh[]=new double[N];
    byte tn6=-127;
    long e=373688508118481736L, hvf[]=new long[N];
    boolean hjm=true;
    int mm3=28446, j7=30415, ho=-54499, d=-41042, xv5=-14582, y=-61361, lgd=22668, pr=-48395, wr=63111, w7[]=new int[N];

    init(fh, 33.194);
    init(hvf, -9217225086503387947L);
    init(w7, 48721);

    mm3 = 1;
    while (++mm3 < 76) {
        vs += (short)((mm3 + (++e)) + (-(mm3 - mm3)));
        j7 *= (int)(++e);
        fh[mm3] -= ((-(--j7)) | (long)(-(-(f * j7))));
        e <<= ((++j7) - bjo(g - g));
        j7 = ho;
    }
    am = 1;
    do {
        ho -= -44836;
        for (d = 1; d < 24; ++d) {
            j7 <<= (int)(ho ^ ((-(63603 + (++e))) * (g / (am | 1))));
            try {
                ho = (-1062 / j7);
                j7 = (-954251883 % j7);
                ho = (151 / ho);
            } catch (ArithmeticException a_e) {}
        }
        j7 ^= d;
        e *= (vs - (j7 *= (ho + d)));
        ho += ((-(am - mm3)) + d);
        xv5 <<= xv5;
        hvf[am - 1] %= (xv5 | 1);
    } while (++am < 88);
    y = 1;
    do {
        tn6 |= (byte)bjo((xv5 & xv5) - vs);
        try {
            xv5 = (-9 / y);
            ho = (mm3 % 163);
            xv5 = (-89 % lgd);
        } catch (ArithmeticException a_e) {}
        yb += (--f);
    } while (++y < 81);

    System.out.println("mm3 vs e = " + mm3 + "," + vs + "," + e);
    System.out.println("j7 f ho = " + j7 + "," + Float.floatToIntBits(f) + "," + ho);
    System.out.println("fh hvf w7 = " + Double.doubleToLongBits(checkSum(fh)) + "," + checkSum(hvf) + "," +
        checkSum(w7));
}
}
