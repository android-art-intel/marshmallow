/*
 * Copyright (C) 2015 Intel Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by Dalvik Fuzzer tool (3.5.001). Sat Feb 21 17:05:08 2015
package OptimizationTests.regression.test1578_1;

import OptimizationTests.regression.shared.*;

public class Main extends FuzzerUtils {

    public static final int N = 100;

    public static double dFld=13.23134;
    public static int iFld=-31590, iFld1=54334;

    public static long lMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;

public static long lMeth(int i3, long l1, int i4) {

    short s=31426;
    float f=-111.948F, fArr[][]=new float[N][N];
    int i5=-9, i6=1, iArr[][]=new int[N][N];

    init(iArr, 6);
    init(fArr, -2.828F);

    for (i5 = 4; i5 < 77; i5 += 2) {
        i4 += (int)((iArr[(-53879 >>> 1) % N][i5 + 1] + 0.742F) + (l1 += (long)f));
        iArr[i5 + 1][i5 + 1] >>= i4;
    }
    for (iFld = 1; iFld < 89; iFld++) {
        iArr[iFld][iFld] -= i4;
        fArr[iFld + 1][iFld - 1] *= ((i3--) - ((s - iFld) - (i4 * iFld)));
    }
    for (i6 = 2; i6 < 88; i6 += 2) {
        l1 *= (--i3);
        l1 -= (long)(((dFld + i6) - iFld) - ((-Math.abs(i5)) * dFld));
        f += (-3880 + (i6 * i6));
        if ((long)i3 != (long)0) {
            return (long)(i3 + l1 + i4 + i5 + Float.floatToIntBits(f) + s + i6 + checkSum(iArr) +
                Double.doubleToLongBits(checkSum(fArr)));
        }
        i4 += (((i6 * iFld) + f) - i3);
    }
    long meth_res = i3 + l1 + i4 + i5 + Float.floatToIntBits(f) + s + i6 + checkSum(iArr) +
        Double.doubleToLongBits(checkSum(fArr));
    lMeth_check_sum += meth_res;
    return (long)meth_res;
}

public static int iMeth(int i7, double d, int i8) {

    byte by=-123, byArr[]=new byte[N];
    long l2=2135785162896804233L;
    float f1=0.252F;
    int i9=-54276, i10=-8, iArr1[][]=new int[N][N];

    init(iArr1, -129);
    init(byArr, (byte)-56);

    for (i9 = 5; i9 < 81; i9++) {
        f1 *= (i8++);
    }
    for (iFld1 = 2; iFld1 < 83; ++iFld1) {
        by += (byte)iFld;
        i10 = 1;
        do {
            i8 /= (int)(l2 | 1);
            i7 += (i10 * i10);
            i7 &= i9;
        } while (++i10 < 57);
        d -= (f1 * (--i8));
        i8 <<= (int)(((dFld -= iFld) - iArr1[iFld1][iFld1]) - iFld);
        byArr[iFld1] |= (byte)(-l2);
        i8 += iFld1;
    }
    long meth_res = i7 + Double.doubleToLongBits(d) + i8 + i9 + Float.floatToIntBits(f1) + by + i10 + l2 +
        checkSum(iArr1) + checkSum(byArr);
    iMeth_check_sum += meth_res;
    return (int)meth_res;
}

public static void main(String[] strArr) {

    byte by1=7, byArr1[]=new byte[N];
    boolean b=false, bArr[][]=new boolean[N][N];
    short s1=-14427;
    long l=-15566L, lArr[][]=new long[N][N];
    float f2=0.717F, f3=23.942F, f4=2.207F;
    double dArr[]=new double[N];
    int i=-94, i1=14, i2=-18, i11=-10, i12=-33669, i13=12836, i14=128, i15=24140, iArr2[]=new int[N], iArr3[]=new
        int[N];

    init(lArr, -7L);
    init(iArr2, 5621);
    init(byArr1, (byte)42);
    init(dArr, 115.15563);
    init(iArr3, 42489);
    init(bArr, false);

    if ((l *= (long)((f4 * i11) + -76.56F)) != (-l)) {
        i = 1;
        do {
            i1 >>= i1;
            l = i1;
            i2 *= 7;
            i2 <<= (int)lMeth((int)(-(-31204 + (l = (long)dFld))), lArr[i][i - 1]++, i);
            i2 -= (int)((iMeth(i1, dFld, i1) + (f2 * l)) * Integer.reverseBytes((int)(dFld + iFld)));
            l >>>= iFld;
        } while (++i < 96);
        if (b) {
            for (i11 = 2; i11 < 85; ++i11) {
                i2 = ((--i2) + (iArr2[i11] = -12));
                for (i12 = 1; i12 < i11; i12++) {
                    f2 = l;
                }
                l = l;
                f3 = (float)((-(++l)) * Math.abs(-(2833737853L - (i1++))));
                byArr1[i11 + 1] *= (byte)((iFld + (l / (i2 | 1))) + f2);
                i2 = (iMeth(iArr2[i11 - 1], --dArr[i11], (int)(i - 0.1015F)) * (++iArr2[i11 + 1]));
                dFld /= ((long)(++f2) | 1);
                f4 *= (float)(dArr[i11] = (f4 * (28137 - i2)));
                if (false) {
                    for (i13 = 1; i13 < i11; i13++) {
                        i1 = (int)((++l) + i1);
                        iArr2[i11] += (int)1.144F;
                        i2 >>= i;
                        i1 = (int)(((-32155 * (iFld * s1)) + (i1 + -2)) + l);
                    }
                }
            }
        } else if ((by1++) != (((i12 - iFld) - (l - 61.339F)) * (iArr3[(i13 >>> 1) % N] - (--i2)))) {
            lMeth(--i1, lArr[(i2 >>> 1) % N][(i1 >>> 1) % N]--, (int)((s1 >>= (short)iFld) * (dFld * l)));
        } else if (((i1--) == i12) && (b = b)) {
            i2 = iArr2[(iFld >>> 1) % N];
        } else {
            f4 -= by1;
        }
    } else if (bArr[((i15++) >>> 1) % N][(i >>> 1) % N]) {
        iMeth(i14, (++f4) + dFld, iFld1);
    } else if (b) {
        i1 -= (int)(((i1 - i2) / ((long)(i15 % ((long)f4 | 1)) | 1)) * (i + (by1 - f4)));
    } else {
        byArr1[(iFld1 >>> 1) % N] <<= (byte)l;
    }

    System.out.println("i i1 l = " + i + "," + i1 + "," + l);
    System.out.println("i2 f2 i11 = " + i2 + "," + Float.floatToIntBits(f2) + "," + i11);
    System.out.println("i12 f3 f4 = " + i12 + "," + Float.floatToIntBits(f3) + "," + Float.floatToIntBits(f4));
    System.out.println("i13 s1 b = " + i13 + "," + s1 + "," + (b ? 1 : 0));
    System.out.println("by1 i14 i15 = " + by1 + "," + i14 + "," + i15);
    System.out.println("lArr iArr2 byArr1 = " + checkSum(lArr) + "," + checkSum(iArr2) + "," + checkSum(byArr1));
    System.out.println("dArr iArr3 bArr = " + Double.doubleToLongBits(checkSum(dArr)) + "," + checkSum(iArr3) + "," +
        checkSum(bArr));

    System.out.println("iFld dFld iFld1 = " + iFld + "," + Double.doubleToLongBits(dFld) + "," + iFld1);

    System.out.println("lMeth_check_sum: " + lMeth_check_sum);
    System.out.println("iMeth_check_sum: " + iMeth_check_sum);
}
}
