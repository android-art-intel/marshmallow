/*
 * Copyright (C) 2015 Intel Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by Android Runtime Fuzzer tool (4.1.002). Thu Feb 25 06:10:09 2016
// srand = 236983800730093765729946363928651073919

package OptimizationTests.regression.test3377_1;

import OptimizationTests.regression.shared.*;

public class Main extends FuzzerUtils {

    public static final int N = 100;

    public static long instanceCount=-3L;
    public static double dFld=89.84556;
    public static long lArrFld[]=new long[N];
    public static int iArrFld[][]=new int[N][N];
    public static float fArrFld[]=new float[N];

    static {
        init(Main.lArrFld, -12L);
        init(Main.iArrFld, -13);
        init(Main.fArrFld, -1.355F);
    }

public static void main(String[] strArr) {

    int i=-11, i1=-101, i2=-44853, i3=-146;
    boolean b=true;
    float f=67.598F, f1=0.938F;
    short s=-6104;
    byte by=-46;

    for (i = 1; i < 87; ++i) {
        b = ((--i1) <= ((-(i1 + 26209)) ^ i));
    }
    f = 1;
    while (++f < 76) {
        i1 += (int)f;
    }
    for (i2 = 4; i2 < 79; i2++) {
        i1 = (int)(((i1--) - Math.max(Main.instanceCount, Main.instanceCount)) + i);
        Main.instanceCount = Main.instanceCount;
        Main.instanceCount = (((i1++) - (-(i1++))) * ((i1--) + (110 * (-186 - (i * i)))));
        f1 = 1;
        while (++f1 < i2) {
            Main.lArrFld[(int)(f1)] = Main.iArrFld[i2 + 1][(int)(f1)];
            i1 <<= (int)((Main.dFld = (f + i1)) + i);
            i1 -= (3683 - (i1 * (--i1)));
            Main.instanceCount = (long)(f1 - (Main.iArrFld[(int)(f1 - 1)][(int)(f1 + 1)] - i2));
            for (i3 = 2; i3 < 63; i3++) {
                Main.iArrFld[(int)(f1 - 1)][(int)(f1)] <<= ((-i1) * i1);
                s += (short)i3;
                i1 = (int)((long)((i1 * 92.77709) * i) | ((-630 * (i3 - i1)) + -4186));
                if (((Main.instanceCount + -647352225L) / (((0 * (++Main.instanceCount)) - (Main.instanceCount |= i3))
                    | 1)) < (((-i1) + (--Main.instanceCount)) - i1)) continue;
                i1 = -233;
                i1 = 30181;
                i1 >>= -7;
                i1 -= (int)Double.longBitsToDouble(Main.instanceCount);
                Main.lArrFld[i3] -= (-(by * (i2 - Main.instanceCount)));
                Main.iArrFld[i3][i2] = (int)Math.abs((Main.dFld--) - Math.abs(225));
            }
            Main.instanceCount += (long)((i1--) + (Main.instanceCount + Main.fArrFld[(int)(f1)]));
        }
    }

    System.out.println("i b i1 = " + i + "," + (b ? 1 : 0) + "," + i1);
    System.out.println("f i2 f1 = " + Float.floatToIntBits(f) + "," + i2 + "," + Float.floatToIntBits(f1));
    System.out.println("i3 s by = " + i3 + "," + s + "," + by);

    System.out.println("Main.instanceCount Main.dFld Main.lArrFld = " + Main.instanceCount + "," +
        Double.doubleToLongBits(Main.dFld) + "," + checkSum(Main.lArrFld));
    System.out.println("Main.iArrFld Main.fArrFld = " + checkSum(Main.iArrFld) + "," +
        Double.doubleToLongBits(checkSum(Main.fArrFld)));
}
}
