/*
 * Copyright (C) 2015 Intel Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by Android Runtime Fuzzer tool (3.5.002). Tue Aug  4 12:46:12 2015
// srand = 8824936619659659135635201593980848107395386559697377986638360862501

package OptimizationTests.regression.test2417;

import OptimizationTests.regression.shared.*;

public class Main extends FuzzerUtils {

    public static final int N = 100;


public static void main(String[] strArr) {

    float f=-43.352F;
    double d=112.26643;
    int i=0, i1=45, i2=-21167, i3=-113, i4=-5, i5=7, i6=17479, i7=16517, iArr[]=new int[N];
    boolean b=false;
    short s=23094;
    byte by=55;
    long l=-44050L, lArr[][]=new long[N][N];

    init(iArr, 248);
    init(lArr, 2L);

    for (i = 96; i > 1; i -= 2) {
        l /= ((-38905 + Math.max(--i1, (int)(l + l))) | 1);
        i2 = 1;
        while (++i2 < 32) {
            i1 = (int)(8665 << ((iArr[i + 1] *= i2) - l));
            iArr[i + 1] *= (int)((i1--) + (i1 >>= (int)(l++)));
            for (i3 = 1; i3 < 35; ++i3) {
                l = (((i1 -= 11) - (i3 * i1)) * ((-(i3 + i)) * i1));
                i1 += (i3 | l);
                i1 >>>= (((i2 << i1) * i3) + 232);
                if (b) break;
                i1 &= (++i1);
                iArr[i2] <<= (int)lArr[i2 + 1][i2];
                f += (by -= (byte)i);
            }
        }
        if (b = b) continue;
        i4 -= (int)((i4 - l) + (l + (i4 + f)));
        iArr[i - 1] = s;
        i5 = 1;
        do {
            i6 = i;
            do {
                i4 -= (int)(s = (short)(--l));
                l -= (i1--);
                i4 ^= ((i1++) * ((-38212 * (216 + (i6 + -78))) - (i3 - by)));
                i1 = (int)((-(i4 + i7)) - l);
                lArr[i5][i5] |= (long)((++l) - ((d + -6425) * (d * l)));
                try {
                    iArr[i5 + 1] = (20437 / i7);
                    i1 = (i / -61);
                    i4 = (1536249671 % i7);
                } catch (ArithmeticException a_e) {}
                i7 = (++i4);
            } while (--i6 > 0);
        } while (++i5 < 14);
    }

    System.out.println("i l i1 = " + i + "," + l + "," + i1);
    System.out.println("i2 i3 b = " + i2 + "," + i3 + "," + (b ? 1 : 0));
    System.out.println("f by i4 = " + Float.floatToIntBits(f) + "," + by + "," + i4);
    System.out.println("s i5 i6 = " + s + "," + i5 + "," + i6);
    System.out.println("i7 d iArr = " + i7 + "," + Double.doubleToLongBits(d) + "," + checkSum(iArr));
    System.out.println("lArr = " + checkSum(lArr));

}
}
