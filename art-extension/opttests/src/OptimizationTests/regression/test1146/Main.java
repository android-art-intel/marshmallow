/*
 * Copyright (C) 2015 Intel Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by Dalvik Fuzzer tool (3.5.001). Sun Mar 15 21:29:28 2015
package OptimizationTests.regression.test1146;

import OptimizationTests.regression.shared.*;

public class Main extends FuzzerUtils {

    public static final int N = 100;

    public static short sFld=24040;
    public static byte byFld=-111;
    public static int iFld=-156;
    public static float fArrFld[]=new float[N];

    static {
        init(fArrFld, -51.700F);
    }

    public static long byMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;

public static byte byMeth(int i2, int i3, int i4) {

    boolean b=false;
    double d=-1.88385;
    byte by=-108;
    int i5=234, i6=-26, iArr[]=new int[N];
    float f=1.707F;
    long l=-65L, lArr[]=new long[N];

    init(iArr, 3);
    init(lArr, -2467467583570206144L);

    for (i5 = 96; i5 > 3; i5--) {
        i3 = iArr[i5 + 1];
        f -= lArr[i5 - 1];
        i3 += (((i5 * i2) + f) - i2);
        for (i6 = 4; i6 < 74; ++i6) {
            i3 = (int)((i4++) * (++l));
            switch ((((i6 >>> 1) % 2) * 5) + 13) {
            case 21:
                for (d = i5; d < 90; ++d) {
                    b = true;
                    lArr[i5 - 1] -= (++l);
                    i2 = 14;
                    i4 += i6;
                }
            case 22:
                iArr[i5 - 1] = (int)(((f * i4) - (25064 * (i4 - i3))) + (150L * (l + i4)));
                break;
            default:
                i4 = by;
            }
        }
    }
    long meth_res = i2 + i3 + i4 + i5 + Float.floatToIntBits(f) + i6 + l + Double.doubleToLongBits(d) + (b ? 1 : 0) +
        by + checkSum(iArr) + checkSum(lArr);
    byMeth_check_sum += meth_res;
    return (byte)meth_res;
}

public static int iMeth(double d2, long l3) {

    byte by3=-70;
    int i12=0, i13=-10, i14=-26258, iArr2[]=new int[N];
    float f3=-36.645F, fArr[]=new float[N];
    long l4=55189L, lArr2[]=new long[N];

    init(lArr2, 9L);
    init(iArr2, -18);
    init(fArr, 0.1021F);

    i12 = 1;
    while (++i12 < 98) {
        i13 = 1;
        do {
            lArr2[i12 - 1] = (((i12 - -11L) + i12) + sFld);
            i14 = ((i14--) + (i14--));
            l3 = 234L;
            f3 = -4254555230L;
            d2 = i14;
            i14 |= ((iArr2[i13 + 1]++) - i14);
            lArr2[i12] -= (-l3);
            i14 = (int)(++f3);
            i14 >>= (int)(f3 * (lArr2[i12] * (fArr[i12]--)));
            by3 &= (byte)(((++i14) * (++d2)) - ((l4 * i12) * (l4++)));
        } while (++i13 < 76);
    }
    long meth_res = Double.doubleToLongBits(d2) + l3 + i12 + i13 + i14 + Float.floatToIntBits(f3) + by3 + l4 +
        checkSum(lArr2) + checkSum(iArr2) + Double.doubleToLongBits(checkSum(fArr));
    iMeth_check_sum += meth_res;
    return (int)meth_res;
}

public static void main(String[] strArr) {

    boolean b1=true, bArr[][]=new boolean[N][N], bArr1[][]=new boolean[N][N];
    double d1=0.117836, dArr[]=new double[N];
    byte by1=-78, by2=7, byArr[]=new byte[N];
    int i=-14, i1=24900, i7=-150, i8=19720, i9=9, i10=0, i11=-13, i15=-14, i16=3, i17=-41769, i18=34652, i19=-41,
        i20=7, i21=-40, iArr1[][]=new int[N][N], iArr3[]=new int[N];
    float f1=-9.102F, f2=1.370F, f4=-2.176F;
    long l1=1414653901031834964L, l2=3L, l5=188L, l6=6L, lArr1[]=new long[N], lArr3[]=new long[N];

    init(iArr1, 40);
    init(dArr, 51.59371);
    init(byArr, (byte)-81);
    init(lArr1, -646274178283158986L);
    init(bArr, false);
    init(lArr3, 238L);
    init(bArr1, false);
    init(iArr3, -14);

    i = 1;
    do {
        switch ((i * 5) + 120) {
        case 190:
            i1 -= byMeth(-i1, i1, --i1);
            break;
        case 283:
            i1 = (int)(f1 + i1);
        case 425:
            for (i7 = i; i7 < 87; i7++) {
                iArr1[i + 1][i7 - 1] = (int)(((i * i8) + (-(-(d1 + d1)))) + (i1 -= (int)(l1 - f1)));
                i1 += i7;
                i1 -= (++by1);
                d1 /= (iArr1[i][i - 1] | 1);
                i8 = i8;
            }
            break;
        case 317:
            i1 -= (int)(((-(i8 *= sFld)) - (sFld * 21745)) - ((-27177 % ((-41454 - by2) | 1)) - (i + d1)));
            break;
        case 428:
            for (i9 = 1; i9 < 14; i9++) {
                i1 += (int)l1;
                l1 = (i1 + (i9 - (i * 0)));
                for (f2 = 1; f2 < 93; ++f2) {
                    i8 += (int)((i << (--i8)) * dArr[(int)(f2)]);
                    by1 += (byte)(-237 + (f2 * f2));
                    sFld -= (short)(++i1);
                    i8 = (int)(f1 * i1);
                    byArr[i9 + 1] = (byte)(310682665L - i9);
                    l1 = iArr1[(int)(f2 - 1)][i9 - 1];
                    iArr1[i9][i9] *= (++i1);
                    f1 += f2;
                }
                l1 = (++i1);
                sFld -= (short)(l1 % (i8 | 1));
            }
            break;
        case 169:
            l1 = (long)((--i8) * fArrFld[i - 1]);
            break;
        case 234:
            l1 = (i7 + (i1--));
            break;
        case 135:
            i8 |= (int)((lArr1[i] - (i1 - i)) * -130);
        case 181:
            l1 &= i8;
            break;
        case 150:
            i10 += (i * i);
            break;
        case 442:
            i8 += (int)(-186L + (i * i));
            break;
        case 306:
            i10 = i7;
            break;
        case 392:
            f1 += (float)(((d1++) - (++iArr1[i + 1][i])) + ((f1 - -5L) + i8));
            break;
        case 313:
            f1 = (((-(i9 + -13)) * i8) * (l1--));
            break;
        case 447:
            l2 += i11;
        case 372:
            iArr1[i][i + 1] += ((i11 <<= by2) * Math.min((int)(-(i1 * l1)), (int)(-8634453139623577833L << (3471292126L
                + (i8 += (int)l1)))));
            break;
        case 300:
            i1 >>= (iMeth(d1, (long)(i7 * d1)) + (++i11));
            break;
        case 287:
            i8 = (int)((i7 - (-(i - l2))) - (--l2));
        case 240:
            l2 *= (i10++);
            break;
        case 182:
            i8 = (int)(((i1 + l1) + (l2 * i7)) * ((iArr1[i + 1][i] += sFld) + (i10 - i9)));
        case 422:
            l2 >>= (((l5 * i8) - (i11 + l2)) + (--by2));
            break;
        case 144:
            i15 -= ((3 + (6835 - i7)) + iArr1[i][i + 1]);
            break;
        case 226:
            i15 <<= (++i16);
        case 279:
            i17 -= (((i10--) - (i8 |= by2)) - Math.abs((int)(231L - (i10 + -1174475926L))));
            break;
        case 124:
            i15 = ((-(i17 * i)) * (-(--i8)));
            break;
        case 200:
            i17 += (i + iFld);
            break;
        case 439:
            i15 = (int)(((l2 += i9) - (-1760716079396099515L - (73.473F - sFld))) + (fArrFld[i]++));
            break;
        case 448:
            if (Math.max(i7, iMeth(100 + l5, Math.max(l1, l5))) < ((sFld * (f1 + i18)) + iArr1[i + 1][i])) continue;
        case 429:
            i1 = -14;
            break;
        case 305:
            l2 *= (((i1 + -99L) * 4L) + (i15++));
        case 363:
            iArr1[i + 1][i - 1] -= (int)((f1 - (iFld--)) * (i8--));
        case 290:
            b1 = (l6 != (--i15));
            break;
        case 407:
            i10 -= iFld;
            break;
        case 349:
            i19 >>= 42862;
            break;
        case 362:
            i20 *= (i21--);
            break;
        case 149:
            i21 = (-(byFld++));
            break;
        case 139:
            d1 = d1;
            break;
        case 385:
            d1 -= i;
            break;
        case 347:
            l5 -= (i15 <<= iArr1[i][i - 1]);
            break;
        case 122:
            d1 -= ((++iArr1[(i17 >>> 1) % N][i + 1]) + (--iArr1[i - 1][i]));
        case 178:
            i15 += (int)(-6L + (i * i));
            break;
        case 257:
            i15 *= iMeth(d1--, (--by1) - (-10L * (i8 = (int)l1)));
            break;
        case 299:
            l1 = (i15 + (++i20));
            break;
        case 434:
            bArr[i + 1][i] = b1;
        case 282:
            i19 = (--i16);
            break;
        case 468:
            b1 = b1;
            break;
        case 193:
            lArr3[i] -= i17;
            break;
        case 239:
            i1 += (int)(-(f1 = (-(l5++))));
        case 308:
            fArrFld[i] -= (--l5);
            break;
        case 383:
            lArr3[i - 1] *= (long)((d1 * i11) + (-l1));
            break;
        case 381:
            iArr1[i][i - 1] = (i18++);
            break;
        case 232:
            iFld = (int)(((++iFld) + (f4 + iFld)) + i20);
            break;
        case 412:
            l1 += i;
            break;
        case 423:
            i11 = (iFld++);
            break;
        case 272:
            i16 += (((i * l2) + i19) - i17);
            break;
        case 341:
            d1 /= ((--l6) | 1);
        case 188:
            i1 += (int)(((-17054 + (i16 - i19)) >>> (long)(i17 - d1)) / (Math.max(l5++, lArr3[i]++) | 1));
            break;
        case 172:
            bArr[i][i] = (bArr1[i][i - 1] != (d1 >= (--l2)));
            break;
        case 450:
            l2 += (i * i11);
        case 143:
            i16 = i16;
        case 256:
            i18 %= (int)((long)(((-3 + (l1 * 242L)) + (-13 - (-112 - f1))) - (d1++)) | 1);
            break;
        case 173:
            d1 -= (((l5--) + i1) + ((i19--) - (iArr3[i + 1]++)));
            break;
        case 152:
            iArr1[i][i] >>= Math.max((int)(Math.abs(i7) - d1), (int)((++i11) - (-120.73731 + i15)));
            break;
        case 370:
            iFld -= sFld;
            break;
        case 168:
            i16 += i;
            break;
        case 154:
            if ((i15++) > (((l2 - 12) % ((33887 - (sFld + 41)) | 1)) & ((i15 + i8) + l2))) break;
            break;
        case 185:
            i20 = (int)Math.min(l5, (i17 - -4214499309L) + (-2 * i11));
            break;
        case 134:
            i15 += ((long)i ^ (long)i8);
            break;
        case 432:
            f1 -= i21;
            break;
        case 175:
            i8 >>= (--i10);
            break;
        default:
            i11 += i;
        }
    } while (++i < 91);

    System.out.println("i i1 f1 = " + i + "," + i1 + "," + Float.floatToIntBits(f1));
    System.out.println("i7 i8 d1 = " + i7 + "," + i8 + "," + Double.doubleToLongBits(d1));
    System.out.println("l1 by1 by2 = " + l1 + "," + by1 + "," + by2);
    System.out.println("i9 f2 i10 = " + i9 + "," + Float.floatToIntBits(f2) + "," + i10);
    System.out.println("l2 i11 l5 = " + l2 + "," + i11 + "," + l5);
    System.out.println("i15 i16 i17 = " + i15 + "," + i16 + "," + i17);
    System.out.println("i18 b1 l6 = " + i18 + "," + (b1 ? 1 : 0) + "," + l6);
    System.out.println("i19 i20 i21 = " + i19 + "," + i20 + "," + i21);
    System.out.println("f4 iArr1 dArr = " + Float.floatToIntBits(f4) + "," + checkSum(iArr1) + "," +
        Double.doubleToLongBits(checkSum(dArr)));
    System.out.println("byArr lArr1 bArr = " + checkSum(byArr) + "," + checkSum(lArr1) + "," + checkSum(bArr));
    System.out.println("lArr3 bArr1 iArr3 = " + checkSum(lArr3) + "," + checkSum(bArr1) + "," + checkSum(iArr3));

    System.out.println("sFld iFld byFld = " + sFld + "," + iFld + "," + byFld);
    System.out.println("fArrFld = " + Double.doubleToLongBits(checkSum(fArrFld)));

    System.out.println("byMeth_check_sum: " + byMeth_check_sum);
    System.out.println("iMeth_check_sum: " + iMeth_check_sum);
}
}
