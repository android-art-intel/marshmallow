/*
 * Copyright (C) 2015 Intel Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by Dalvik Fuzzer tool (3.5.001). Tue Jan 13 04:41:00 2015
package OptimizationTests.regression.test1158;

import OptimizationTests.regression.shared.*;

public class Main extends FuzzerUtils {

    public static final int N = 100;


public static void main(String[] strArr) {

    int i=11, i1=-32, i2=-13, i3=-11, i4=203, i5=11, i6=33610, i7=11, iArr[]=new int[N];
    byte by=-81;
    short s=7778;
    boolean b=false;
    double d=-1.25652, dArr[][]=new double[N][N];
    float f=-2.255F;
    long l=-1681448476L;

    init(iArr, -214);
    init(dArr, -74.122505);

    for (i = 2; i < 84; ++i) {
        i1 -= (i1 + ((i1 = i) - i1));
        i1 = (int)(iArr[i] + ((i * -4) - (i * -51710L)));
        i1 += (i | l);
    }
    for (i2 = 1; i2 < 94; i2++) {
        for (i3 = 1; i3 < i2; ++i3) {
            i4 = 85;
            do {
                i1 /= (int)((long)(f - (i4 + (i1 + i4))) | 1);
                i5 = (i + -41013);
                f *= f;
                dArr[i4 - 1][i3] += (i + i4);
                l %= ((((l - i) - iArr[i2 + 1]) + ((i6 + i) + i3)) | 1);
                f = Math.abs(l++);
                l &= iArr[i2 - 1];
                i5 += i4;
                i5 >>>= (int)(15761L * l);
            } while (--i4 > 0);
            switch ((i2 % 1) + 3) {
            case 3:
                f *= (((l + by) - (l + i)) - (-l));
            }
            s -= (short)(i7 - (++i6));
        }
        i6 -= (s--);
        d *= (~(l + Math.min(1675237694L, l)));
        f += (i7++);
        b = (b || (b = (27717 != (i3 - by))));
        d = (i7++);
        i7 = (by++);
    }

    System.out.println("i i1 l = " + i + "," + i1 + "," + l);
    System.out.println("i2 i3 i4 = " + i2 + "," + i3 + "," + i4);
    System.out.println("f i5 i6 = " + Float.floatToIntBits(f) + "," + i5 + "," + i6);
    System.out.println("by s i7 = " + by + "," + s + "," + i7);
    System.out.println("d b iArr = " + Double.doubleToLongBits(d) + "," + (b ? 1 : 0) + "," + checkSum(iArr));
    System.out.println("dArr = " + Double.doubleToLongBits(checkSum(dArr)));

}
}
