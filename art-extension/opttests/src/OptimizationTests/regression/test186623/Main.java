/*
 * Copyright (C) 2015 Intel Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by Dalvik Fuzzer tool (3.2.001). Sat Apr 12 02:31:15 2014
package OptimizationTests.regression.test186623;

import OptimizationTests.regression.shared.*;

public class Main extends FuzzerUtils {

    public static final int N = 500;

    public static double ape = -65.272;
    public static int yyk = 4439, n = 41086;

    public static void main(String[] w) {

        double y3 = -59.89, rqu = 54.545;
        int ry = 3873, e7l = 40329, l = -26833, z5v = 55842, gjk = 13432, bb = 63996, zsr = -44338, fm = -46938, kb4 = 40276, h9 = -37945, ln = 50510, iv8 = -37060, a[] = new int[N], i[] = new int[N];
        short c = -20878, c3 = -12006;
        long gm = -2649912772175470382L, pdo = 4643874230588094281L, b = -7786193358894577474L, x1[] = new long[N], gc[] = new long[N];
        float sb = -66.672F, zr = -60.672F;
        byte gc7 = -64, piu = -2;

        init(x1, 1193523700335146962L);
        init(a, 2855);
        init(i, 62687);
        init(gc, 4929562298915467960L);

        for (ry = 19; ry < 426; ry++) {
            x1[ry] = ((long) (sb + (ry - gm)) << (long) ((sb++) + (64982 - (a[ry + 1]--))));
            e7l = (e7l++);
            for (yyk = 322; yyk > 4; --yyk) {
                for (l = 5; l < 271; ++l) {
                    z5v += (((gc7 >> 12775) + (-ry)) ^ (piu + l));
                }
                pdo |= (((l - gjk) % ((bb * pdo) | 1)) + zsr);
                gjk -= (int) (((-(16506 + c)) + (-15.408F * fm)) - ((kb4 >> -2366914191974238361L) * (sb++)));
                i[yyk - 1] *= bb;
                y3 -= (-((pdo + l) + (zsr / (n | 1))));
            }
            gc[ry - 1] = (-(i[ry]--));
            bb += (int) (b + ((l * e7l) + (-(rqu -= ape))));
        }
        for (h9 = 8; h9 < 487; h9++) {
            ln -= (int) ((-z5v) % ((long) (c3 + (zsr - zr)) | 1));
        }
        iv8 = -51167;

        System.out.println("ry sb gm = " + ry + "," + Float.floatToIntBits(sb)
                + "," + gm);
        System.out.println("e7l l z5v = " + e7l + "," + l + "," + z5v);
        System.out.println("gc7 piu pdo = " + gc7 + "," + piu + "," + pdo);
        System.out.println("gjk bb zsr = " + gjk + "," + bb + "," + zsr);
        System.out.println("c fm kb4 = " + c + "," + fm + "," + kb4);
        System.out.println("y3 b rqu = " + Double.doubleToLongBits(y3) + ","
                + b + "," + Double.doubleToLongBits(rqu));
        System.out.println("h9 ln c3 = " + h9 + "," + ln + "," + c3);
        System.out.println("zr iv8 x1 = " + Float.floatToIntBits(zr) + ","
                + iv8 + "," + checkSum(x1));
        System.out.println("a i gc = " + checkSum(a) + "," + checkSum(i) + ","
                + checkSum(gc));

        System.out.println("yyk n ape = " + yyk + "," + n + ","
                + Double.doubleToLongBits(ape));
    }
}
