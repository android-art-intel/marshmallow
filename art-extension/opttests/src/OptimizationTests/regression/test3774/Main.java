/*
 * Copyright (C) 2015 Intel Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by Android Runtime Fuzzer tool (4.1.002). Wed Apr  6 16:28:03 2016
// srand = 19266920228993520633624445921365323810467126865147101551628938941421

package OptimizationTests.regression.test3774;

import OptimizationTests.regression.shared.*;

public class Main extends FuzzerUtils {

    public static final int N = 100;

    public static long instanceCount=2931986814152668683L;
    public static long lArrFld[]=new long[N];
    public static double dArrFld[]=new double[N];

    static {
        init(Main.lArrFld, 441039151L);
        init(Main.dArrFld, 2.14189);
    }

public static void main(String[] strArr) {

    float f=-61.890F;
    Cls O=new Cls();
    double dArr[]=new double[N];
    int i=-58914, i1=-3869, i2=-234, i3=20691, i4=-61493, iArr[]=new int[434202];

    init(iArr, -14045);
    init(dArr, -118.86706);
    init(Cls.OFld.fArrFld, 0.835F);

    for (i = 4; i < 82; ++i) {
        double d=-1.52450;
        for (i1 = 1; i1 < 59; i1++) {
            f = 1;
            do {
                i2 = (int)(-Main.instanceCount);
                iArr = (iArr = (iArr = iArr));
                Cls.fFld /= ((++i2) | 1);
                Main.lArrFld[i1] >>= ((Cls.OFld.byFld & i2) + (i - (i + i)));
            } while (++f < 9);
            if (Cls.fFld == (i2++)) continue;
            for (i3 = 1; i3 < 56; i3++) {
                iArr = (iArr = (iArr = (iArr = iArr)));
            }
            Cls.OFld.iFld += (i1 ^ i3);
            Cls.OFld.iFld -= (++iArr[i1]);
            Cls.OFld.iFld += (((i1 * i) + i) - i);
        }
        for (i4 = 4; i4 < 66; i4++) {
            iArr[i4 - 1] = (-((i4 * 223) % (Cls.OFld.iFld | 1)));
            iArr[i] *= (--Cls.OFld.iFld);
            Cls.OFld.iFld += (((i4 * O.iFld1) + Main.instanceCount) - Cls1.instanceCount);
            O.iFld1 = i2;
            dArr = (dArr = (Main.dArrFld = (dArr = double1array(N, (double)1.101024))));
            iArr[i4 + 1] -= (int)Cls1.instanceCount;
            Cls.OFld.iFld += ((Cls.OFld.iFld++) * (O.iFld1--));
        }
        if (((iArr[i] - -194) != 36) & ((Cls1.instanceCount + Math.min(Cls.instanceCount, Main.instanceCount)) ==
            (-27343 + (i2 = Cls.OFld.iFld)))) {
            i2 >>>= (Cls.OFld.byFld++);
            i2 *= 5;
            Cls.OFld.byFld -= (byte)(d - (Cls.fFld % ((Main.instanceCount << i) | 1)));
        } else if (((-(-96 - (Main.instanceCount >> -34761))) - ((Cls.OFld.byFld--) * Cls.OFld.fArrFld[i])) !=
            ((-(Cls1.instanceCount--)) - -2.1002F)) {
            iArr = (iArr = (iArr = iArr));
        } else {
            iArr = (iArr = (iArr = (iArr = iArr)));
        }
    }

    System.out.println("i i1 f = " + i + "," + i1 + "," + Float.floatToIntBits(f));
    System.out.println("i2 Cls.OFld.byFld i3 = " + i2 + "," + Cls.OFld.byFld + "," + i3);
    System.out.println("Cls.OFld.iFld i4 O.iFld1 = " + Cls.OFld.iFld + "," + i4 + "," + O.iFld1);
    System.out.println("iArr dArr Cls.OFld.fArrFld = " + checkSum(iArr) + "," + Double.doubleToLongBits(checkSum(dArr))
        + "," + Double.doubleToLongBits(checkSum(Cls.OFld.fArrFld)));
    System.out.println("O Cls Cls1 = " + checkSum(O) + "," + Cls.instanceCount + "," + Cls1.instanceCount);

    System.out.println("Main.instanceCount Main.lArrFld Main.dArrFld = " + Main.instanceCount + "," +
        checkSum(Main.lArrFld) + "," + Double.doubleToLongBits(checkSum(Main.dArrFld)));
    System.out.println("Cls Cls1 = " + Cls.instanceCount + "," + Cls1.instanceCount);
}
}
class Cls extends FuzzerUtils {

    public static final int N = 100;

    public static long instanceCount=1396977746L;
    public static float fFld=120.595F;
    public int iFld1=25337;
    public static Cls1 OFld=new Cls1();

}
class Cls1 extends FuzzerUtils {

    public static final int N = 100;

    public static long instanceCount=6L;
    public byte byFld=-49;
    public volatile int iFld=10;
    public float fArrFld[]=new float[739995];

}
//DEBUG  Cls ->  Cls main Test
//DEBUG  Test ->  Test
//DEBUG  Cls1 ->  Cls1 main Test Cls
//DEBUG  main ->  main Test
//DEBUG  Depth = 3
//DEBUG  Classes = 3
//DEBUG  static objects = {Cls1: [, Cls.OFld], }
