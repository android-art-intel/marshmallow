/*
 * Copyright (C) 2015 Intel Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by Dalvik Fuzzer tool (3.5.001). Sun Feb 22 23:35:02 2015
package OptimizationTests.regression.test1569;

import OptimizationTests.regression.shared.*;

public class Main extends FuzzerUtils {

    public static final int N = 100;

    public static int iFld=-1;
    public static float fFld=1.389F;

    public static long iMeth_check_sum = 0;

public static int iMeth() {

    short sArr[]=new short[N];
    long l1=-4067861785L, l2=2895621494L, lArr1[]=new long[N];
    float f1=0.181F, fArr[]=new float[N];
    double d1=-2.20705;
    int i3=-12, i4=27, i5=-1, i6=-6, i7=230, iArr2[]=new int[N];

    init(sArr, (short)-17026);
    init(iArr2, -13);
    init(fArr, -2.80F);
    init(lArr1, 3378773206L);

    i3 = 89;
    do {
        sArr[i3] = (short)(i4 - (-(i4 + l1)));
    } while (--i3 > 0);
    switch ((((--i4) >>> 1) % 2) + 98) {
    case 98:
        for (i5 = 3; i5 < 97; ++i5) {
            iArr2[i5] >>= (int)(l2 -= i5);
        }
        for (i6 = 4; i6 < 95; ++i6) {
            l1 *= (long)(((-(l1 + i6)) + (237 + (l2 - d1))) + ((i4 + l2) + i6));
            fArr[i6 - 1] += (f1 -= ((i4 + f1) - (fFld + -24108)));
        }
        iFld = 1;
        do {
            l2 += (long)(((i3 + d1) * (13 + (f1 - l2))) - ((i5 * i4) + (l1++)));
            l2 *= (++lArr1[iFld]);
        } while (++iFld < 88);
        break;
    case 99:
        f1 += (i6 * i7);
        break;
    }
    long meth_res = i3 + i4 + l1 + i5 + l2 + i6 + Double.doubleToLongBits(d1) + Float.floatToIntBits(f1) + i7 +
        checkSum(sArr) + checkSum(iArr2) + Double.doubleToLongBits(checkSum(fArr)) + checkSum(lArr1);
    iMeth_check_sum += meth_res;
    return (int)meth_res;
}

public static void main(String[] strArr) {

    long l=-22123L, lArr[]=new long[N];
    double d=100.104566, d2=89.20552;
    float f=-2.241F, fArr1[][]=new float[N][N];
    int i=-8613, i1=-11, i2=-56603, i8=-28543, i9=-6, iArr[]=new int[N], iArr1[]=new int[N];
    boolean b=true;

    init(iArr, 176);
    init(lArr, 6L);
    init(iArr1, 148);
    init(fArr1, 3.0F);

    for (i = 4; i < 87; i++) {
        i1 += (int)l;
        for (i2 = 1; i2 < 14; ++i2) {
            b = ((--iArr[i - 1]) != ((i1 + l) + i));
            i1 += (i2 + i);
            try {
                i1 = (i2 / 17);
                i1 = (i2 / -94);
                iArr[i - 1] = (i % 54);
            } catch (ArithmeticException a_e) {}
            i1 *= (i1 = (i1++));
            f += Float.intBitsToFloat((int)((l - i) >> lArr[i - 1]));
        }
        iArr[i - 1] <<= (int)(((++i1) + Math.abs(f)) % (i2 | 1));
        l = (iArr[i + 1]++);
        i1 >>= i1;
        try {
            i1 = (i % i2);
            iArr1[i + 1] = (i % -9);
            i1 = (i1 / 28653);
        } catch (ArithmeticException a_e) {}
        i1 = Integer.reverseBytes(23452);
        for (d = 1; d < 9; ++d) {
            i1 -= (int)(-f);
            l = ((8 - (-(l++))) * ((i - -14L) +  Float.floatToIntBits(f)));
            lArr[i] = i1;
        }
        i1 = (int)(((i1 * l) - (i1++)) % (iMeth() | 1));
    }
    for (i8 = 86; i8 > 5; i8 -= 3) {
        try {
            i1 -= (i1++);
            d2 += -56;
            i9 = 1;
            do {
                iArr1[i9 + 1] = (int)-30L;
            } while (++i9 < 16);
            i1 ^= (int)(Math.abs(l / (i1 | 1)) * (i1 = (int)(fArr1[i8][i8 - 1] += l)));
        }
        catch (NullPointerException exc) {
            fFld -= l;
        }
    }

    System.out.println("i i1 l = " + i + "," + i1 + "," + l);
    System.out.println("i2 b f = " + i2 + "," + (b ? 1 : 0) + "," + Float.floatToIntBits(f));
    System.out.println("d i8 d2 = " + Double.doubleToLongBits(d) + "," + i8 + "," + Double.doubleToLongBits(d2));
    System.out.println("i9 iArr lArr = " + i9 + "," + checkSum(iArr) + "," + checkSum(lArr));
    System.out.println("iArr1 fArr1 = " + checkSum(iArr1) + "," + Double.doubleToLongBits(checkSum(fArr1)));

    System.out.println("fFld iFld = " + Float.floatToIntBits(fFld) + "," + iFld);

    System.out.println("iMeth_check_sum: " + iMeth_check_sum);
}
}
