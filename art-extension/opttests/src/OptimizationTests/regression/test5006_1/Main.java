/*
 * Copyright (C) 2015 Intel Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by Dalvik Fuzzer tool (3.4.001). Sun Dec 21 12:15:15 2014
package OptimizationTests.regression.test5006_1;

import OptimizationTests.regression.shared.*;

public class Main extends FuzzerUtils {

    public static final int N = 100;

    public static long th=7193235554704450854L;

    public static long ne7_check_sum = 0;

public static int ne7(int kh) {

    double f=-87.145, b[]=new double[N];
    float g6l=96.226F;
    int e=55989, ls7=43826, m=-720, qol=58473, jx[]=new int[N];
    byte ph=-79;

    init(b, -5.99);
    init(jx, -9798);

    for (e = 4; e < 98; ++e) {
        kh += (int)(((b[e]--) * th) - ((th - e) * (ph + e)));
    }
    ls7 = 77;
    do {
        kh -= (jx[ls7]--);
        m = 1;
        do {
            kh = m;
            kh = (int)f;
            kh += ((long)m ^ (long)kh);
            kh |= (++kh);
            th -= (--th);
            g6l *= -10399;
        } while (++m < 12);
        qol = m;
    } while (--ls7 > 0);
    long meth_res = kh + e + ph + ls7 + m + Double.doubleToLongBits(f) + Float.floatToIntBits(g6l) + qol +
        Double.doubleToLongBits(checkSum(b)) + checkSum(jx);
    ne7_check_sum += meth_res;
    return (int)meth_res;
}

public static void main(String[] na) {

    long aw[]=new long[N];
    double iac=34.17;
    float y21=62.137F, eq[]=new float[N];
    int t2k=8934, u3=-28856, ayp=22745, una=-51124, yiz=11672, c0p=-62826, d3[]=new int[N], p[]=new int[N];
    byte muu=75;

    init(d3, -40828);
    init(aw, 2497089154487537126L);
    init(eq, -93.475F);
    init(p, -4181);

    t2k = 1;
    while ((t2k += 3) < 84) {
        u3 &= (u3--);
        u3 <<= (int)((--u3) - (-(68.577 - (t2k - u3))));
        th -= ne7(d3[t2k - 1]);
        aw[t2k - 1] *= th;
        th += (muu + th);
        try {
            u3 = (t2k % u3);
            u3 = (u3 / u3);
            u3 = (u3 / u3);
        } catch (ArithmeticException a_e) {}
        u3 = (int)((iac * eq[t2k - 1]) * 12611);
        d3[t2k - 1] += d3[t2k];
        u3 *= (int)((t2k * (33855 - (6153253234474198177L * (t2k * 104.624F)))) + (u3--));
    }
    for (ayp = 2; ayp < 96; ++ayp) {
        for (una = 3; una < 78; una++) {
            for (yiz = ayp; yiz < 64; yiz++) {
                aw[una - 1] = (--aw[ayp + 1]);
            }
            u3 = yiz;
            p[ayp - 1] = yiz;
            u3 = (int)(d3[una - 1] + (iac + (u3 + una)));
            u3 <<= (int)(((y21 + 1641491913860397248L) + (una + th)) * (-iac));
            if (false) continue;
        }
        d3[ayp] -= (++u3);
        u3 = (int)th;
        u3 = d3[ayp + 1];
    }
    for (c0p = 3; c0p < 84; ++c0p) {
        u3 += (c0p * c0p);
        y21 += (u3 = (u3--));
    }

    System.out.println("t2k u3 muu = " + t2k + "," + u3 + "," + muu);
    System.out.println("iac ayp una = " + Double.doubleToLongBits(iac) + "," + ayp + "," + una);
    System.out.println("yiz y21 c0p = " + yiz + "," + Float.floatToIntBits(y21) + "," + c0p);
    System.out.println("d3 aw eq = " + checkSum(d3) + "," + checkSum(aw) + "," + Double.doubleToLongBits(checkSum(eq)));
    System.out.println("p = " + checkSum(p));

    System.out.println("th = " + th);

    System.out.println("ne7_check_sum: " + ne7_check_sum);
}
}
