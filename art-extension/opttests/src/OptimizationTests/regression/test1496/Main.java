/*
 * Copyright (C) 2015 Intel Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by Dalvik Fuzzer tool (3.5.001). Thu Feb 12 13:24:21 2015
package OptimizationTests.regression.test1496;

import OptimizationTests.regression.shared.*;

public class Main extends FuzzerUtils {

    public static final int N = 100;


public static void main(String[] strArr) {

    float f=-21.372F, f1=84.634F;
    byte byArr[]=new byte[N];
    long l=-1898725380150059041L, l1=-3L, lArr[]=new long[N];
    int i=64792, i1=52, i2=15595, i3=40132, i4=229, iArr[][]=new int[N][N];
    short s=-12897;
    boolean b=true;
    double d=-2.54649;

    init(lArr, 11L);
    init(iArr, -3);
    init(byArr, (byte)82);

    i = 1;
    do {
        i1 -= i1;
    } while (++i < 76);
    for (i2 = 5; i2 < 97; i2++) {
        b = b;
        l >>>= (((i - i) * Integer.reverseBytes(i2)) + ((i1 + 1L) - 5288));
        lArr[i2] %= ((3 * (--i1)) | 1);
        i1 |= (int)((i1--) - ((--l) + (i1 - i2)));
        i1 = (int)(f++);
        f1 = 1;
        do {
            if (b) continue;
            s -= (short)((i1 * (l + i1)) + i);
            lArr[(int)(f1 + 1)] *= (lArr[i2]++);
            l = -64709;
        } while (++f1 < 56);
    }
    for (i3 = 1; i3 < 89; i3++) {
        for (d = 1; d < 16; d++) {
            f -= i3;
            iArr[(int)(d + 1)][(int)(d)] = (++iArr[(int)(d)][i3]);
        }
        try {
            iArr[i3][i3 + 1] *= (int)((i1--) + (-(l >> i2)));
            iArr[i3 - 1][i3] -= (int)((l * (--i1)) + ((i3 * -34) - (i1 * i3)));
            l1 *= (long)(f1 - (-(l * -1.382F)));
            for (i4 = 1; i4 < 2; ++i4) {
                iArr[i4 - 1][i4 - 1] += i1;
                i1 &= i1;
                byArr[i3] += (byte)(i1--);
            }
        }
        catch (NullPointerException exc) {
            i1 >>= i3;
        }
        catch (ArithmeticException exc1) {
            i1 += (((i3 * f) + i3) - i1);
        }
    }

    System.out.println("i i1 i2 = " + i + "," + i1 + "," + i2);
    System.out.println("b l f = " + (b ? 1 : 0) + "," + l + "," + Float.floatToIntBits(f));
    System.out.println("f1 s i3 = " + Float.floatToIntBits(f1) + "," + s + "," + i3);
    System.out.println("d l1 i4 = " + Double.doubleToLongBits(d) + "," + l1 + "," + i4);
    System.out.println("lArr iArr byArr = " + checkSum(lArr) + "," + checkSum(iArr) + "," + checkSum(byArr));

}
}
