/*
 * Copyright (C) 2015 Intel Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by Dalvik Fuzzer tool (3.3.001). Fri May 16 14:24:56 2014
package OptimizationTests.regression.test195969;

import OptimizationTests.regression.shared.*;

public class Main extends FuzzerUtils {

public static final int N = 300;


public static void main(String[] rn) {

    short n=-2851;
    long db=4575220110409908749L, rbz=-8803512006740991999L, vt[]=new long[N];
    boolean l=false;
    float s=76.106F, l4=-79.191F, sb[]=new float[N];
    byte w=23, bdb[]=new byte[N], mv[]=new byte[N];
    double m=-127.685;
    int qd=13472, of=14605, xls=-21348, q=-11507, de=52634, y6=43176, d=-55089, u[][]=new int[N][N];

    init(vt, -1361332319023898365L);
    init(u, 43595);
    init(bdb, (byte)31);
    init(mv, (byte)13);
    init(sb, -121.367F);

    for (qd = 234; qd > 7; --qd) {
        of += (int)((++of) % (((of--) * (db++)) | 1));
        vt[qd + 1] = (long)(vt[qd + 1] += (long)((db >>> of) + m));
    }
    for (xls = 284; xls > 5; --xls) {
        l = l;
        vt[xls + 1] -= xls;
        vt[xls - 1] += (--u[xls][xls - 1]);
        q = 107;
        do {
            bdb[xls] += (byte)(u[q][xls + 1]--);
            for (de = 11; de < 272; de++) {
                u[de][xls - 1] = (w - ((++of) % ((de << of) | 1)));
                of -= (int)(de + ((n + w) * (q + db)));
                s *= (s--);
                m = (((n - of) + l4) + ((mv[xls - 1]++) + de));
                sb[xls + 1] = vt[q - 1];
                of = (int)(((of * de) * (q - db)) / ((++db) | 1));
                of = u[xls - 1][xls + 1];
            }
        } while ( --q > 0 );
        of -= (int)rbz;
        y6 = 119;
        while ( --y6 > 0 ) {
            of -= (int)(17440 - ((35980 / ((long)(++sb[y6 + 1]) | 1)) + -14551));
            for (d = 5; d < 181; ++d) {
                of = (of--);
            }
            l4 *= (u[y6 - 1][y6] + ((-3649758854298211555L + (n--)) + rbz));
            db += q;
        }
        of -= (int)(++l4);
    }

    System.out.println("qd of db = " + qd + "," + of + "," + db);
    System.out.println("m xls l = " + Double.doubleToLongBits(m) + "," + xls + "," + l);
    System.out.println("q de w = " + q + "," + de + "," + w);
    System.out.println("n s l4 = " + n + "," + Float.floatToIntBits(s) + "," + Float.floatToIntBits(l4));
    System.out.println("rbz y6 d = " + rbz + "," + y6 + "," + d);
    System.out.println("vt u bdb = " + checkSum(vt) + "," + checkSum(u) + "," + checkSum(bdb));
    System.out.println("mv sb = " + checkSum(mv) + "," + Double.doubleToLongBits(checkSum(sb)));
    
}
}
