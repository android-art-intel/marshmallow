/*
 * Copyright (C) 2015 Intel Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by Dalvik Fuzzer tool (3.4.001). Mon Nov 10 06:43:04 2014
package OptimizationTests.regression.test974;

import OptimizationTests.regression.shared.*;

public class Main extends FuzzerUtils {

    public static final int N = 100;

    public static long z9 = 3477043618388408336L;
    public static int br = -9310, kke[][] = new int[N][N];

    static {
        init(kke, -32960);
    }

    public static void main(String[] s7t) {

        short pg1 = -16754, y[] = new short[N];
        long i9j = 1122689990634329665L, q[] = new long[N];
        float ijw = -101.552F, d4p[] = new float[N];
        byte ars = 60;
        double brz = 112.660, dm[] = new double[N];
        int zy = -43353, n = -32038, ek = 27555, p = 16124, dol = -1490, v90[][] = new int[N][N], g5a[] = new int[N];

        init(dm, 113.413);
        init(d4p, 92.634F);
        init(q, 2172251402201425471L);
        init(y, (short) 11250);
        init(v90, 12317);
        init(g5a, -30663);

        for (zy = 3; zy < 91; zy++) {
            pg1 = (short) zy;
            n += (int) (((--dm[zy - 1]) + (--n)) * ((ek * ek) * 111.498F));
            ijw *= (((ek + ijw) * (ijw + zy)) + (d4p[zy - 1]--));
            i9j += (zy ^ zy);
            q[zy - 1] += ((n++) + ((q[zy - 1]++) - (ek >>= p)));
            p |= (int) ((long) ((p + i9j) * (ek / -49.669)) >>> (++y[zy + 1]));
        }
        for (br = 3; br < 77; ++br) {
            ek = (int) (i9j + (i9j++));
            n *= (v90[br + 1][br]--);
            v90[br + 1][br] <<= (int) ((--i9j) - (v90[br - 1][br + 1] - (n = (int) 45.835F)));
            if (ek != (q[br]++)) {
                p += p;
                q[br - 1] <<= (n++);
                ijw -= (float) ((--brz) - (v90[br + 1][br] * (28300 - (zy ^ 42086))));
            } else {
                ijw += (((z9 + ek) + (-33402 - kke[br][br])));
            }
            kke[br - 1][br] = ((~(--ars)) - ((p = p) * (v90[br - 1][br]++)));
            g5a[br - 1] %= (int) ((long) ((-zy) - ((ek * i9j) - (br / ((long) ijw | 1)))) | 1);
            switch ((br % 1) + 91) {
            case 91:
                dol = 91;
                do {
                    ijw -= (float) (brz * ((ars + -3807134105006860181L) * (++n)));
                    ek += (dol + n);
                    ijw *= (ek++);
                    p *= (int) (((++brz) - (--n)) + (pg1 + brz));
                } while (--dol > 0);
            }
        }

        System.out.println("zy pg1 n = " + zy + "," + pg1 + "," + n);
        System.out.println("ek ijw i9j = " + ek + ","
                + Float.floatToIntBits(ijw) + "," + i9j);
        System.out.println("p brz ars = " + p + ","
                + Double.doubleToLongBits(brz) + "," + ars);
        System.out.println("dol dm d4p = " + dol + ","
                + Double.doubleToLongBits(checkSum(dm)) + ","
                + Double.doubleToLongBits(checkSum(d4p)));
        System.out.println("q y v90 = " + checkSum(q) + "," + checkSum(y) + ","
                + checkSum(v90));
        System.out.println("g5a = " + checkSum(g5a));

        System.out
                .println("br z9 kke = " + br + "," + z9 + "," + checkSum(kke));
    }
}
