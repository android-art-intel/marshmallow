/*
 * Copyright (C) 2015 Intel Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by Dalvik Fuzzer tool (3.2.001). Mon Apr 21 11:30:47 2014
package OptimizationTests.regression.test188778;

import OptimizationTests.regression.shared.*;

class UserDefinedException extends RuntimeException {
    public int field;
}

public class Main extends FuzzerUtils {

public static final int N = 200;

    public static int mlc=-33551, ds=-9959, wav=-32028;

public static void main(String[] qhn) {

    int qjq=-4006, lkd=-64499, u=19978, n=-34113, f=-15088, b3=48786, gt=60152, g=-22386, x1x=-29950, x5x=17469,
        tf=-4895, mzf=-60549, j3=30689, b[]=new int[N], ba7[]=new int[N];
    float z=109.647F, z1=-93.330F, spt[]=new float[N];
    byte o[]=new byte[N];
    long r5=3566372646428914325L, y0c=-5765755490809457455L;
    short t=20802;
    double vam[]=new double[N];

    init(b, -15804);
    init(vam, -2.1013);
    init(o, (byte)98);
    init(spt, 125.473F);
    init(ba7, 27785);

    for (mlc = 17; mlc < 188; ++mlc) {
        for (qjq = mlc; qjq < 145; qjq++) {
            z += qjq;
            try {
                try {
                    ds = (27395 % b[qjq + 1]);
                    ds = (lkd / -62465);
                    b[mlc - 1] = (qjq / lkd);
                } catch (ArithmeticException a_e) {}
                vam[mlc] -= (--ds);
                for (u = 1; u < qjq; ++u) {
                    try {
                        n = (mlc % -1408711742);
                        b[qjq] = (f / 113);
                        ds = (-236 % ds);
                    } catch (ArithmeticException a_e) {}
                    f >>= ((--lkd) + 30762);
                    n <<= ((o[mlc - 1] -= (byte)(mlc + mlc)) - t);
                }
            }
            catch (UserDefinedException bk) {
                for (b3 = 5; b3 < 170; b3++) {
                    f += (int)(((-(-43686 * (-4424 + (-(spt[mlc + 1]++))))) - z) * (lkd + (20510 >> (-(gt / (b3 |
                        1))))));
                }
                ba7[mlc + 1] = ((ba7[mlc - 1]--) << ((lkd >> g) + (x1x * wav)));
                ba7[qjq] >>>= (int)((long)((x5x + tf) + (121.579 + (wav++))) ^ r5);
            }
            finally {
                r5 = ((mzf - (8732205707315220896L % ((6559 * (y0c * y0c)) | 1))) & (long)((z1--) * (-j3)));
            }
        }
    }

    System.out.println("qjq z lkd = " + qjq + "," + Float.floatToIntBits(z) + "," + lkd);
    System.out.println("u n f = " + u + "," + n + "," + f);
    System.out.println("t b3 gt = " + t + "," + b3 + "," + gt);
    System.out.println("g x1x x5x = " + g + "," + x1x + "," + x5x);
    System.out.println("tf r5 mzf = " + tf + "," + r5 + "," + mzf);
    System.out.println("y0c z1 j3 = " + y0c + "," + Float.floatToIntBits(z1) + "," + j3);
    System.out.println("b vam o = " + checkSum(b) + "," + Double.doubleToLongBits(checkSum(vam)) + "," + checkSum(o));
    System.out.println("spt ba7 = " + Double.doubleToLongBits(checkSum(spt)) + "," + checkSum(ba7));
    
    System.out.println("mlc ds wav = " + mlc + "," + ds + "," + wav);
}
}
