/*
 * Copyright (C) 2015 Intel Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by Dalvik Fuzzer tool (3.4.001). Mon Sep  8 19:55:49 2014
package OptimizationTests.regression.test600;

import OptimizationTests.regression.shared.*;

public class Main extends FuzzerUtils {

    public static final int N = 100;

    public static byte kex=80;

    public static long r7_check_sum = 0;
    public static long yjj_check_sum = 0;

public static void r7(int to, int r) {

    byte mc=-67;
    int y=-4805, d=-35802, vyc=44810;
    float c0=83.986F;
    long l7=771485304590352677L;
    double z=-80.136;

    for (y = 5; y < 96; ++y) {
        switch ((y % 2) + 17) {
        case 17:
            break;
        case 18:
            mc -= (byte)(--l7);
            r <<= (mc += (byte)(--to));
            if ((z--) < (-((l7 + l7) + (49626 + (++to))))) break;
        default:
            for (d = 1; d < 33; ++d) {
                vyc = 1;
                do {
                    r = (int)-4793379746510433919L;
                    r = (int)((-l7) - ((r - c0) - (48295 - (-(r - r)))));
                } while (++vyc < 18);
                r += (d * d);
                r += d;
                c0 -= (to--);
            }
        }
    }
    r7_check_sum += to + r + y + mc + l7 + Double.doubleToLongBits(z) + d + vyc + Float.floatToIntBits(c0);
}

public static void yjj(float n) {

    int g=20453, rhq=13153, m40=31380, slt=31309, qk1=34680;
    long y0g=-6797037426714431116L, un[]=new long[N];
    double vlv=8.481;

    init(un, 2346704074878133522L);

    for (g = 93; g > 1; --g) {
        if (((slt &= (int)(y0g--)) * 19576) <= (qk1++)) {
            for (rhq = g; rhq < 9; ++rhq) {
                y0g *= (++y0g);
                for (m40 = 1; m40 < 20; ++m40) {
                    slt = (int)(((slt++) - (m40 | y0g)) * (y0g--));
                    y0g = ((slt++) - g);
                    un[g - 1] ^= (long)(vlv + ((-3663248975646647913L - (un[m40 + 1]--)) + (619238727308490265L +
                        slt)));
                    kex = (byte)y0g;
                    slt = (int)7130186118854671266L;
                    y0g += (long)n;
                }
            }
            slt = (slt - g);
        } else {
            slt *= (int)(qk1 - ((4940736597648180267L + (slt++)) >>> (qk1 - slt)));
        }
    }
    yjj_check_sum += Float.floatToIntBits(n) + g + rhq + y0g + m40 + slt + Double.doubleToLongBits(vlv) + qk1 +
        checkSum(un);
}

public static void main(String[] i) {

    short yg=7244;
    boolean hv3=true;
    int e=49395, xl=-45680, ser=1035, q=-408, vv=-19982, j[]=new int[N], b[]=new int[N];
    float azp=31.718F;
    long gp=6292781010657512384L, dq=-585451492850242561L;
    double k0=-14.769;

    init(j, -4932);
    init(b, 11462);

    for (e = 2; e < 77; e += 3) {
        j[e - 1] >>= (--xl);
        j[e + 1] >>= (int)gp;
        for (ser = 2; ser < 34; ser++) {
            gp >>>= j[ser + 1];
            xl += (ser * ser);
            xl -= (++xl);
            xl = (int)(-((e + gp) + (e - ser)));
            j[e + 1] += (int)(++k0);
            xl += (ser - gp);
            xl = (int)(-(gp = b[ser + 1]));
        }
        q = 1;
        while (++q < e) {
            azp = (float)(k0++);
            if (hv3) {
                gp |= j[e];
            } else {
                vv = 1;
                do {
                    xl += (int)((-(azp * q)) - (gp * (vv - gp)));
                } while (++vv < 98);
            }
            xl >>>= (int)(--dq);
            xl = (-q);
        }
        xl <<= (xl--);
        gp += (++xl);
        j[e] = -19304;
        r7(xl + ((kex + e) * (-(yg - q))), 38031);
        yjj(azp);
    }
    yjj(azp);

    System.out.println("e xl gp = " + e + "," + xl + "," + gp);
    System.out.println("ser k0 q = " + ser + "," + Double.doubleToLongBits(k0) + "," + q);
    System.out.println("azp hv3 vv = " + Float.floatToIntBits(azp) + "," + (hv3 ? 1 : 0) + "," + vv);
    System.out.println("dq yg j = " + dq + "," + yg + "," + checkSum(j));
    System.out.println("b = " + checkSum(b));

    System.out.println("kex = " + kex);

    System.out.println("r7_check_sum: " + r7_check_sum);
    System.out.println("yjj_check_sum: " + yjj_check_sum);
}
}
