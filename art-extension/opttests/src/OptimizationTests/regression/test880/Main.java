/*
 * Copyright (C) 2015 Intel Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by Dalvik Fuzzer tool (3.4.001). Sun Nov 16 12:02:51 2014
package OptimizationTests.regression.test880;

import OptimizationTests.regression.shared.*;

public class Main extends FuzzerUtils {

    public static final int N = 100;


public static void main(String[] p) {

    short o=-11788;
    double wy=105.412, z[][]=new double[N][N];
    long ol=-4644451509252525873L, n=7820669979872039509L;
    boolean nt=true;
    float bf=-81.341F;
    int uj=-41276, qcj=44961, mvf=-11597, luh=34193, oa=-1255, y=-27450, wm[]=new int[N];

    init(wm, 48395);
    init(z, 3.986);

    uj = 1;
    while ((uj += 2) < 93) {
        qcj -= (int)(((wm[uj - 1]--) % ((uj << -253346266015996361L) | 1)) << -24265);
        for (mvf = 1; mvf < uj; mvf++) {
            for (luh = 4; luh < 87; ++luh) {
                qcj = (int)(oa - (wm[luh + 1] * (-41012 + bf)));
                bf = qcj;
                bf *= (oa--);
                ol += luh;
                qcj *= (int)(mvf - ((ol + qcj) + (n - qcj)));
                bf *= (mvf % (mvf | 1));
                switch ((mvf % 1) + 22) {
                case 22:
                    oa = (int)((++o) + ((1071393570813849144L + (n + mvf)) + (qcj + qcj)));
                    bf *= n;
                    break;
                }
                o += (short)y;
                oa *= (int)(wm[uj] - wy);
            }
            nt = false;
            qcj = (int)(z[uj - 1][mvf + 1]++);
            y = (int)((y - (uj + ol)) * bf);
            y += (((mvf * uj) + mvf) - luh);
            wy *= oa;
            y <<= ((-(--o)) * wm[mvf]);
            qcj += (((mvf * n) + oa) - uj);
        }
        y %= (int)(((54384 >> uj) * ((ol - -9097) * o)) | 1);
    }
    wm[(luh >>> 1) % N] = (qcj--);
    n -= (long)((wm[(uj >>> 1) % N] * (++y)) * ((y * bf) - (mvf + ol)));

    System.out.println("uj qcj mvf = " + uj + "," + qcj + "," + mvf);
    System.out.println("luh oa bf = " + luh + "," + oa + "," + Float.floatToIntBits(bf));
    System.out.println("ol n o = " + ol + "," + n + "," + o);
    System.out.println("y wy nt = " + y + "," + Double.doubleToLongBits(wy) + "," + (nt ? 1 : 0));
    System.out.println("wm z = " + checkSum(wm) + "," + Double.doubleToLongBits(checkSum(z)));

}
}
