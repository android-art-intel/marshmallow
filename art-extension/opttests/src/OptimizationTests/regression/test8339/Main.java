/*
 * Copyright (C) 2015 Intel Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by Dalvik Fuzzer tool (3.5.001). Fri Apr 17 20:12:26 2015
package OptimizationTests.regression.test8339;

import OptimizationTests.regression.shared.*;

public class Main extends FuzzerUtils {

    public static final int N = 100;


    public static long iMeth_check_sum = 0;

public static int iMeth(int i2) {

    short sArr[]=new short[N];
    byte by=4;
    double d1=2.108523;
    float f=80.902F, fArr[]=new float[N];
    long l1=7792847447537341543L, lArr[]=new long[N];
    int i3=97, i4=145, i5=44217;

    init(lArr, 14L);
    init(fArr, 13.122F);
    init(sArr, (short)19988);

    i3 = 1;
    do {
        for (i4 = 2; i4 < 58; i4++) {
            lArr[i4 + 1] -= (long)(((i5 * i3) * fArr[i4]) * (i5++));
            l1 = (long)(i5 -= (int)(--f));
            i2 *= (int)((--lArr[i3 - 1]) - l1);
            i2 = (int)d1;
            try {
                f -= l1;
            }
            catch (ArrayIndexOutOfBoundsException exc) {
                i2 *= i3;
            }
            catch (ArithmeticException exc1) {
                l1 += (((i4 * i3) + i5) - i3);
            }
            i5 <<= by;
            sArr[i4] -= (short)i5;
        }
    } while (++i3 < 94);
    long meth_res = i2 + i3 + i4 + i5 + l1 + Float.floatToIntBits(f) + Double.doubleToLongBits(d1) + by +
        checkSum(lArr) + Double.doubleToLongBits(checkSum(fArr)) + checkSum(sArr);
    iMeth_check_sum += meth_res;
    return (int)meth_res;
}

public static void main(String[] strArr) {

    boolean b=false;
    double d=-35.112869;
    long l=-1804292970055428026L;
    int i=-2, i1=9, i6=122, i7=-181, iArr[]=new int[N];

    init(iArr, 11);

    i = 1;
    while (++i < 79) {
        i1 = ((iArr[i - 1]--) + 15);
        i1 = (int)(i1 += (int)((i1 = (int)l) - (d + i)));
        i1 -= iMeth(iArr[i + 1]);
        i1 *= i;
        if (b = b) break;
        l = (long)((-(i - d)) - (iArr[i]--));
        i6 = (int)(((i6 + 23418) + (++d)) - i6);
        l += (long)1.78792;
    }
    i7 = 1;
    do {
        i6 += (i7 * i7);
    } while (++i7 < 98);

    System.out.println("i i1 l = " + i + "," + i1 + "," + l);
    System.out.println("d b i6 = " + Double.doubleToLongBits(d) + "," + (b ? 1 : 0) + "," + i6);
    System.out.println("i7 iArr = " + i7 + "," + checkSum(iArr));


    System.out.println("iMeth_check_sum: " + iMeth_check_sum);
}
}
