/*
 * Copyright (C) 2015 Intel Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by Dalvik Fuzzer tool (3.5.001). Fri Mar 20 04:13:51 2015
package OptimizationTests.regression.test1759;

import OptimizationTests.regression.shared.*;

public class Main extends FuzzerUtils {

    public static final int N = 100;

    public static float fArrFld[]=new float[N];
    public static int iFld=-231;
    public static boolean bArrFld[]=new boolean[N];

    static {
        init(fArrFld, 110.450F);
        init(bArrFld, false);
    }

    public static long bMeth_check_sum = 0;
    public static long fMeth_check_sum = 0;

public static boolean bMeth(long l1) {

    byte by1=96;
    float f1=0.706F;
    short s=21326, sArr[]=new short[N];
    long lArr[]=new long[N];
    int i4=-20362, i5=-33034, i6=-128, i7=-63441, i8=-98, i9=-5, iArr1[]=new int[N], iArr2[]=new int[N];
    double d1=1.64062;

    init(iArr1, -9);
    init(lArr, 22985L);
    init(sArr, (short)1381);
    init(iArr2, -11);

    for (i4 = 84; i4 > 1; i4--) {
        i5 = (-((++i5) * (iArr1[i4 + 1] = s)));
        lArr[i4 + 1] -= i5;
        i5 %= (int)((long)(sArr[i4 + 1] - ((i5 += (int)d1) + (i5 + i4))) | 1);
    }
    for (i6 = 2; i6 < 93; ++i6) {
        i5 = (i5--);
        i7 = ((-iArr1[i6 + 1]) + -59336);
        i7 += (i6 * i6);
    }
    i8 = 1;
    do {
        for (f1 = 3; f1 < 59; f1++) {
            i7 = (int)(((s + -7769) + (f1 + i8)) * iArr2[(int)(f1 - 1)]);
        }
    } while (++i8 < 97);
    d1 %= ((((by1 + i5) - (i7 * i9)) + ((-(--i7)) - i8)) | 1);
    long meth_res = l1 + i4 + i5 + s + Double.doubleToLongBits(d1) + i6 + i7 + i8 + Float.floatToIntBits(f1) + by1 + i9
        + checkSum(iArr1) + checkSum(lArr) + checkSum(sArr) + checkSum(iArr2);
    bMeth_check_sum += meth_res;
    return meth_res % 2 > 0;
}

public static float fMeth(double d2, double d3) {

    float f2=-2.559F;
    short s2=8589;
    long l2=-31L;
    int i12=-18, i13=-56774, i14=-14016, i15=166, iArr3[]=new int[N];

    init(iArr3, 117);

    i12 = 93;
    do {
        for (i13 = 1; i13 < 85; i13++) {
            i14 = 1;
            while (++i14 < 96) {
                iFld += (int)(((7 + (++iArr3[i14])) - (++l2)) + ((-(--iFld)) + (--iFld)));
            }
            iArr3[i13 - 1] = (int)((-(l2++)) * s2);
            iFld *= i13;
            i15 = 1;
            do {
                iFld -= (i14 >>> -14);
                d3 += (iFld++);
                iFld = (int)((fArrFld[i15]--) / ((long)(d2--) | 1));
                f2 -= f2;
                d3 = (((~(l2++)) - (l2 - l2)) * ((f2 - i12) + iFld));
            } while (++i15 < 1);
        }
    } while (--i12 > 0);
    long meth_res = Double.doubleToLongBits(d2) + Double.doubleToLongBits(d3) + i12 + i13 + i14 + l2 + s2 + i15 +
        Float.floatToIntBits(f2) + checkSum(iArr3);
    fMeth_check_sum += meth_res;
    return (float)meth_res;
}

public static void main(String[] strArr) {

    byte by=-9;
    short s1=11389;
    float f=110.320F;
    long l=21L, lArr1[]=new long[N];
    int i=-32462, i1=-7, i2=-230, i3=-231, i10=-61675, i11=-1, i16=-159, i17=6, iArr[]=new int[N];
    double d=-79.128920, dArr[]=new double[N];
    boolean b=false;

    init(iArr, 248);
    init(dArr, -27.72806);
    init(lArr1, 62341L);

    i = 1;
    while (++i < 85) {
        l >>= (((-1601286076644101300L + (14 + (i + i1))) + (i + i)) * (i1--));
        i1 += (30935 + (i * i));
        l = (i1 = i1);
        if (b) {
            i1 += (((i * i1) + i) - i);
            i1 += i;
            i1 -= (i2 * (iArr[i]++));
        } else {
            i3 = 1;
            do {
                i1 = ((i + (-27 - (i2 - i3))) + i2);
            } while (++i3 < 93);
            f %= ((i1 - (i2++)) | 1);
            d -= ((i3 / ((long)(-(by - d)) | 1)) + (i2--));
        }
        if (b && bMeth((i + i2) + (202 + (l % (i2 | 1))))) continue;
        f -= (float)((iArr[i + 1]++) + dArr[i + 1]);
    }
    for (i10 = 3; i10 < 76; i10++) {
        s1 *= (short)(Integer.reverseBytes(-(i11 + i10)) - (fMeth(d, d) - by));
        i2 += (i * Math.max((int)(i1 / (l | 1)), -9 + (i3 - i16)));
        by += (byte)(iArr[i10 - 1] - d);
        bArrFld[i10] = (b = ((l != i2) || (bArrFld[i10] = false)));
        i11 = (int)(i16 - l);
        i11 >>>= iArr[i10];
        i17 = 1;
        while (++i17 < 30) {
            i1 += (((i17 * i) + f) - i1);
            by = (byte)l;
            lArr1[i10] *= i2;
        }
    }

    System.out.println("i l i1 = " + i + "," + l + "," + i1);
    System.out.println("i2 b i3 = " + i2 + "," + (b ? 1 : 0) + "," + i3);
    System.out.println("f d by = " + Float.floatToIntBits(f) + "," + Double.doubleToLongBits(d) + "," + by);
    System.out.println("i10 s1 i11 = " + i10 + "," + s1 + "," + i11);
    System.out.println("i16 i17 iArr = " + i16 + "," + i17 + "," + checkSum(iArr));
    System.out.println("dArr lArr1 = " + Double.doubleToLongBits(checkSum(dArr)) + "," + checkSum(lArr1));

    System.out.println("iFld fArrFld bArrFld = " + iFld + "," + Double.doubleToLongBits(checkSum(fArrFld)) + "," +
        checkSum(bArrFld));

    System.out.println("bMeth_check_sum: " + bMeth_check_sum);
    System.out.println("fMeth_check_sum: " + fMeth_check_sum);
}
}
