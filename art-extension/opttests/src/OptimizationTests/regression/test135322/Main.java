/*
 * Copyright (C) 2015 Intel Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by Dalvik Fuzzer tool (2.1.003). Mon Sep  2 15:46:44 2013
package OptimizationTests.regression.test135322;

import OptimizationTests.regression.shared.*;

public class Main extends FuzzerUtils {

    public static final int N = 30;

    static int statIntField = 3;

    static void statSet(int value) {
        statIntField = value;
    }

    static int statGet() {
        return statIntField;
    }

    public static long c_check_sum = 0;

    public static char c(int kg) {

        int g = -55077, f5 = -14690, l = 60023, q[] = new int[N], z0[][] = new int[N][N], r[][] = new int[N][N], egh[] = new int[N], c1[][] = new int[N][N];
        short xx[][] = new short[N][N];
        long d[][] = new long[N][N], hfw[] = new long[N];

        init(q, -55778);
        init(z0, 57040);
        init(r, 28909);
        init(d, -2426712987181994793L);
        init(hfw, 974927441779807452L);
        init(egh, -3074);
        init(c1, -33197);
        init(xx, (short) 20245);

        for (g = 1; g < 23; g++) {

            // Test Loop Vectorization
            for (f5 = 1; f5 > g; f5--) {
                q[f5 - 1] = (int) (23782);
            }

            int dv = 11;
            do {
                z0[g - 1][g + 1] -= (int) ((r[g][g]) * (q[g - 1]));
                d[g][g - 1] += (long) (z0[g - 1][g]);

                // Test Loop Vectorization
                for (l = 1; l < 0; l++) {
                    hfw[g - 1] = (long) (-q[l + 1]);
                    egh[l + 1] -= (int) (-hfw[g]);
                }

            } while (--dv > 0);

            c1[g + 1][g + 1] *= (int) (g + (xx[g - 1][g + 1]));
        }

        long meth_res = kg + g + f5 + l + checkSum(q) + checkSum(z0)
                + checkSum(r) + checkSum(d) + checkSum(hfw) + checkSum(egh)
                + checkSum(c1) + checkSum(xx);
        c_check_sum += meth_res;
        return (char) meth_res;
    }

    public static void main(String[] e58) {

        int amm = -18452, rz = -27878, w70 = 836, u = -97, n = 35102, lxj = -50261, ahi[][] = new int[N][N], bso[][] = new int[N][N], x5[] = new int[N], q[] = new int[N], j[] = new int[N], r[] = new int[N], yd[][] = new int[N][N];
        short rvu[] = new short[N], vi[][] = new short[N][N];
        long iw = -3843151242905445524L;

        init(ahi, 39658);
        init(rvu, (short) 21250);
        init(bso, 59712);
        init(x5, -38785);
        init(q, -12588);
        init(j, 50873);
        init(r, -62161);
        init(vi, (short) -23355);
        init(yd, -25615);

        for (amm = 6; amm > 1; amm--) {
            iw -= (long) (ahi[amm - 1][amm + 1]);
        }

        for (rz = 5; rz > 1; --rz) {
            // Enhanced For statement
            for (short rk : rvu) {
                w70 -= (int) (bso[rz + 1][rz]);
                u = (int) (statGet());
            }

            if (x5[rz - 1] > 0)
                break;

            q[rz] -= (int) (ahi[rz + 1][rz + 1]);

            for (n = 1; n < 5; n++) {

                // Test Loop Vectorization
                for (lxj = n; lxj < 0; lxj++) {
                    rvu[rz - 1] = (short) (j[rz + 1]);
                    r[lxj + 1] = (int) (x5[n - 1]);
                }

                w70 = (int) (c((int) (x5[rz - 1])));
                int h = 11;
                while (--h > 0) {
                    iw = (long) (bso[n + 1][n - 1]);
                    iw += (long) (c((int) (q[rz - 1])));
                }

            }

            vi[rz - 1][rz + 1] += (short) (yd[rz][rz - 1]);
        }

        System.out.println("int: " + amm + "," + rz + "," + w70 + "," + u + ","
                + n + "," + lxj + "," + checkSum(ahi) + "," + checkSum(bso)
                + "," + checkSum(x5) + "," + checkSum(q) + "," + checkSum(j)
                + "," + checkSum(r) + "," + checkSum(yd));
        System.out.println("short: " + checkSum(rvu) + "," + checkSum(vi));
        System.out.println("long: " + iw);

        System.out.println("c_check_sum: " + c_check_sum);
        System.out.println("statIntField: " + statIntField);
    }
}
