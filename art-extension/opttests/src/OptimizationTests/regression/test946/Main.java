/*
 * Copyright (C) 2015 Intel Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by Dalvik Fuzzer tool (3.4.001). Wed Oct 15 21:23:39 2014
package OptimizationTests.regression.test946;

import OptimizationTests.regression.shared.*;

public class Main extends FuzzerUtils {

    public static final int N = 100;

    public static float da = -41.127F;

    public static void main(String[] h) {

        double b3m = 45.917, s[][] = new double[N][N];
        short bx = 13;
        int y6q = 10747, lxt = 7533, nl = -29904, p7a = -50203, e = 63074, i95 = -30189, at = -26406, yo = 39092, ua[] = new int[N];
        float bw = -100.472F, mq[] = new float[N];
        long g3v = 5667870677847629596L, rk9[] = new long[N];

        init(mq, -38.686F);
        init(rk9, 9207609165978350334L);
        init(s, 36.4);
        init(ua, -64948);

        for (y6q = 78; y6q > 2; --y6q) {
            lxt = 1;
            while (++lxt < y6q) {
                nl -= -21501;
                nl = y6q;
                for (p7a = 2; p7a < 43; ++p7a) {
                    b3m -= mq[y6q];
                    nl = (int) ((nl++) - (-b3m));
                    e = ((y6q + (e++)) - (e++));
                    e -= y6q;
                    i95 *= (--e);
                    e ^= (int) (i95 - ((e * bx) * (rk9[p7a - 1]--)));
                    b3m = nl;
                    i95 -= (int) s[p7a][p7a - 1];
                    g3v += ((ua[p7a]++) * nl);
                    e <<= ua[y6q + 1];
                }
                i95 = (e++);
                g3v -= ua[lxt];
                nl += (lxt * lxt);
            }
            for (at = y6q; at < 37; at++) {
                i95 = (int) ((-(p7a + g3v)) * ((bx % (e | 1)) >> (long) (-(b3m--))));
            }
            for (yo = 4; yo < 82; ++yo) {
                i95 -= (int) g3v;
                i95 += (--nl);
            }
            g3v *= (long) ((ua[y6q + 1]++) + ((bw--) * (da++)));
            e -= (e = (nl++));
        }

        System.out.println("y6q lxt nl = " + y6q + "," + lxt + "," + nl);
        System.out.println("p7a b3m e = " + p7a + ","
                + Double.doubleToLongBits(b3m) + "," + e);
        System.out.println("i95 bx g3v = " + i95 + "," + bx + "," + g3v);
        System.out.println("at yo bw = " + at + "," + yo + ","
                + Float.floatToIntBits(bw));
        System.out.println("mq rk9 s = "
                + Double.doubleToLongBits(checkSum(mq)) + "," + checkSum(rk9)
                + "," + Double.doubleToLongBits(checkSum(s)));
        System.out.println("ua = " + checkSum(ua));

        System.out.println("da = " + Float.floatToIntBits(da));
    }
}
