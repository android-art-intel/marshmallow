/*
 * Copyright (C) 2015 Intel Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by Dalvik Fuzzer tool (2.1.003). Mon Jan 20 15:26:15 2014
package OptimizationTests.regression.test165863;

import OptimizationTests.regression.shared.*;

class TestClass {
    public int field;

    public void meth() {
        field = 1;
    }
}

public class Main extends FuzzerUtils {

    public static final int N = 30;

    public static void main(String[] h) {

        int lt8 = 61826, wlq = 6065, bnp = -61141, sqz = -15471, k5w = 15807, jp = -61153, vz1 = 809, c = 46184, t = 57194, i = -21163, tk = 31876, a[] = new int[N], b[] = new int[N], p8n[] = new int[N], dhx[] = new int[N], n[] = new int[N], df5[] = new int[N], fhc[][] = new int[N][N];
        byte oz[][] = new byte[N][N], i0l[][] = new byte[N][N], v[] = new byte[N], qwz[][] = new byte[N][N];
        short f7 = -26647;
        long wo[] = new long[N], u[] = new long[N], krq[][] = new long[N][N], bmh[][] = new long[N][N], z1[][] = new long[N][N], tq[] = new long[N], cl[][] = new long[N][N];

        init(wo, 8121773126395972087L);
        init(u, -1651407478023096073L);
        init(a, 43810);
        init(b, 31141);
        init(p8n, -1234);
        init(krq, -3481102344226008968L);
        init(dhx, -19088);
        init(bmh, -1855965924135754350L);
        init(n, 53158);
        init(z1, -8149874484785412676L);
        init(df5, -55619);
        init(oz, (byte) -42);
        init(tq, 9105042006088030138L);
        init(i0l, (byte) -66);
        init(v, (byte) 24);
        init(fhc, 64707);
        init(qwz, (byte) -104);
        init(cl, 810876406450802810L);

        for (long mxe : wo) {
            if ((u[12]) + (18509 + (u[7])) <= (wo[27]) + (a[24])) {
                for (lt8 = 13; lt8 > 1; --lt8) {
                    b[lt8 - 1] = (int) (10899);
                    b[lt8 - 1] -= (int) (-p8n[lt8 + 1]);
                }
                for (wlq = 2; wlq > 1; wlq--) {
                    TestClass o5o = null;
                    try {
                        int et = 11;
                        do {
                            krq[wlq - 1][wlq - 1] -= (long) (dhx[wlq]);
                        } while (--et > 0);
                        synchronized (o5o) {
                            i0l[wlq][wlq] = 0;
                            switch ((int) i0l[wlq][wlq]) {
                            case 1:
                                vz1 = (int) (v[wlq - 1]);
                                break;
                            default:
                                df5[wlq - 1] -= (int) (sqz - (c++));
                            }
                        }
                        f7 -= (short) (40763 - (oz[wlq + 1][wlq + 1]));
                    } catch (NullPointerException b3) {
                        b[wlq + 1] -= (int) (fhc[wlq][wlq]);
                        qwz[wlq][wlq] += (byte) ((cl[wlq + 1][wlq + 1]) - (++t));
                    } finally {
                        i += (int) (lt8 / ((n[wlq] != 0) ? n[wlq] : 1));
                        for (tk = 1; tk < 11; ++tk) {
                            dhx[tk] = (int) (dhx[tk + 1]);
                        }
                    }
                }
            }
        }

        System.out.println("int: " + lt8 + "," + wlq + "," + bnp + "," + sqz
                + "," + k5w + "," + jp + "," + vz1 + "," + c + "," + t + ","
                + i + "," + tk + "," + checkSum(a) + "," + checkSum(b) + ","
                + checkSum(p8n) + "," + checkSum(dhx) + "," + checkSum(n) + ","
                + checkSum(df5) + "," + checkSum(fhc));
        System.out.println("byte: " + checkSum(oz) + "," + checkSum(i0l) + ","
                + checkSum(v) + "," + checkSum(qwz));
        System.out.println("short: " + f7);
        System.out.println("long: " + checkSum(wo) + "," + checkSum(u) + ","
                + checkSum(krq) + "," + checkSum(bmh) + "," + checkSum(z1)
                + "," + checkSum(tq) + "," + checkSum(cl));
    }
}
