/*
 * Copyright (C) 2015 Intel Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by Dalvik Fuzzer tool (3.4.001). Thu Sep  4 04:17:41 2014
package OptimizationTests.regression.test873_1;

import OptimizationTests.regression.shared.*;

public class Main extends FuzzerUtils {

    public static final int N = 100;

    public static double ap=-125.64;

public static void main(String[] b3) {

    byte fzo=12;
    long qk7=4241977487697095337L, hlt[]=new long[N];
    float v=-126.43F, s[]=new float[N];
    int a=15259, ii6=21497, pi=64174, f3=4237, u7=-49468, sz5=-52966, d8=63416, f=-1626, d03[]=new int[N];

    init(hlt, 6503651705744727787L);
    init(d03, -48479);
    init(s, -18.949F);

    a = 1;
    do {
        for (ii6 = 1; ii6 < 49; ++ii6) {
            ap = (hlt[ii6 - 1]++);
            try {
                ap = (((++pi) << 38702) - f3);
                f3 *= (int)qk7;
                for (u7 = 1; u7 < ii6; ++u7) {
                    hlt[u7] = (long)(--v);
                    pi += u7;
                    ap *= (((-5206099833887753875L - (pi + fzo)) + (ii6 - 47.265F)) - (++pi));
                    v += (--sz5);
                    d8 |= (d03[ii6 + 1]--);
                    d03[a] = d03[(int)((long)(d8 - -99.154F) << (qk7 - u7))];
                    f3 += (int)(++hlt[ii6 - 1]);
                    d8 -= d8;
                }
                qk7 += (long)(++v);
            }
            catch (ArrayIndexOutOfBoundsException ng4) {
                for (f = 1; f < a; f++) {
                    switch (((f % 2) * 5) + 4) {
                    case 14:
                        pi = (int)(s[a + 1] - (-qk7));
                        break;
                    case 8:
                        qk7 *= (pi--);
                        f3 = (int)((pi--) + ((sz5 + qk7) + f));
                        d03[a] <<= (int)(d8 + qk7);
                        v -= d8;
                        break;
                    default:
                        d03[a + 1] = fzo;
                        fzo += (byte)(++sz5);
                    }
                }
            }
            finally {
                sz5 = (int)(pi + (-(qk7 - v)));
            }
        }
    } while (++a < 98);

    System.out.println("a ii6 pi = " + a + "," + ii6 + "," + pi);
    System.out.println("f3 qk7 u7 = " + f3 + "," + qk7 + "," + u7);
    System.out.println("v fzo sz5 = " + Float.floatToIntBits(v) + "," + fzo + "," + sz5);
    System.out.println("d8 f hlt = " + d8 + "," + f + "," + checkSum(hlt));
    System.out.println("d03 s = " + checkSum(d03) + "," + Double.doubleToLongBits(checkSum(s)));

    System.out.println("ap = " + Double.doubleToLongBits(ap));
}
}
