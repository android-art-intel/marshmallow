/*
 * Copyright (C) 2015 Intel Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by Dalvik Fuzzer tool (3.1.001). Sun Sep 15 07:21:32 2013

package OptimizationTests.regression.test138629;

import OptimizationTests.regression.shared.*;

public class Main extends FuzzerUtils {

    public static final int N = 30;

    public static void main(String[] j) {

        boolean bmn[] = new boolean[N];
        int mid = -16631, qte = -31297, qf = 3112, i = -22907, uz = 33061, d = -15549, ct = -22512, ga = -13680, u3 = 34175, tp = 23917, u9p = 35026, f[] = new int[N], n[] = new int[N];
        double eog = 12.566;
        byte vrk = 74, k = -51, rcu = -100;
        long s08 = -8809815912796997429L, zti = 6513788107689007891L, c = 837037522923173969L, qgt[][] = new long[N][N];
        float pwt = 47.321F, m = 26.624F;

        init(f, -6729);
        init(bmn, true);
        init(qgt, 5790912472929217354L);
        init(n, -3467);

        for (mid = 1; mid < 12; ++mid) {
            pwt *= ((-(-mid)) + pwt);
            qte = (int) (s08 - vrk);
            zti += (-f[mid - 1]);
        }
        for (qf = 1; qf < 26; ++qf) {
            qte /= (int) (((long) (m--) >>> 1) + 1);
        }
        i = 17;
        do {
            if (bmn[(((int) (-18588 + (m - i))) >>> 1) % N]) {
                uz -= i;
            }
        } while (--i > 0);
        d = 13;
        do {
            qte >>= (int) (++qgt[(uz >>> 1) % N][(ct >>> 1) % N]);
            uz = (int) (ga - (c--));
            if (eog != eog)
                continue;
        } while (--d > 0);
        ga = ((u3 * (++k)) >>> (ga - (u3 + u3)));
        uz += ((--rcu) * ((-64558 - (ga - tp)) + (--n[(u9p >>> 1) % N])));

        System.out.println("boolean: " + checkSum(bmn));
        System.out.println("int: " + mid + "," + qte + "," + qf + "," + i + ","
                + uz + "," + d + "," + ct + "," + ga + "," + u3 + "," + tp
                + "," + u9p + "," + checkSum(f) + "," + checkSum(n));
        System.out.println("double: " + eog);
        System.out.println("byte: " + vrk + "," + k + "," + rcu);
        System.out.println("long: " + s08 + "," + zti + "," + c + ","
                + checkSum(qgt));
        System.out.println("float: " + pwt + "," + m);

    }
}
