/*
 * Copyright (C) 2015 Intel Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by Android Runtime Fuzzer tool (3.5.002). Mon Jun 29 11:06:03 2015
// srand = 20747081050656549047603626312912753265444070848034843435790382364353

package OptimizationTests.regression.test14425;

import OptimizationTests.regression.shared.*;

public class Main extends FuzzerUtils {

    public static final int N = 100;


    public static long iMeth_check_sum = 0;

public static int iMeth(int i2, byte by, int i3) {

    double d=-1.396;
    long l=7225527592029531485L;
    boolean b=false;
    float f=1.789F;
    short s=-3106;
    int i4=-13007, i5=3, iArr[]=new int[N];

    init(iArr, 11968);

    i4 = 88;
    while (--i4 > 0) {
        i2 = (int)(((by + i3) * (l | l)) + ((i3 + i2) - i4));
        i2 += i4;
        i2 <<= Integer.reverseBytes(i4 - i4);
        d += (i2 ^= ((i3 * i2) - i2));
    }
    for (f = 1; f < 94; ++f) {
        i3 = i2;
        l += (long)(-48.776F + i5);
        iArr[(int)(f - 1)] = iArr[(int)(f)];
        if (b = (((i3 * 180) != (iArr[(int)(f - 1)] = i3)) || ((i5 != s) | (b = b)))) break;
    }
    d = (i2 - (i3 - l));
    long meth_res = i2 + by + i3 + i4 + l + Double.doubleToLongBits(d) + Float.floatToIntBits(f) + i5 + (b ? 1 : 0) + s
        + checkSum(iArr);
    iMeth_check_sum += meth_res;
    return (int)meth_res;
}

public static void main(String[] strArr) {

    double d1=0.84876;
    byte by1=102;
    long l1=-7L, lArr[]=new long[N];
    boolean b1=false, bArr[]=new boolean[N];
    float f1=0.657F, fArr[]=new float[N];
    short s1=27517, sArr[]=new short[N];
    int i=-55453, i1=136, i6=-8, i7=-8, i8=-36183, iArr1[]=new int[N];

    init(lArr, 32441L);
    init(iArr1, -1);
    init(fArr, 2.1014F);
    init(sArr, (short)-23890);
    init(bArr, false);

    for (i = 2; i < 91; ++i) {
        i1 >>= (i - ((i * i1) * iMeth(i, by1, i)));
        i1 = i;
        i1 -= (int)((Math.sqrt(d1) * l1) * (i1--));
        d1 = (((-(--i1)) + (lArr[i - 1]--)) - (-(l1 + 183)));
        iArr1[i] *= (int)((128 - (i1 / (l1 | 1))) - (i1 = (int)l1));
        i1 ^= (int)(iArr1[i] * (fArr[i]++));
        for (i6 = 1; i6 < i; i6 += 2) {
            try {
                i7 = 1;
                while (++i7 < 68) {
                    if ((l1 < l1) && b1) break;
                    i1 = (int)(l1 - (i1++));
                }
            }
            catch (NullPointerException exc) {
                if ((((55357 * (i1 *= 52120)) - (i1--)) - sArr[i6]) < (++i1)) {
                    l1 = -12;
                    for (i8 = 3; i8 < 93; i8++) {
                        i1 -= (i | ((++iArr1[i6]) + (i8 - i)));
                        i1 = (int)(((i1 -= i7) - f1) - i7);
                        i1 += (int)(-126.348F + (i8 * i8));
                        i1 -= (int)l1;
                        l1 = (long)(d1 + (++i1));
                        iArr1[i + 1] += (i7 + (-41245 + (i - i8)));
                        i1 <<= (int)(++l1);
                        if (((-f1) + (l1++)) >= iArr1[i8 + 1]) continue;
                    }
                    f1 += (i6 + i6);
                } else {
                    i1 += i6;
                }
            }
            catch (NegativeArraySizeException exc1) {
                bArr[i - 1] = (((i1 + -44476) != i1) && (b1 = (l1 >= by1)));
            }
            finally {
                if (b1 = (((f1 + 2) != (i7 + f1)) && ((-49 < (f1 = s1)) || (b1 = b1)))) continue;
            }
        }
    }

    System.out.println("i i1 by1 = " + i + "," + i1 + "," + by1);
    System.out.println("d1 l1 i6 = " + Double.doubleToLongBits(d1) + "," + l1 + "," + i6);
    System.out.println("i7 b1 i8 = " + i7 + "," + (b1 ? 1 : 0) + "," + i8);
    System.out.println("f1 s1 lArr = " + Float.floatToIntBits(f1) + "," + s1 + "," + checkSum(lArr));
    System.out.println("iArr1 fArr sArr = " + checkSum(iArr1) + "," + Double.doubleToLongBits(checkSum(fArr)) + "," +
        checkSum(sArr));
    System.out.println("bArr = " + checkSum(bArr));


    System.out.println("iMeth_check_sum: " + iMeth_check_sum);
}
}
