/*
 * Copyright (C) 2015 Intel Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by Dalvik Fuzzer tool (3.2.001). Wed Mar 26 20:02:04 2014
package OptimizationTests.regression.test182492;

import OptimizationTests.regression.shared.*;

public class Main extends FuzzerUtils {

    public static final int N = 500;

    public static void main(String[] v) {

        float wi = 119.403F;
        boolean gqt = false;
        byte k = -66;
        double o = -61.356;
        long iqa = -3947577610889147986L, d = 323851481822667838L;
        int u = -50712, y = 26111, jx0 = -55951, a = -20256, a4 = -5171, oh = 321, g = 46754, f = 16791, m = -3465, del = 62974, aq = -58600, tc = 54591, yk[] = new int[N], t8[] = new int[N];

        init(yk, -28627);
        init(t8, 16549);

        u = 396;
        do {
            wi = (y -= ((y * y) + (y / -1640)));
            jx0 = 217;
            while (--jx0 > 0) {
                y -= (int) iqa;
                a = 127;
                while (--a > 0) {
                    gqt = ((-(-(a * a4))) != oh);
                    k = (byte) (oh = (int) ((u << g) * (-(f * d))));
                    o += m;
                }
                for (del = 294; del > 14; del--) {
                    yk[del] %= (int) (((d * (-5881 | (iqa = a4))) + (yk[jx0 + 1] - (aq + g))) | 1);
                }
                tc -= (int) (d + (oh >> (--t8[jx0])));
                g |= (int) d;
            }
        } while (--u > 0);

        System.out.println("u wi y = " + u + "," + Float.floatToIntBits(wi)
                + "," + y);
        System.out.println("jx0 iqa a = " + jx0 + "," + iqa + "," + a);
        System.out.println("gqt a4 oh = " + gqt + "," + a4 + "," + oh);
        System.out.println("k g f = " + k + "," + g + "," + f);
        System.out.println("d o m = " + d + "," + Double.doubleToLongBits(o)
                + "," + m);
        System.out.println("del aq tc = " + del + "," + aq + "," + tc);
        System.out.println("yk t8 = " + checkSum(yk) + "," + checkSum(t8));

    }
}
