/*
 * Copyright (C) 2015 Intel Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by Dalvik Fuzzer tool (2.1.003). Sun Aug  4 10:33:06 2013
package OptimizationTests.regression.test128313;

import OptimizationTests.regression.shared.*;

public class Main extends FuzzerUtils {

    public static final int N = 300;

    public static long w3s_check_sum = 0;

    public static int w3s(int b) {

        int x = -38453, h2[] = new int[N];
        long xo[] = new long[N], q68[] = new long[N];

        init(xo, -6753954856171928234L);
        init(q68, -5581057762531295271L);
        init(h2, 36866);

        // Test Loop Vectorization
        for (x = 27; x > 1; x--) {
            xo[x] = (long) (3983250897364940989L);
            xo[x] = (long) (x);
        }

        int a = 299;
        do {
            int l = 299;
            while (--l > 0) {
                int s2 = 11;
                do {

                    if ((xo[1]) / ((q68[7] != 0) ? q68[7] : 1) >= (q68[1])
                            + (xo[15])) {
                        b *= (int) (h2[11]);
                    }

                } while (--s2 > 0);

            }

        } while (--a > 0);

        long meth_res = b + x + checkSum(xo) + checkSum(q68) + checkSum(h2);
        w3s_check_sum += meth_res;
        return (int) meth_res;
    }

    public static void main(String[] z) {

        char t0b[] = new char[N], lj[][] = new char[N][N];
        int a = -12522, l = 614, uv = -12310, pi = 25134, ko = 32621, pr = -39910, e3 = -23176, g3 = -43914, a9f[][] = new int[N][N], j8[][] = new int[N][N], g[] = new int[N], vk[][] = new int[N][N], c64[] = new int[N], a1[] = new int[N], sb[][] = new int[N][N], m[] = new int[N];
        long qh3 = 762944071188216306L, j4 = -8344073943943812816L, hl4[] = new long[N];

        init(a9f, -40966);
        init(t0b, (char) 19250);
        init(j8, 55524);
        init(g, 2274);
        init(vk, -34065);
        init(c64, -47587);
        init(a1, -56698);
        init(sb, -21416);
        init(lj, (char) 19567);
        init(hl4, 3941402219413271907L);
        init(m, -40601);

        // Test Loop Fusion
        for (a = 1; a < 299; a++) {
            l += (int) ((((a) - (l)) * (a9f[a - 1][a + 1])) + l);

            for (uv = 1; uv < 299; ++uv) {
                l = (int) ((-62343 + ((t0b[a - 1]) * (uv))) - (j8[a - 1][a - 1]));
            }

        }
        for (pi = 1; pi < 299; pi++) {
            if (ko > 0)
                continue;

            if (++pr == w3s((int) (g[pi]))) {
                vk[pi][pi - 1] *= (int) (t0b[pi]);
                int w = 299;
                while (--w > 0) {

                    // Test Loop Vectorization
                    for (e3 = pi; e3 < 3; e3 += 3) {
                        t0b[e3 - 1] = (char) (-c64[pi]);
                        g[e3 + 1] = (int) (c64[e3 - 1] + a1[pi]);
                    }

                    qh3 += (long) (ko * ((sb[pi][pi + 1]) + (lj[pi][pi + 1])));
                }

                ko = (int) (hl4[pi]);
                j4 += (long) (a9f[pi - 1][pi + 1]);
            }

            j8[pi + 1][pi - 1] += (int) (w3s((int) (g3--)));
        }

        int y7 = 299;
        while (--y7 > 0) {
            qh3 -= (long) (12525 + (m[21]));
        }

        System.out.println("char: " + (int) checkSum(t0b) + ","
                + (int) checkSum(lj));
        System.out.println("int: " + a + "," + l + "," + uv + "," + pi + ","
                + ko + "," + pr + "," + e3 + "," + g3 + "," + checkSum(a9f)
                + "," + checkSum(j8) + "," + checkSum(g) + "," + checkSum(vk)
                + "," + checkSum(c64) + "," + checkSum(a1) + "," + checkSum(sb)
                + "," + checkSum(m));
        System.out.println("long: " + qh3 + "," + j4 + "," + checkSum(hl4));

        System.out.println("w3s_check_sum: " + w3s_check_sum);
    }
}
