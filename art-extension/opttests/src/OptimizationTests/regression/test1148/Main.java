/*
 * Copyright (C) 2015 Intel Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by Dalvik Fuzzer tool (3.5.001). Mon Mar 23 01:38:23 2015
package OptimizationTests.regression.test1148;

import OptimizationTests.regression.shared.*;

public class Main extends FuzzerUtils {

    public static final int N = 100;


public static void main(String[] strArr) {

    short s=4042;
    float f=0.288F, fArr[][]=new float[N][N];
    double d=0.72968;
    boolean b=true, bArr[][]=new boolean[N][N];
    int i=62713, i1=-3666, i2=13641, i3=14350, i4=-39322, i5=-13, i6=12, i7=-28115, iArr[]=new int[N];
    long l=4381946613648990694L, lArr[]=new long[N];

    init(bArr, true);
    init(fArr, 103.511F);
    init(iArr, 0);
    init(lArr, 1L);

    for (i = 2; i < 97; i += 3) {
        if (!(bArr[i - 1][i - 1] = (-9580 != Math.abs(i)))) continue;
        l = i;
        d = fArr[i][i];
        if (((i + (i1 - i1)) - i2) == ((i2 = (int)(i2 * l)) * (iArr[(i2 >>> 1) % N] + (++i2)))) {
            b = ((b = b) ^ (l != (i + l)));
            i1 = (int)l;
        } else {
            f = fArr[i - 1][i - 1];
        }
        i3 = 1;
        while (++i3 < 71) {
            iArr[(i1 >>> 1) % N] >>= i;
            i1 = (++i1);
        }
        i1 = i;
        i4 = (((--i4) - i) - i);
        l -= (iArr[i] * (i - iArr[i + 1]));
    }
    for (i5 = 2; i5 < 82; i5++) {
        i1 += i2;
        i6 = 1;
        do {
            iArr[i6 + 1] = (int)((i2 + (i2 * 4275970165L)) + iArr[i5 - 1]);
            d -= i4;
            i7 = 1;
            while (++i7 < i6) {
                s += (short)(++f);
                l = (l++);
                i1 %= (int)(l | 1);
                i1 = (++i2);
                iArr[i5 - 1] *= (int)((lArr[i5 - 1] * (f + 6164943704266735572L)) + (++i2));
            }
        } while (++i6 < 16);
    }

    System.out.println("i l d = " + i + "," + l + "," + Double.doubleToLongBits(d));
    System.out.println("b i1 i2 = " + (b ? 1 : 0) + "," + i1 + "," + i2);
    System.out.println("f i3 i4 = " + Float.floatToIntBits(f) + "," + i3 + "," + i4);
    System.out.println("i5 i6 i7 = " + i5 + "," + i6 + "," + i7);
    System.out.println("s bArr fArr = " + s + "," + checkSum(bArr) + "," + Double.doubleToLongBits(checkSum(fArr)));
    System.out.println("iArr lArr = " + checkSum(iArr) + "," + checkSum(lArr));

}
}
