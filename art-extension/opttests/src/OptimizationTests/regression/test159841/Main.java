/*
 * Copyright (C) 2015 Intel Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by Dalvik Fuzzer tool (2.1.003). Mon Dec 16 06:43:46 2013
package OptimizationTests.regression.test159841;

import OptimizationTests.regression.shared.*;

public class Main extends FuzzerUtils {

    public static final int N = 30;

    public static long f_check_sum = 0;
    public static long cn_check_sum = 0;

    public static int f(long s8) {

        int qz7 = 58105, j = -17733, kh = -3183, pp = -8898, xmt[] = new int[N], tp[] = new int[N], diw[] = new int[N], x9[][] = new int[N][N], ok[] = new int[N];
        byte y = 38;

        init(xmt, -64599);
        init(tp, -662);
        init(diw, -20650);
        init(x9, -50457);
        init(ok, -41813);

        for (qz7 = 7; qz7 > 1; qz7--) {
            xmt[qz7 - 1] -= (int) (tp[qz7 + 1]);
            // Test Loop Vectorization
            for (j = qz7; j > 1; j--) {
                diw[j] += (int) (-diw[j - 1]);
            }
            tp[qz7] += (int) (((s8 * (x9[qz7 + 1][qz7 + 1])) % ((s8 != 0) ? s8
                    : 1)) - (((x9[qz7][qz7]) + (s8)) * (qz7)));
            ok[qz7] -= (int) (--kh);
        }
        for (pp = 1; pp < 20; ++pp) {
            y -= (byte) (y);
        }
        long meth_res = s8 + qz7 + j + kh + pp + y + checkSum(xmt)
                + checkSum(tp) + checkSum(diw) + checkSum(x9) + checkSum(ok);
        f_check_sum += meth_res;
        return (int) meth_res;
    }

    public static long cn() {

        int w = -26288, l = 11592, piw = 50891;
        byte xj5 = -97;
        long fak = -7325331667733321757L, b[] = new long[N];

        init(b, 6392811700931790924L);

        // Test Loop Vectorization
        for (w = 1; w < 14; ++w) {
            b[w - 1] = (long) (b[w + 1] + b[w + 1]);
        }
        // Enhanced For statement
        for (long y : b) {
            for (l = 1; l > 1; l--) {
                fak += (long) (b[l]);
                xj5 += (byte) (--piw);
            }
        }
        long meth_res = w + l + fak + xj5 + piw + checkSum(b);
        cn_check_sum += meth_res;
        return (long) meth_res;
    }

    public static void main(String[] ex) {

        int fj2 = -27487, lei = 2504, gzi = -58860, p[] = new int[N], qo[] = new int[N], ml[] = new int[N], l[][] = new int[N][N], dp[][] = new int[N][N], xov[][] = new int[N][N];
        byte hs = 90, s8b[] = new byte[N];
        long hrd[][] = new long[N][N], o[] = new long[N], nxh[][] = new long[N][N], ud0[][] = new long[N][N], aj7[][] = new long[N][N], sz4[][] = new long[N][N];

        init(p, -55196);
        init(s8b, (byte) 24);
        init(qo, -26511);
        init(hrd, 7549726865334614304L);
        init(ml, -25866);
        init(l, -18889);
        init(o, 2010055860074235L);
        init(dp, -47138);
        init(xov, 22456);
        init(nxh, 5193183434093588300L);
        init(ud0, -7037252474695423165L);
        init(aj7, 7076066520434804568L);
        init(sz4, -5478036987501197887L);

        // Enhanced For statement
        for (int a7o : p) {
            // Test Loop Vectorization
            for (fj2 = 26; fj2 > 1; fj2--) {
                s8b[fj2] = (byte) (-s8b[fj2]);
            }
            // Enhanced For statement
            for (int nq : qo) {
                for (lei = 1; lei < 25; lei++) {
                    if (2187 + (((lei) / ((hrd[lei + 1][lei] != 0) ? hrd[lei + 1][lei]
                            : 1)) + fj2) != hrd[lei][lei - 1]) {
                        hs -= (byte) (ml[lei + 1]);
                    }
                    qo[lei - 1] += (int) (f((long) (s8b[lei - 1])));
                    if (l[lei - 1][lei - 1] >= o[lei - 1]) {
                        if ((ml[lei]) - (dp[lei - 1][lei + 1]) >= cn()) {
                            if (hrd[lei - 1][lei] < (xov[lei + 1][lei + 1])
                                    + (nxh[lei - 1][lei - 1])) {
                                hs += (byte) (-97 - (dp[lei + 1][lei]));
                                hs = (byte) (((ud0[lei - 1][lei - 1]) * 41727) - (ud0[lei][lei - 1]));
                                hs -= (byte) (hrd[lei][lei - 1]);
                                aj7[lei][lei] -= (long) ((++gzi) - (ml[lei + 1]));
                            }
                            hs -= (byte) (hs + ((sz4[lei + 1][lei]) + lei));
                        }
                    }
                }
            }
        }

        System.out.println("int: " + fj2 + "," + lei + "," + gzi + ","
                + checkSum(p) + "," + checkSum(qo) + "," + checkSum(ml) + ","
                + checkSum(l) + "," + checkSum(dp) + "," + checkSum(xov));
        System.out.println("byte: " + hs + "," + checkSum(s8b));
        System.out.println("long: " + checkSum(hrd) + "," + checkSum(o) + ","
                + checkSum(nxh) + "," + checkSum(ud0) + "," + checkSum(aj7)
                + "," + checkSum(sz4));

        System.out.println("f_check_sum: " + f_check_sum);
        System.out.println("cn_check_sum: " + cn_check_sum);
    }
}
