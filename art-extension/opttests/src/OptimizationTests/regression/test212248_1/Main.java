/*
 * Copyright (C) 2015 Intel Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by Dalvik Fuzzer tool (3.3.001). Sun Jul 20 15:22:18 2014
package OptimizationTests.regression.test212248_1;

import OptimizationTests.regression.shared.*;

public class Main extends FuzzerUtils {

public static final int N = 150;

    public static int kb=1761;
    public static byte kdk[]=new byte[N];

    static {
        init(kdk, (byte)87);
    }

public static void main(String[] j) {

    int w=45180, r=-14780, jb=7033, f0f=-38147, f4o=37784, ogo=-13702, p=20973, c=13192, m[]=new int[N];
    short a3m=-25608;
    float ql=-115.775F;
    byte f=-48;
    double nrl=121.69;
    long c60=1303232127994244079L, br=-2299949202396645813L, nt=-5705652720929629096L;
    boolean e=false, h[]=new boolean[N];

    init(h, false);
    init(m, 63350);

    w = 145;
    while ( --w > 0 ) {
        r += (--r);
        c60 = (long)ql;
        r = (int)(r = (int)(++nrl));
        r *= 40392;
        r -= (--f);
        for (jb = 7; jb < 138; ++jb) {
            f = (byte)(r--);
            ql %= (c60 | 1);
            for (f0f = 3; f0f < 88; f0f++) {
                e = ((e = (c60 >= r)) | (e = h[f0f - 1]));
                ql += (((r = jb) * r) - (r + r));
                r &= (++f);
            }
            for (f4o = w; f4o < 27; f4o++) {
                r -= ((r--) + -6337);
                r = (int)c60;
                r += (--r);
                r &= (++r);
                r = r;
            }
        }
    }
    ogo = 117;
    do {
        p = 87;
        do {
            for (kb = 1; kb < ogo; kb++) {
                br *= f4o;
            }
        } while ( --p > 0 );
        f >>>= (byte)(++a3m);
        r = (r--);
        c = 58;
        while ( --c > 0 ) {
            r = (int)((-(57311 >> (long)(p + ql))) + ((p >> p) - (r--)));
        }
        if (((r--) << ((-c60) - (++r))) != (--nrl)) continue;
    } while ( --ogo > 0 );
    c60 >>= ((br - c) + ((ogo + p) * (nt + p)));
    kdk[(f4o >>> 1) % N] <<= (byte)(((--r) * (--m[(w >>> 1) % N])) * 14);

    System.out.println("w r c60 = " + w + "," + r + "," + c60);
    System.out.println("ql nrl f = " + Float.floatToIntBits(ql) + "," + Double.doubleToLongBits(nrl) + "," + f);
    System.out.println("jb f0f e = " + jb + "," + f0f + "," + e);
    System.out.println("f4o ogo p = " + f4o + "," + ogo + "," + p);
    System.out.println("br a3m c = " + br + "," + a3m + "," + c);
    System.out.println("nt h m = " + nt + "," + checkSum(h) + "," + checkSum(m));
    
    System.out.println("kb kdk = " + kb + "," + checkSum(kdk));
}
}
