/*
 * Copyright (C) 2015 Intel Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by Android Runtime Fuzzer tool (3.5.002). Sun Jul 12 00:19:36 2015
// srand = 2640227531861197288872498184546213031650957076262107477603549368463

package OptimizationTests.regression.test2289_1;

import OptimizationTests.regression.shared.*;

public class Main extends FuzzerUtils {

    public static final int N = 100;

    public static short sFld=28369;

    public static long vMeth_check_sum = 0;

public static void vMeth() {

    byte by1=-44;
    long l2=-2600208501L, l3=7L;
    float f1=0.13F;
    boolean b=true;
    double d1=2.70706;
    int i4=147, i5=20005, i6=40786, iArr1[]=null;

    

    try {
        for (i4 = 91; i4 > 4; --i4) {
            i5 += i4;
            f1 = (((i4 * l2) * (i5--)) + i4);
            i5 += (int)(((d1 * i5) - (-(i5 = (int)l2))) + ((i4 + -28832) - (-(sFld + f1))));
            for (i6 = 39; i6 > 1; i6 -= 3) {
                if (b && ((i5 - (f1 + l2)) >= i6)) break;
                i5 = iArr1.length;
                i5 = Math.max((int)(l2 + (d1 + by1)), (int)((i4 * -6) + (d1++)));
            }
            l2 >>>= (long)(((l2--) * i4) - (f1 * (l2--)));
            d1 = (((-1387 * (i5 * -10942)) - (i4 - i4)) - (i5 -= (int)(d1 + -224)));
            b = (2571 > Math.max(l3, l2));
        }
    }
    catch (NullPointerException exc) {
        i5 = (int)(-l2);
    }
    vMeth_check_sum += i4 + i5 + Float.floatToIntBits(f1) + l2 + Double.doubleToLongBits(d1) + i6 + (b ? 1 : 0) + by1 +
        l3 + 0;
}

public static void main(String[] strArr) {

    long l=14L, l1=-2204525149L, lArr[]=new long[N];
    float f=75.918F, fArr[]=new float[N];
    byte by=107, byArr[]=new byte[N];
    double d=11.41241, dArr[]=new double[N];
    int i=19575, i1=-103, i2=11, i3=-49319, i7=27227, iArr[]=new int[N];

    init(iArr, 23294);
    init(fArr, -8.654F);
    init(lArr, 10L);
    init(byArr, (byte)-125);
    init(dArr, 2.64866);

    for (i = 89; i > 5; i--) {
        i1 = 1;
        do {
            by *= (byte)(((i1 + i) * (20695 + (60 + (f - i)))) - (l = 50));
            i2 = i2;
            iArr[i + 1] = i2;
            i3 *= (int)(((++l) * (46114 * i1)) + (i2 * (i1 + i3)));
            i2 += (iArr[i - 1] - ((++i3) % ((-i1) | 1)));
        } while (++i1 < 30);
        i3 *= (int)(fArr[i + 1] + (i1 + (-38631 - (-153 + (l1 - l)))));
        switch ((i % 2) + 59) {
        case 59:
            lArr[i - 1] += l;
            try {
                i3 = (iArr[i] % iArr[i]);
                i3 = (-46585 % i1);
                i2 = (24011 / i1);
            } catch (ArithmeticException a_e) {}
            i3 = (++iArr[i]);
            break;
        case 60:
            byArr[i - 1] >>= (byte)i;
            i3 <<= (int)(((85 * (sFld << i1)) >>> (long)(i - f)) - (i1 + (l1 - i1)));
            iArr[i - 1] >>>= (int)(((++i2) - (l - i)) - ((i2 * i) * (f - d)));
            l -= (long)(f + i3);
        }
        f += ((iArr[i - 1]--) - (--lArr[i - 1]));
        lArr[i - 1] <<= (long)(((i1 - d) - (++l1)) - -202);
        vMeth();
        for (i7 = 1; i7 < 9; i7++) {
            i2 += i3;
            i2 >>= (int)(l1++);
            i3 >>= (~(--i2));
        }
        dArr[i + 1] += (--l);
        iArr[i + 1] = iArr[i - 1];
    }

    System.out.println("i i1 by = " + i + "," + i1 + "," + by);
    System.out.println("f l i2 = " + Float.floatToIntBits(f) + "," + l + "," + i2);
    System.out.println("i3 l1 d = " + i3 + "," + l1 + "," + Double.doubleToLongBits(d));
    System.out.println("i7 iArr fArr = " + i7 + "," + checkSum(iArr) + "," + Double.doubleToLongBits(checkSum(fArr)));
    System.out.println("lArr byArr dArr = " + checkSum(lArr) + "," + checkSum(byArr) + "," +
        Double.doubleToLongBits(checkSum(dArr)));

    System.out.println("sFld = " + sFld);

    System.out.println("vMeth_check_sum: " + vMeth_check_sum);
}
}
