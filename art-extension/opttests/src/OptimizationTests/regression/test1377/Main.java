/*
 * Copyright (C) 2015 Intel Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by Dalvik Fuzzer tool (3.5.001). Sat Jan 31 09:25:34 2015
package OptimizationTests.regression.test1377;

import OptimizationTests.regression.shared.*;

public class Main extends FuzzerUtils {

    public static final int N = 100;

    public static float fFld=-1.314F;

public static void main(String[] strArr) {

    float f=-50.609F, fArr[]=new float[N];
    double d=-46.110886, dArr[]=new double[N];
    short s=3082, sArr[]=new short[N];
    boolean b=false;
    byte by=48, byArr[]=new byte[N];
    long l=3L, lArr[]=new long[N];
    int i=148, i1=-16980, i2=-5241, i3=-45449, i4=-18, i5=8, i6=8, i7=245, iArr[]=new int[N];

    init(iArr, -240);
    init(sArr, (short)4336);
    init(lArr, -52L);
    init(byArr, (byte)73);
    init(fArr, 2.966F);
    init(dArr, 0.106696);

    fFld -= (i + i);
    i1 = 1;
    do {
        i += i1;
        fFld -= (++i);
        i = iArr[i1 - 1];
        l += (-i1);
    } while (++i1 < 89);
    for (i2 = 76; i2 > 2; i2 -= 3) {
        sArr[i2 - 1] -= (short)(((i2 + 73) * (fFld + 141)) * l);
        lArr[(i2 >>> 1) % N] = (long)(++d);
    }
    i3 = 1;
    do {
        i = (int)fFld;
        i4 = 1;
        do {
            i /= (int)((long)((fFld * (7 - (-(i3 << i3)))) + ((--byArr[i3]) - (s - l))) | 1);
            i = (int)(((++s) * (-(++fArr[i3]))) + -11);
            i += i4;
        } while (++i4 < i3);
    } while (++i3 < 84);
    for (i5 = 4; i5 < 87; ++i5) {
        i6 = 1;
        do {
            l *= i1;
            for (i7 = 1; i7 < 76; ++i7) {
                i += i7;
                try {
                    by += (byte)(d - ((210 / ((long)(f--) | 1)) * (i2 - i7)));
                    i = -10;
                    iArr = new int[i];
                    i -= (int)((by += (byte)(0.103668 - dArr[i5 + 1])) * ((-2 - lArr[i6]) - (i6 - 211)));
                    if (b) break;
                }
                catch (NegativeArraySizeException exc) {
                    d = (--f);
                }
                finally {
                    i += (int)(-3508218360L + (i7 * i7));
                }
            }
        } while (++i6 < 26);
    }

    System.out.println("i i1 l = " + i + "," + i1 + "," + l);
    System.out.println("i2 d i3 = " + i2 + "," + Double.doubleToLongBits(d) + "," + i3);
    System.out.println("i4 s i5 = " + i4 + "," + s + "," + i5);
    System.out.println("i6 i7 by = " + i6 + "," + i7 + "," + by);
    System.out.println("f b iArr = " + Float.floatToIntBits(f) + "," + (b ? 1 : 0) + "," + checkSum(iArr));
    System.out.println("sArr lArr byArr = " + checkSum(sArr) + "," + checkSum(lArr) + "," + checkSum(byArr));
    System.out.println("fArr dArr = " + Double.doubleToLongBits(checkSum(fArr)) + "," +
        Double.doubleToLongBits(checkSum(dArr)));

    System.out.println("fFld = " + Float.floatToIntBits(fFld));
}
}
