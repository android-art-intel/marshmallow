/*
 * Copyright (C) 2015 Intel Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by Dalvik Fuzzer tool (3.5.001). Sun Apr 26 03:21:09 2015
package OptimizationTests.regression.test1982;

import OptimizationTests.regression.shared.*;

public class Main extends FuzzerUtils {

    public static final int N = 100;

    public static int iFld=-8;

    public static long iMeth_check_sum = 0;

public static int iMeth(int i2, int i3) {

    int i4=-14402;
    byte by1=94;

    i4 = 1;
    while (++i4 < 95) {
        by1 = (byte)(((-(i3 - i3)) + (i3 + i4)) * i4);
    }
    long meth_res = i2 + i3 + i4 + by1;
    iMeth_check_sum += meth_res;
    return (int)meth_res;
}

public static void main(String[] strArr) {

    float f=-49.244F, fArr[]=new float[N];
    int i=-69, i1=245, i5=9, i6=17, i7=-12, i8=9, i9=-10896, iArr[]=new int[N];
    byte by=-78, byArr[]=new byte[N];
    double d=1.97837;
    boolean b=true;
    long l=36L, lArr[][]=new long[N][N], lArr1[]=new long[N];
    short s=1957, s1=-7102;

    init(byArr, (byte)-48);
    init(lArr, 3263253077L);
    init(fArr, 53.89F);
    init(iArr, 9);
    init(lArr1, 6109842288751999304L);

    for (i = 3; i < 83; i++) {
        byArr[i - 1] += (byte)lArr[i][i - 1];
        fArr[i] = (float)(d - by);
        l += i;
        i1 += iMeth((int)((i + i1) - (l >>>= l)), (iFld - -220) * (i1--));
        i1 = (int)((i1 - (18879 * (l = i))) << ((--i1) * (-64798 + (i / (l | 1)))));
        s += (short)i;
        iFld -= i1;
    }
    for (i5 = 95; i5 > 4; i5--) {
        iFld += (int)(l++);
        iArr[i5 + 1] += (int)l;
        iFld = (int)(((i5 + by) * (--i1)) + (lArr[i5 - 1][i5 + 1] *= l));
        by += (byte)(i5 + i);
        i6 *= iArr[i5];
        i6 -= (int)(--d);
    }
    for (i7 = 1; i7 < 78; i7++) {
        lArr[i7 + 1][i7] = (long)(((l + i6) + (l * f)) * ((i6++) - (d + 1.93344)));
        by += (byte)(i7 * i7);
        b = (b = ((true == (-25525 != (f + i6))) ^ (b && b)));
        lArr1[i7 + 1] += (long)(((d + i7) * (i8 * f)) % ((-(++s1)) | 1));
        i1 = (int)l;
        b = b;
    }
    for (i9 = 4; i9 < 81; ++i9) {
        if (-49837L != ((--iFld) + (-(++f)))) break;
        i1 -= i5;
    }

    System.out.println("i d by = " + i + "," + Double.doubleToLongBits(d) + "," + by);
    System.out.println("l i1 s = " + l + "," + i1 + "," + s);
    System.out.println("i5 i6 i7 = " + i5 + "," + i6 + "," + i7);
    System.out.println("f b i8 = " + Float.floatToIntBits(f) + "," + (b ? 1 : 0) + "," + i8);
    System.out.println("s1 i9 byArr = " + s1 + "," + i9 + "," + checkSum(byArr));
    System.out.println("lArr fArr iArr = " + checkSum(lArr) + "," + Double.doubleToLongBits(checkSum(fArr)) + "," +
        checkSum(iArr));
    System.out.println("lArr1 = " + checkSum(lArr1));

    System.out.println("iFld = " + iFld);

    System.out.println("iMeth_check_sum: " + iMeth_check_sum);
}
}
