/*
 * Copyright (C) 2015 Intel Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by Android Runtime Fuzzer tool (4.1.001). Tue Dec 29 01:59:00 2015
// srand = 170804503269864759889300199908473968901

package OptimizationTests.regression.test3064;

import OptimizationTests.regression.shared.*;

public class Main extends FuzzerUtils {

    public static final int N = 100;

    public static long instanceCount=-3L;

public static void main(String[] strArr) {

    int i=-115, i1=64718, i2=-6, i3=114, i4=-20378, iArr[]=new int[N];
    float f=-63.159F;
    short s=20725;
    byte by=58;
    boolean b=false;
    long lArr[]=new long[N];

    init(iArr, -6);
    init(lArr, -2444881471581758947L);

    for (i = 4; i < 91; ++i) {
        f = Math.abs((int)(-(i * Main.instanceCount)));
        for (i1 = 1; i1 < 33; i1++) {
            iArr[i1] -= (int)f;
            i2 = (int)(Main.instanceCount - i2);
            s >>= (short)(((--i2) / ((++i2) | 1)) * i);
            i2 -= (int)f;
            i3 = 1;
            do {
                i2 *= i1;
                s += (short)(lArr[i - 1]++);
                i2 = (i2 %= (int)(((i2++) / ((++i2) | 1)) | 1));
                i2 += (i3 + by);
                i2 = (i2--);
                Main.instanceCount /= ((-Math.abs(i2 + 47341)) | 1);
                Main.instanceCount |= (Main.instanceCount++);
                i2 ^= -13;
                i2 += (iArr[i1 + 1]++);
                Main.instanceCount >>>= s;
            } while (++i3 < 91);
            i2 <<= (int)((lArr[i1 - 1] + iArr[i + 1]) - (i3 - iArr[i]));
        }
        i4 += (i | i1);
        if (b) break;
        for (long l : lArr) {
            l += ((-(i4 * i)) - ((i4 * s) + (i * -14)));
        }
        i4 /= (int)(((long)((i2 * (f - f)) * (--Main.instanceCount))) | 1);
        Main.instanceCount = (long)f;
    }

    System.out.println("i f i1 = " + i + "," + Float.floatToIntBits(f) + "," + i1);
    System.out.println("i2 s i3 = " + i2 + "," + s + "," + i3);
    System.out.println("by i4 b = " + by + "," + i4 + "," + (b ? 1 : 0));
    System.out.println("iArr lArr = " + checkSum(iArr) + "," + checkSum(lArr));

    System.out.println("Main.instanceCount = " + Main.instanceCount);
}
}
