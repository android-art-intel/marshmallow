/*
 * Copyright (C) 2015 Intel Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by Android Runtime Fuzzer tool (4.1.002). Sun Mar 20 18:02:09 2016
// srand = 187655778323344934191357516841922237956

package OptimizationTests.regression.test3591_2;

import OptimizationTests.regression.shared.*;

public class Main extends FuzzerUtils {

    public static final int N = 100;

    public static long instanceCount=-5985170438136858673L;

public static void main(String[] strArr) {

    int i=-59684, i1=-59512, i2=11, i3=-132, i4=21126, i5=-12, i6=-184, iArr[]=new int[N];
    short s=-7273;
    float f=6.198F, f1=-109.308F, fArr[]=new float[N];
    double d=13.20121;
    byte by=127;
    boolean b=false;

    init(iArr, 122);
    init(fArr, 48.40F);

    if (i >= ((-(++iArr[(i >>> 1) % N])) + (++i1))) {
        for (i = 2; i < 97; ++i) {
            iArr[i] = s;
        }
    } else {
        for (i2 = 83; i2 > 2; i2--) {
            f += ((-(i1 - i2)) + ((i + i2) + i2));
            d = ((Main.instanceCount++) - (i1 + by));
        }
        Main.instanceCount >>= Main.instanceCount;
    }
    i3 = 1;
    do {
        i1 -= (int)((Main.instanceCount++) - ((Main.instanceCount >> Main.instanceCount) - Math.max(-19379, 15562)));
        s = (short)Main.instanceCount;
        for (f1 = 5; f1 < 90; ++f1) {
            f = (i3 - i4);
            Main.instanceCount = (-(-(i3 - by)));
            iArr[(int)(f1 - 1)] <<= (int)(((Main.instanceCount = 5) + Main.instanceCount) + Math.abs(iArr[(int)(f1)]));
            i4 = (int)((fArr[(int)(f1)] - (i1++)) + ((i1 << i4) + (i3 - i1)));
            i1 = (++i1);
            for (i5 = 1; i5 < 49; ++i5) {
                i1 += (((i5 * Main.instanceCount) + i3) - i2);
                i4 += (6242 + (i5 * i5));
                i1 -= (int)(Main.instanceCount + ((i2 * -76.174F) - (-50584 * (by - Main.instanceCount))));
                i1 <<= (int)(Math.max(i2 * i6, i1 + 238) + Main.instanceCount);
                b = b;
                i6 <<= i4;
                iArr[(int)(f1 + 1)] = (i4--);
                i4 -= (iArr[i3]--);
            }
        }
    } while (++i3 < 87);

    System.out.println("i s i1 = " + i + "," + s + "," + i1);
    System.out.println("i2 f d = " + i2 + "," + Float.floatToIntBits(f) + "," + Double.doubleToLongBits(d));
    System.out.println("by i3 f1 = " + by + "," + i3 + "," + Float.floatToIntBits(f1));
    System.out.println("i4 i5 i6 = " + i4 + "," + i5 + "," + i6);
    System.out.println("b iArr fArr = " + (b ? 1 : 0) + "," + checkSum(iArr) + "," +
        Double.doubleToLongBits(checkSum(fArr)));

    System.out.println("Main.instanceCount = " + Main.instanceCount);
}
}
