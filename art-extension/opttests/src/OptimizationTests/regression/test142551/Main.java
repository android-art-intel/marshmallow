/*
 * Copyright (C) 2015 Intel Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by Dalvik Fuzzer tool (3.1.001). Wed Oct  2 15:58:19 2013

package OptimizationTests.regression.test142551;

import OptimizationTests.regression.shared.*;

public class Main extends FuzzerUtils {

    public static final int N = 30;

    public static void main(String[] i9) {

        int l = 40128, c = -64721, p = -34136, nf = -39258, j = -27668, f = -12741, h = 39800, nh = -36123, o = 28757, fht = 19424, z = -23846, er = 47542, fud = -35472, m = 39085, t = 34612, ud[] = new int[N], d66[] = new int[N];
        short vst[] = new short[N];
        double g[] = new double[N];
        byte k = 39;
        float e0w = 72.488F, lz = 44.726F, r[] = new float[N];
        long hx = -2610806101438140344L, cl = 1033033924177124893L, ld = 3965088070972473488L, dv8 = 1634350849840412255L, u[] = new long[N];

        init(u, 6119611457739659639L);
        init(g, 61.984);
        init(ud, -40699);
        init(d66, -63408);
        init(vst, (short) 20164);
        init(r, -6.996F);

        for (l = 1; l < 27; l++) {
            hx <<= (u[l]--);
            c = (int) ((hx >> (-(p * k))) / (((long) (g[(9423 >>> 1) % N]--) >>> 1) + 1));
            for (nf = 1; nf < l; nf++) {
                try {
                    c = (110 / l);
                    ud[l + 1] = (p % -18574);
                    p = (c / ud[nf - 1]);
                } catch (ArithmeticException a_e) {
                }
                c = (int) (e0w + nf);
                j *= (int) (c - ((c - c) * (j + hx)));
                d66[l - 1] += (int) cl;
                if ((((er * fht) - (ld--)) * ((lz - fud) + vst[nf])) <= (dv8 - ((r[nf - 1]++) + (m + t)))) {
                    for (f = 1; f < l; ++f) {
                        cl *= (long) ((h = (int) (nh - e0w)) / ((((-l) - o) >>> 1) + 1));
                    }
                    e0w -= ((++j) + (-(nf - -98.907F)));
                    for (fht = 1; fht < nf; fht += 3) {
                        try {
                            p = (-246 % j);
                            c = (l / 1858922692);
                            z = (-18791 / ud[nf + 1]);
                        } catch (ArithmeticException a_e) {
                        }
                        j = -24220;
                    }
                }
            }
        }

        if (h == 2147483647) {
            System.out.println("TEST PASSED");
        } else {
            System.out.println("TEST FAILED: expected h = 2147483647; actual h = " + h);
        }
    }
}
