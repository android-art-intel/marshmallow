/*
 * Copyright (C) 2015 Intel Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by Dalvik Fuzzer tool (3.5.001). Sat Jan 17 04:15:38 2015
package OptimizationTests.regression.test5248;

import OptimizationTests.regression.shared.*;

public class Main extends FuzzerUtils {

    public static final int N = 100;

    public static int iFld=12;

public static void main(String[] strArr) {

    float f=-1.834F, fArr[]=new float[N];
    boolean b=false;
    byte by=-125;
    double d=-1.70085;
    long l=51370L, lArr[]=new long[N];
    int i=-26878, i1=5, i2=-2, i3=-12, i4=8368, iArr[]=new int[N];
    short s=-8987, sArr[]=new short[N];

    init(iArr, 5605);
    init(lArr, 8319868519851198201L);
    init(fArr, 2.489F);
    init(sArr, (short)27017);

    for (i = 89; i > 3; --i) {
        iFld += ((long)i ^ (long)s);
        f += (13 + (i * i));
        f += iArr[i + 1];
        d *= (--iFld);
        iFld = (int)f;
        i1 = 1;
        do {
            iFld += (-2 + (i1 * i1));
            d *= f;
        } while (++i1 < 96);
        iArr[i - 1] = (int)(--lArr[i]);
        f += (float)((-(d + l)) + (Long.reverseBytes(7L) - (--iFld)));
    }
    for (float f1 : fArr) {
        l = i;
        for (i2 = 2; i2 < 85; ++i2) {
            sArr[i2 + 1] = (short)iFld;
            l = l;
            iFld -= (int)(i2 - (++l));
            iFld = (int)(((l--) - 105L) - ((i2 - 83) * 12));
            by >>= (byte)((2.107557 * i1) - (--d));
            lArr[i2 - 1] -= (long)(-d);
        }
        iFld = (int)(-181 + l);
        iFld = Math.min(iFld = (iFld++), i3);
        for (i4 = 5; i4 < 80; i4++) {
            l = iFld;
            if (b) break;
        }
    }

    System.out.println("i s f = " + i + "," + s + "," + Float.floatToIntBits(f));
    System.out.println("d i1 l = " + Double.doubleToLongBits(d) + "," + i1 + "," + l);
    System.out.println("i2 by i3 = " + i2 + "," + by + "," + i3);
    System.out.println("i4 b iArr = " + i4 + "," + (b ? 1 : 0) + "," + checkSum(iArr));
    System.out.println("lArr fArr sArr = " + checkSum(lArr) + "," + Double.doubleToLongBits(checkSum(fArr)) + "," +
        checkSum(sArr));

    System.out.println("iFld = " + iFld);
}
}
