/*
 * Copyright (C) 2015 Intel Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by Android Runtime Fuzzer tool (3.5.002). Fri Aug  7 02:30:43 2015
// srand = 21188980238812627219864463728571568317235111978163599532420261024859

package OptimizationTests.regression.test2427;

import OptimizationTests.regression.shared.*;

public class Main extends FuzzerUtils {

    public static final int N = 100;

    public static byte byArrFld[]=new byte[N];
    public static float fFld=41.1014F, fFld1=0.696F;
    public static int iFld=-9;

    static {
        init(byArrFld, (byte)-105);
    }

    public static long lMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;

public static long lMeth(int i3, int i4, int i5) {

    byte by=57;
    long l1=56759L;
    short s1=1426, sArr[]=new short[N];
    double d1=0.58316;
    int i6=-35981, i7=-5, i8=-47;

    init(sArr, (short)-261);

    for (i6 = 3; i6 < 81; i6++) {
        i3 = (-i4);
        s1 += (short)((--s1) + (++i4));
        l1 >>= (--i5);
    }
    for (i7 = 2; i7 < 97; ++i7) {
        l1 += (9 + (i7 * i7));
        i5 <<= (int)(-(--fFld));
        i3 = -13;
        d1 += i3;
        i5 += (int)((i3++) - ((l1 - l1) + (i5 + l1)));
        l1 += (-i6);
        i8 >>= (-((++sArr[i7 + 1]) - (i3 * by)));
    }
    long meth_res = i3 + i4 + i5 + i6 + s1 + l1 + i7 + Double.doubleToLongBits(d1) + i8 + by + checkSum(sArr);
    lMeth_check_sum += meth_res;
    return (long)meth_res;
}

public static int iMeth(long l2, int i9) {

    long lArr[]=new long[N];
    byte by1=-30;
    short s2=3111;
    double d2=124.27786, dArr[]=new double[N];
    int i10=-14, iArr1[]=new int[N], iArr2[]=new int[N];

    init(dArr, 0.91997);
    init(iArr1, 39732);
    init(iArr2, 11);
    init(lArr, -11L);

    for (fFld1 = 5; fFld1 < 82; ++fFld1) {
        l2 <<= (long)(l2 - (dArr[(int)(fFld1)]++));
        iArr1[(int)(fFld1)] *= (int)(((by1 * -57019L) + iArr2[(int)(fFld1 + 1)]) + ((l2 * iFld) + (i9++)));
        l2 = (long)(((++by1) + (d2 - i9)) * (fFld = i9));
        i9 = (int)(((l2 & i9) + iFld) + (i9 * (++l2)));
        d2 *= (((iFld * -8) - (-i9)) * lArr[(int)(fFld1 + 1)]);
        for (i10 = 1; i10 < 38; i10 += 2) {
            iArr1[(int)(fFld1 - 1)] -= (int)l2;
            iArr1[(int)(fFld1 + 1)] %= (int)(((long)((i9 = (int)(d2 - l2)) * (by1 + (i10 + s2)))) | 1);
            i9 &= (int)-161L;
            i9 = iFld;
            iArr2[i10] <<= (int)l2;
        }
    }
    long meth_res = l2 + i9 + by1 + Double.doubleToLongBits(d2) + i10 + s2 + Double.doubleToLongBits(checkSum(dArr)) +
        checkSum(iArr1) + checkSum(iArr2) + checkSum(lArr);
    iMeth_check_sum += meth_res;
    return (int)meth_res;
}

public static void main(String[] strArr) {

    long l=2185436588011802904L, l3=-5069321469411921490L, l4=-9L, lArr1[]=new long[N];
    boolean b=false;
    float fArr[]=new float[N];
    short s=-5989;
    double d=-81.86195;
    int i=-18734, i1=51, i2=30435, i11=3, i12=-52794, i13=-65061, iArr[]=new int[N];

    init(iArr, -217);
    init(lArr1, 11L);
    init(fArr, 92.143F);

    for (i = 2; i < 94; i++) {
        for (i1 = 5; i1 < 81; i1++) {
            for (iFld = i1; iFld < 91; iFld += 2) {
                i2 = (int)3707561372180366561L;
                l = i;
                d -= ((Math.abs(i1) ^ i) - (iFld * (i2 * i)));
            }
        }
        fFld *= (Math.abs((long)(d - -26)) + Math.max((int)(i1 * fFld), (int)(l - l)));
        if (b = (((l < i1) == (i11 < fFld1)) || b)) {
            s = (short)iArr[i - 1];
            i2 /= (int)(((long)(lMeth((int)(-1 * (l - fFld)), i, 20174 - iMeth(l, i1)) - ((fFld - 85.212F) + s))) | 1);
            i11 = 1;
            while (++i11 < 40) {
                i2 *= (int)((l = i2) - (-(i * i1)));
                l = (i2++);
                i2 = (int)((i2--) * ((fFld++) * d));
                i2 += i11;
                i12 = 1;
                do {
                    i2 = ((++s) - (iArr[i12 + 1]--));
                    lArr1[i11 + 1] += (long)(--d);
                    switch ((i11 % 2) + 33) {
                    case 33:
                        fArr[i12 - 1] = ((byArrFld[i] -= (byte)(i2 + l)) + (-(i12 * -48074)));
                        i2 += (i2++);
                        i2 += (int)(-l);
                        break;
                    case 34:
                        iArr[i11 + 1] >>>= (int)(((i13 + i13) / ((i13--) | 1)) / (((l * l3) * (l3 * l4)) | 1));
                        fFld *= (float)((-fFld) + ((d * 10098) - iArr[i11 + 1]));
                    default:
                        s -= (short)lArr1[(i >>> 1) % N];
                    }
                } while (++i12 < i);
            }
        } else if ((167 << (long)((l4 = i12) + fFld1)) != ((fFld--) - (d--))) {
            d %= (((++i2) - -12) | 1);
        }
    }

    System.out.println("i i1 i2 = " + i + "," + i1 + "," + i2);
    System.out.println("l d s = " + l + "," + Double.doubleToLongBits(d) + "," + s);
    System.out.println("i11 i12 i13 = " + i11 + "," + i12 + "," + i13);
    System.out.println("l3 l4 b = " + l3 + "," + l4 + "," + (b ? 1 : 0));
    System.out.println("iArr lArr1 fArr = " + checkSum(iArr) + "," + checkSum(lArr1) + "," +
        Double.doubleToLongBits(checkSum(fArr)));

    System.out.println("iFld fFld fFld1 = " + iFld + "," + Float.floatToIntBits(fFld) + "," +
        Float.floatToIntBits(fFld1));
    System.out.println("byArrFld = " + checkSum(byArrFld));

    System.out.println("lMeth_check_sum: " + lMeth_check_sum);
    System.out.println("iMeth_check_sum: " + iMeth_check_sum);
}
}
