/*
 * Copyright (C) 2015 Intel Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by Dalvik Fuzzer tool (2.1.003). Thu Dec 19 21:52:59 2013
package OptimizationTests.regression.test160398;

import OptimizationTests.regression.shared.*;

public class Main extends FuzzerUtils {

    public static final int N = 300;

    public static long f8_check_sum = 0;

    public static int f8() {

        int k = 26672, k0 = -31591, e = -46740, l = 20161, g = -20979, ba = 63955, xh[] = new int[N], t[][] = new int[N][N], ma[] = new int[N];

        init(xh, -36027);
        init(t, 47977);
        init(ma, 10550);

        int v6 = 11;
        do {
            if (-39112 <= xh[12]) {
                for (k = 1; k < 21; k += 2) {
                    for (k0 = k; k0 < 9; k0++) {
                        t[k0 + 1][k0 - 1] = (int) ((xh[k0 + 1]) + (++e));
                    }
                }
                ma[26] *= (int) (e - -7395237422303166842L);
                xh[21] += (int) (l--);
            }
            for (g = 25; g > 1; --g) {
                for (ba = 7; ba > 1; --ba) {
                    xh[ba] = (int) (16103);
                }
            }
        } while (--v6 > 0);

        long meth_res = k + k0 + e + l + g + ba + checkSum(xh) + checkSum(t)
                + checkSum(ma);
        f8_check_sum += meth_res;
        return (int) meth_res;
    }

    public static void main(String[] f79) {

        long lfr = -1284952459326670288L;
        int u2b = 64309, g = 34372, sq = -4083, onq = 65011, ha = 22608, tdo = -35147, xw = 30083, tu = -8234, zk = -64645, yr7 = -320, zl = 55770, kp = -33427, yd8 = 29666, ai5[] = new int[N], o[] = new int[N], i8e[] = new int[N], ck[][] = new int[N][N], c[] = new int[N], fo[] = new int[N];
        short yho[][] = new short[N][N];

        init(ai5, 30324);
        init(o, -19220);
        init(yho, (short) -18976);
        init(i8e, -56152);
        init(ck, 63885);
        init(c, 25118);
        init(fo, -59072);

        if (((ai5[2]) - (++u2b)) + (o[18]) < ++g) {
            for (sq = 1; sq < 130; sq += 2) {
                for (onq = 4; onq > sq; onq--) {
                    yho[onq - 1][sq] = (short) (-272456057939208957L - (o[onq + 1]));
                }
            }
            for (ha = 250; ha > 1; --ha) {
                u2b -= (int) (o[ha - 1]);
            }
        }

        for (tdo = 1; tdo < 5; ++tdo) {
            o[tdo + 1] = (int) (ai5[tdo - 1] + ai5[tdo]);
        }

        if (i8e[8] <= o[18]) {
            for (xw = 230; xw > 1; xw--) {
                lfr -= (long) ((tu++) + (yho[xw + 1][xw + 1]));
                for (zk = xw; zk < 13; ++zk) {
                    f8();
                    ck[xw - 1][xw - 1] = (int) (xw + xw);
                }
                if (c[xw] != (ai5[xw - 1]) + (--yr7)) {
                    yr7 = (int) (ha - ((zl++) + (zl + zk)));
                    fo[xw - 1] += (int) (++kp);
                    for (yd8 = 1; yd8 < xw; yd8 += 3) {
                        c[yd8 - 1] -= (int) (kp);
                        c[xw - 1] += (int) (i8e[xw - 1] - c[xw + 1]);
                    }
                }
            }
        }

        System.out.println("long: " + lfr);
        System.out.println("int: " + u2b + "," + g + "," + sq + "," + onq + ","
                + ha + "," + tdo + "," + xw + "," + tu + "," + zk + "," + yr7
                + "," + zl + "," + kp + "," + yd8 + "," + checkSum(ai5) + ","
                + checkSum(o) + "," + checkSum(i8e) + "," + checkSum(ck) + ","
                + checkSum(c) + "," + checkSum(fo));
        System.out.println("short: " + checkSum(yho));

        System.out.println("f8_check_sum: " + f8_check_sum);
    }
}
