/*
 * Copyright (C) 2015 Intel Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by Dalvik Fuzzer tool (3.5.001). Sun Apr 26 08:05:21 2015
package OptimizationTests.regression.test1214;
                                 
import OptimizationTests.regression.shared.*;

public class Main extends FuzzerUtils {

    public static final int N = 100;

    public static double dFld=1.4365;

    public static long sMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;

public static short sMeth(double d, double d1, int i2) {

    float f=0.158F, fArr[]=new float[N];
    byte by=-46;
    long l1=-128L, lArr1[][]=new long[N][N];
    int i3=-14, i4=-9, i5=-77, iArr[]=new int[N];
    boolean b=false;

    init(lArr1, 11L);
    init(fArr, -38.853F);
    init(iArr, 26436);

    for (i3 = 94; i3 > 1; i3--) {
        f *= (Math.max(--i2, i2) * ((++f) + (-l1)));
        i2 = (int)(((i2 | l1) + (-10713 * (-17446 + (i3 - i2)))) * (i2 + (++i2)));
        for (i4 = 5; i4 < 94; ++i4) {
            i2 += (int)((i2++) % ((long)f | 1));
            i2 = Math.abs((int)((i4 * -6) + f));
        }
        if (true) {
            for (i5 = 1; i5 < 15; i5++) {
                i2 = (i4 + i3);
                if (i5 != 0) {
                    return (short)(Double.doubleToLongBits(d) + Double.doubleToLongBits(d1) + i2 + i3 +
                        Float.floatToIntBits(f) + l1 + i4 + i5 + by + (b ? 1 : 0) + checkSum(lArr1) +
                        Double.doubleToLongBits(checkSum(fArr)) + checkSum(iArr));
                }
                f *= i5;
                i2 <<= (int)((--lArr1[i5 + 1][i3]) * ((60888 + fArr[i3]) * dFld));
            }
        } else if (b) {
            by *= (byte)((f + iArr[i3]) * (f -= (l1++)));
        }
    }
    long meth_res = Double.doubleToLongBits(d) + Double.doubleToLongBits(d1) + i2 + i3 + Float.floatToIntBits(f) + l1 +
        i4 + i5 + by + (b ? 1 : 0) + checkSum(lArr1) + Double.doubleToLongBits(checkSum(fArr)) + checkSum(iArr);
    sMeth_check_sum += meth_res;
    return (short)meth_res;
}

public static int iMeth(int i8) {

    float f2=100.676F;
    long l2=-3388021684719558381L, lArr2[]=new long[N];
    int i9=-5, i11=30778, iArr2[]=new int[N];

    init(iArr2, 219);
    init(lArr2, -37767L);

    for (i9 = 5; i9 < 95; i9++) {
        iArr2[i9 - 1] += (iArr2[i9]++);
        l2 *= (i8++);
        i8 = (--i8);
        iArr2[i9] = i9;
        l2 >>= (long)(((24966 >> (l2 ^ l2)) + (i8 - f2)) * i9);
    }
    for (long l3 : lArr2) {
        for (int i10 : iArr2) {
            i11 = 1;
            do {
                try {
                    i8 = (i8 / iArr2[i11 + 1]);
                    iArr2[i11 + 1] = (-62115 / i10);
                    iArr2[i11 + 1] = (i11 / 46280);
                } catch (ArithmeticException a_e) {}
                i8 = (int)(dFld + dFld);
                i10 = (((i10 + i8) - (i8 - i11)) + (i8 * (-(++i8))));
            } while (++i11 < 92);
        }
    }
    long meth_res = i8 + i9 + l2 + Float.floatToIntBits(f2) + i11 + checkSum(iArr2) + checkSum(lArr2);
    iMeth_check_sum += meth_res;
    return (int)meth_res;
}

public static void main(String[] strArr) {

    float f1=-2.549F;
    byte by1=-49;
    long l=-20271L, l4=-153L, lArr[][]=new long[N][N];
    short s=-32282, sArr[]=new short[N];
    double dArr[]=new double[N];
    int i=3, i1=-23052, i6=33887, i7=14, i12=-142, i13=-169, i14=-101, iArr1[][]=new int[N][N];
    boolean b1=true;

    init(lArr, 789557250L);
    init(dArr, 1.97615);
    init(iArr1, 91);
    init(sArr, (short)1312);

    i = 1;
    while (++i < 80) {
        lArr[i + 1][i - 1] += (l - i);
        dFld *= (--i1);
        i1 = (sMeth(l * i, dArr[(i >>> 1) % N]++, (int)(l >> -55970L)) + (i1--));
        by1 += (byte)(i * i);
    }
    for (i6 = 3; i6 < 92; i6++) {
        l -= (long)-1.392F;
        i1 = (int)(i + l);
        f1 -= i;
    }
    i7 = 1;
    while (++i7 < 98) {
        iArr1[i7][i7 + 1] &= (int)(((l + l) * iMeth(i)) + ((++i1) - (--i1)));
        i1 += (i7 ^ (long)f1);
        i1 = (int)lArr[i7][i7 - 1];
    }
    dArr[(i7 >>> 1) % N] *= iArr1[(i >>> 1) % N][(i7 >>> 1) % N];
    for (i12 = 5; i12 < 90; i12++) {
        i1 = -46515;
        i1 += (iArr1[i12][i12] - 56);
        f1 -= by1;
    }
    if (b1) {
        for (i13 = 3; i13 < 79; i13++) {
            for (i14 = 1; i14 < 15; ++i14) {
                iArr1[i13][i13 + 1] = (int)((by1 - (l |= -71)) * ((s - 239L) / -29));
                l += (i14 * i14);
            }
            i1 &= i14;
        }
        i1 = sArr[(i12 >>> 1) % N];
    } else if (242 > ((i1 + iArr1[(-9 >>> 1) % N][(i13 >>> 1) % N]) + i6)) {
        f1 = (i13 + (iArr1[(i13 >>> 1) % N][(59039 >>> 1) % N] = (131 + (i1--))));
    } else if ((iArr1[(i1 >>> 1) % N][(i >>> 1) % N] * i) <= ((i1 = (i1 + -7)) / (((i % (i7 | 1)) * (i6 + l4)) | 1))) {
        i1 = (int)(-(f1 - (l - i13)));
    } else {
        i1 = i14;
    }

    System.out.println("i l i1 = " + i + "," + l + "," + i1);
    System.out.println("by1 i6 f1 = " + by1 + "," + i6 + "," + Float.floatToIntBits(f1));
    System.out.println("i7 i12 i13 = " + i7 + "," + i12 + "," + i13);
    System.out.println("i14 s l4 = " + i14 + "," + s + "," + l4);
    System.out.println("b1 lArr dArr = " + (b1 ? 1 : 0) + "," + checkSum(lArr) + "," +
        Double.doubleToLongBits(checkSum(dArr)));
    System.out.println("iArr1 sArr = " + checkSum(iArr1) + "," + checkSum(sArr));

    System.out.println("dFld = " + Double.doubleToLongBits(dFld));

    System.out.println("sMeth_check_sum: " + sMeth_check_sum);
    System.out.println("iMeth_check_sum: " + iMeth_check_sum);
}
}
