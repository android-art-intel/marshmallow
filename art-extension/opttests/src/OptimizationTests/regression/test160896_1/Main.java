/*
 * Copyright (C) 2015 Intel Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by Dalvik Fuzzer tool (3.1.004). Sat Dec 21 16:21:29 2013
package OptimizationTests.regression.test160896_1;

import OptimizationTests.regression.shared.*;

public class Main extends FuzzerUtils {

public static final int N = 30;

public static void main(String[] ez) {

    double j=21.444;
    boolean bt8=false;
    short bg=25867;
    int k=17397, c=-45606, mm=54597, tr2=-5586, o2j=-3979, yr=-64994, co=29320, n=40600, ph=63387, fav=-43755, wt[]=new
        int[N], g9[]=new int[N];
    long e=-2415963989695372664L, pe=8303211247714014237L, s=8955330155862657815L, jdz=2295739723554662740L, s2[]=new
        long[N];
    float k8=23.843F, m=36.137F, ek=61.208F;

    init(wt, -35447);
    init(g9, -57121);
    init(s2, 2185746855418769581L);

    e = 12;
    do {
        if (bt8 = (bt8 = ((k8 * k) != (pe * k8)))) continue;
        k = (int)(-((m % (e | 1)) + wt[(k >>> 1) % N]));
        c |= (int)(((s >> -16727) * (--jdz)) & k);
    } while ( --e > 0 );
    for (mm = 1; mm < 25; mm++) {
        c = 7767;
        try {
            g9[(int)((-(jdz + tr2)) >>> wt[mm - 1])] = (int)(o2j = (int)((k + pe) % ((o2j--) | 1)));
            j *= -45672;
            ek = (s2[mm] * (yr++));
            pe -= (s * g9[mm]);
            yr = wt[(int)((mm + k) - (m - 13159))];
        }
        catch (ArrayIndexOutOfBoundsException g) {
            bg %= (short)((~(long)((ek + k8) + tr2)) | 1);
            tr2 = (int)(-j);
            co ^= (int)(((n - -8077618444213304795L) / ((ph + s) | 1)) / (fav | 1));
        }
    }

    System.out.println("e bt8 k8 = " + e + "," + bt8 + "," + Float.floatToIntBits(k8));
    System.out.println("k pe m = " + k + "," + pe + "," + Float.floatToIntBits(m));
    System.out.println("c s jdz = " + c + "," + s + "," + jdz);
    System.out.println("mm tr2 o2j = " + mm + "," + tr2 + "," + o2j);
    System.out.println("j ek yr = " + Double.doubleToLongBits(j) + "," + Float.floatToIntBits(ek) + "," + yr);
    System.out.println("bg co n = " + bg + "," + co + "," + n);
    System.out.println("ph fav wt = " + ph + "," + fav + "," + checkSum(wt));
    System.out.println("g9 s2 = " + checkSum(g9) + "," + checkSum(s2));
    
}
}
