/*
 * Copyright (C) 2015 Intel Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by Dalvik Fuzzer tool (3.5.001). Tue Feb 17 11:43:34 2015
package OptimizationTests.regression.test1524;

import OptimizationTests.regression.shared.*;

public class Main extends FuzzerUtils {

    public static final int N = 100;

    public static int iFld=-7;

public static void main(String[] strArr) {

    float f=-11.434F, f1=51.153F;
    boolean b=false, bArr[]=new boolean[N];
    int i=200, i1=54, i2=-53037, iArr[]=new int[N];
    byte by=-78;
    long l=-226L, lArr[]=new long[N];
    double d=-2.18923, dArr[]=new double[N];

    init(bArr, true);
    init(iArr, -234);
    init(dArr, 0.19197);
    init(lArr, -41L);

    for (i = 1; i < 88; i++) {
        iFld = (int)(((d * 25528) + (iFld++)) - iFld);
        if (bArr[i - 1] = (((35 - i) * iFld) > (iFld--))) break;
        l = (((iFld - i) * (iFld++)) - (++iFld));
    }
    for (f = 83; f > 2; f--) {
        f1 = iArr[(int)(f + 1)];
        l = (long)((--l) + 1.905F);
        iFld -= i;
        iFld /= (int)((long)d | 1);
        for (i1 = 4; i1 < 83; i1++) {
            iFld += by;
            f1 += -2669370921370278284L;
            iArr[(int)(f - 1)] *= (int)(l - i);
            iFld >>>= (int)((68.24649 * i1) - iFld);
            for (i2 = 1; i2 < 38; i2++) {
                l += (long)f1;
                iFld += ((i1 - (i + iFld)) * i1);
                iArr[(int)(f - 1)] = iFld;
                iFld = (int)(++dArr[i2 - 1]);
                iFld *= (--iFld);
                iFld = i;
                iFld += (((i2 * l) + l) - iFld);
                iFld += i1;
                iFld *= iFld;
                b = ((iFld--) != lArr[i1]);
            }
        }
    }

    System.out.println("i d l = " + i + "," + Double.doubleToLongBits(d) + "," + l);
    System.out.println("f f1 i1 = " + Float.floatToIntBits(f) + "," + Float.floatToIntBits(f1) + "," + i1);
    System.out.println("by i2 b = " + by + "," + i2 + "," + (b ? 1 : 0));
    System.out.println("bArr iArr dArr = " + checkSum(bArr) + "," + checkSum(iArr) + "," +
        Double.doubleToLongBits(checkSum(dArr)));
    System.out.println("lArr = " + checkSum(lArr));

    System.out.println("iFld = " + iFld);
}
}
