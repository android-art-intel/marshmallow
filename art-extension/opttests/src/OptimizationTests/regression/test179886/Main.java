/*
 * Copyright (C) 2015 Intel Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by Dalvik Fuzzer tool (3.2.001). Sun Mar 16 00:02:59 2014
package OptimizationTests.regression.test179886;

import OptimizationTests.regression.shared.*;

public class Main extends FuzzerUtils {

    public static final int N = 500;

    public static void main(String[] m0) {

        short je[] = new short[N];
        boolean ni = false, zb[] = new boolean[N];
        double ry = -42.547, n7 = 101.721, lsn = 82.1019, gf = 25.966;
        long n6 = 2974754572343288835L, w1 = 8170259559860267755L, mn8 = 7015830462751513969L;
        float t = -93.287F;
        int wp1 = 6558, pr = -30540, jcn = 581, pqw = -9642, or7 = 65080, y = 36577, u = 62799, c = 62565, gzo = -44702, e = -37252, i6s = -60219, fu = 27029, os = -63542, zm = -61956, o = 22030, tx8[] = new int[N];

        init(tx8, -6584);
        init(zb, false);
        init(je, (short) -21175);

        for (wp1 = 23; wp1 < 422; wp1++) {
            n6 /= (long) ((long) (((long) (wp1 - t) & (long) (pr * ry)) + ((n7 - wp1) / ((long) t | 1))) | 1);
            w1 += (long) ((-jcn) * n7);
            if (((t - (tx8[wp1 + 1] = pqw)) != (-4339998871711367848L / ((pqw + jcn) | 1)))
                    || (zb[wp1] ^ false))
                break;
        }
        for (or7 = 5; or7 < 378; or7++) {
            y ^= u;
        }
        for (c = 28; c < 454; c += 3) {
            w1 = (-((-(5865 - pqw)) - (gzo - c)));
            e = c;
            do {
                pqw = je[e - 1];
                ni = (((n6 - lsn) * (-(pr--))) <= (i6s * e));
                u -= (int) (((t - fu) + (os / (zm | 1))) * ((-(c << pr)) >> (~(tx8[c - 1]++))));
                w1 = w1;
            } while (--e > 0);
            o -= (int) (t + ((mn8 = 7067746436574040522L) + gf));
            o = (os - pr);
        }

        System.out.println("wp1 n6 t = " + wp1 + "," + n6 + ","
                + Float.floatToIntBits(t));
        System.out.println("pr ry n7 = " + pr + ","
                + Double.doubleToLongBits(ry) + ","
                + Double.doubleToLongBits(n7));
        System.out.println("w1 jcn pqw = " + w1 + "," + jcn + "," + pqw);
        System.out.println("or7 y u = " + or7 + "," + y + "," + u);
        System.out.println("c gzo e = " + c + "," + gzo + "," + e);
        System.out.println("ni lsn i6s = " + ni + ","
                + Double.doubleToLongBits(lsn) + "," + i6s);
        System.out.println("fu os zm = " + fu + "," + os + "," + zm);
        System.out.println("o mn8 gf = " + o + "," + mn8 + ","
                + Double.doubleToLongBits(gf));
        System.out.println("tx8 zb je = " + checkSum(tx8) + "," + checkSum(zb)
                + "," + checkSum(je));

    }
}
