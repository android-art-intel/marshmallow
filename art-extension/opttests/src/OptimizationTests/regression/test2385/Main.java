/*
 * Copyright (C) 2015 Intel Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by Android Runtime Fuzzer tool (3.5.002). Fri Jul 31 10:51:26 2015
// srand = 14410633621916095997572574866372922175008181380526043208247658676285

package OptimizationTests.regression.test2385;

import OptimizationTests.regression.shared.*;

public class Main extends FuzzerUtils {

    public static final int N = 100;


public static void main(String[] strArr) {

    byte by=-78, by1=34;
    long l=-468L, lArr[]=new long[N];
    int i=12, i1=-9, i2=-36165, i3=51877, i4=-219, iArr[]=new int[N];
    double d=-121.49879;
    short s=17257;
    float f=-2.234F;

    init(iArr, -47147);
    init(lArr, 9L);

    for (i = 80; i > 4; i -= 3) {
        d *= (i1--);
        i2 = 1;
        do {
            i1 -= (int)30770L;
            l += i1;
            l = (i1++);
            iArr[i2] ^= (i1++);
            for (i3 = 2; i3 < 74; ++i3) {
                i1 += (--iArr[i]);
                iArr[i + 1] = (int)(-((-(i2 - f)) - (i1--)));
                i1 -= (int)(--l);
                i1 &= i3;
                d = (by %= (byte)((--i1) | 1));
                f = l;
                f = (float)(0.53303 * (iArr[i + 1]++));
                i1 += (int)(i3 * ((i2 - by1) * (-(~(-7 - (l * l))))));
            }
            l += (long)((f++) + ((iArr[i2]++) + (i2 + f)));
            for (i4 = 3; i4 < 75; ++i4) {
                i1 ^= (int)(l + ((i1 / (s | 1)) - l));
            }
            d -= (i1--);
            f *= 18426;
        } while ((i2 += 2) < 87);
        lArr[i - 1] &= (long)(((i1--) * (l--)) - (--d));
        l = l;
        by *= (byte)-198;
        l = (long)d;
    }

    System.out.println("i d i1 = " + i + "," + Double.doubleToLongBits(d) + "," + i1);
    System.out.println("i2 l i3 = " + i2 + "," + l + "," + i3);
    System.out.println("f by by1 = " + Float.floatToIntBits(f) + "," + by + "," + by1);
    System.out.println("i4 s iArr = " + i4 + "," + s + "," + checkSum(iArr));
    System.out.println("lArr = " + checkSum(lArr));

}
}
