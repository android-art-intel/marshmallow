/*
 * Copyright (C) 2015 Intel Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by Android Runtime Fuzzer tool (4.1.002). Mon Apr 18 01:11:23 2016
// srand = 114400631603722565432500937334613208493

package OptimizationTests.regression.test3886;

import OptimizationTests.regression.shared.*;

public class Main extends FuzzerUtils {

    public static final int N = 100;

    public static long instanceCount=12L;
    public static int iFld=-172;

public static void main(String[] strArr) {

    float f=-2.565F, f1=0.941F;
    int i=41697, i1=-6, i3=-2, i5=-64482, iArr[]=new int[N];
    short s=-2794;
    byte by=4;
    double d=59.44725;
    long lArr[]=new long[N];

    init(lArr, 109L);
    init(iArr, -77);

    for (f = 86; f > 3; f--) {
        for (i = 4; i < 85; i++) {
            lArr[i] += i;
        }
        Main.iFld = Main.iFld;
        lArr[(int)(f - 1)] -= i;
        Main.iFld = (int)(((s + Main.instanceCount) - (i - 12)) + iArr[(int)(f)]);
        Main.instanceCount >>= (Main.instanceCount = (Main.iFld >> (Main.instanceCount - Main.iFld)));
        for (i1 = 4; i1 < 83; i1++) {
            Main.iFld += (int)(f1--);
            lArr[(int)(f)] += i;
            Main.iFld += -9;
            Main.iFld = ((++Main.iFld) - (i1 + i1));
        }
        Main.instanceCount += (long)(f * by);
        for (int i2 : iArr) {
            int i4=165;
            f1 -= (Main.instanceCount - ((-186 + (lArr[(int)(f)] -= 206)) + (++Main.instanceCount)));
            Main.instanceCount += (long)(d * (iArr[(int)(f + 1)]--));
            switch (((((s * i2) >>> 1) % 2) * 5) + 33) {
            case 39:
                i3 += (int)(-2.120F + (f * f));
                d += (--Main.instanceCount);
                break;
            case 42:
                iArr[(int)(f + 1)] *= (i2 + (by++));
                i2 = (int)((i2 % (Main.instanceCount | 1)) * Math.abs(149 >> Main.iFld));
                break;
            default:
                i3 = (int)(((Main.iFld--) + (f / -60)) * ((i2 - Main.iFld) - by));
                Main.iFld *= (int)(Main.instanceCount++);
                i4 = (((i2 + Main.iFld) + (s + -3)) * (--i2));
            }
            i2 = (int)(i4 + ((--i5) + (Main.instanceCount - Main.instanceCount)));
        }
    }

    System.out.println("f i s = " + Float.floatToIntBits(f) + "," + i + "," + s);
    System.out.println("i1 f1 by = " + i1 + "," + Float.floatToIntBits(f1) + "," + by);
    System.out.println("d i3 i5 = " + Double.doubleToLongBits(d) + "," + i3 + "," + i5);
    System.out.println("lArr iArr = " + checkSum(lArr) + "," + checkSum(iArr));

    System.out.println("Main.instanceCount Main.iFld = " + Main.instanceCount + "," + Main.iFld);
}
}
//DEBUG  Test ->  Test
//DEBUG  main ->  main Test
//DEBUG  Depth = 1
//DEBUG  Classes = 1
//DEBUG  static objects = {}
