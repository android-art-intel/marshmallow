/*
 * Copyright (C) 2015 Intel Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by Dalvik Fuzzer tool (2.1.003). Fri Dec 20 01:57:43 2013
package OptimizationTests.regression.test160411;

import OptimizationTests.regression.shared.*;

public class Main extends FuzzerUtils {

    public static final int N = 30;

    public static void main(String[] a) {

        int k = 19116, b1i = -34020, h = -32942, r4a = -32325, c = -31166, i5 = -57446, r1 = 22586, xda = 37750, o60 = -2516, syt = -36134, s1d = 51791, vl = 6942, sb = -12776, dh3[] = new int[N], i[] = new int[N], v[] = new int[N], kvj[][] = new int[N][N], t[] = new int[N], cfd[][] = new int[N][N], cn[] = new int[N], yqr[] = new int[N], nj6[] = new int[N], nqs[][] = new int[N][N], ie3[][] = new int[N][N], p[] = new int[N];
        long l = 3995200464860504357L, lqz = 3017834285196665000L, x5[][] = new long[N][N], j1[] = new long[N], v0[][] = new long[N][N], e[][] = new long[N][N];
        byte q[][] = new byte[N][N];
        char qr6 = 37237;

        init(dh3, -24463);
        init(i, -41547);
        init(v, -6359);
        init(kvj, -58455);
        init(t, -23313);
        init(cfd, 34113);
        init(x5, -5775084374046633472L);
        init(q, (byte) 44);
        init(cn, -41025);
        init(yqr, -31832);
        init(nj6, 8999);
        init(nqs, -47897);
        init(j1, 7226293537608043262L);
        init(ie3, -17143);
        init(v0, 9215290334945793107L);
        init(e, 437529043436073484L);
        init(p, -55509);

        int u = 11;
        while (--u > 0) {
            for (i5 = 14; i5 > 1; i5--) {
                t[i5 + 1] = (int) (-yqr[i5]);
                nj6[i5 - 1] += (int) (t[i5 - 1]);
            }
        }

        for (r1 = 1; r1 < 8; r1++) {
            c -= (int) (nqs[r1 - 1][r1 - 1]);
            try {
                xda = (int) (j1[r1] / -119);
                ie3[r1 + 1][r1] = (int) (o60 / 1697890119);
                syt = (int) (229 / v0[r1 - 1][r1 - 1]);
                xda = (int) (749662251 / s1d);
                h = (int) (e[r1][r1] % -113);
            } catch (ArithmeticException a_e) {
            }
            if (lqz > 0)
                break;
            nqs[r1][r1 + 1] = (int) (p[r1 + 1]);
        }

        for (vl = 11; vl > 1; vl--) {
            for (sb = 11; sb > 1; sb--) {
                cn[vl + 1] = (int) (b1i);
                cn[sb - 1] = (int) (vl);
            }
        }

        long qq = checkSum(cn);
        if (qq == -88549) {
            System.out.println("TEST PASSED");
        } else {
            System.out.println("TEST FAILED; expected qq = -88549; actual qq = "
                    + qq);
        }
    }
}
