/*
 * Copyright (C) 2015 Intel Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by Android Runtime Fuzzer tool (4.1.002). Wed Mar  2 18:52:50 2016
// srand = 5672365011157386755224531890454556034

package OptimizationTests.regression.test3671;

import OptimizationTests.regression.shared.*;

public class Main extends FuzzerUtils {

    public static final int N = 100;

    public static long instanceCount=37733L;
    public static boolean bFld=false;
    public static byte byFld=-53;
    public static int iArrFld[]=new int[N];
    public static long lArrFld[]=new long[N];
    public static short sArrFld[]=new short[N];

    static {
        init(Main.iArrFld, -231);
        init(Main.lArrFld, 5L);
        init(Main.sArrFld, (short)-15666);
    }

    public static long lMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;

public static long lMeth(int i3, int i4, long l) {

    int i5=-3, i6=125, i7=-24612;
    double d1=-8.25887;
    byte by=-23;

    for (i5 = 4; i5 < 96; i5 += 3) {
        d1 = (i3 * (Main.iArrFld[i5 - 1]++));
        i4 *= (int)-2.2245;
        i4 = by;
        for (i6 = 2; i6 < 39; ++i6) {
            i4 = ((++by) - (--i3));
            Main.bFld = Main.bFld;
            i4 += i4;
            Main.iArrFld[i6] |= (int)((i4--) * ((i6 / (i4 | 1)) * (Main.instanceCount++)));
            for (i7 = 2; i7 < 52; i7++) {
                by -= (byte)((-(by - l)) + ((++by) - (i6 + i6)));
            }
            i4 += (i6 + by);
        }
    }
    long meth_res = i3 + i4 + l + i5 + Double.doubleToLongBits(d1) + by + i6 + i7;
    lMeth_check_sum += meth_res;
    return (long)meth_res;
}

public static void vMeth(int i13) {

    int i14=0;
    double d2=1.78127;
    float f1=-54.326F;

    for (i14 = 2; i14 < 93; ++i14) {
        i13 = Main.sArrFld[i14 + 1];
        Main.lArrFld[i14] -= (Main.iArrFld[i14]++);
        i13 *= (int)(((d2 * Main.byFld) - (Main.instanceCount * 27877)) + ((f1 + d2) * (-(i13 - Main.instanceCount))));
    }
    vMeth_check_sum += i13 + i14 + Double.doubleToLongBits(d2) + Float.floatToIntBits(f1);
}

public static void main(String[] strArr) {

    int i=12, i2=-13, i8=-187, i9=23723, i10=-46847, i11=3342, i12=46488, iArr[]=new int[N];
    double d=-74.32407;
    float f=124.181F;
    byte by1=60;
    short s=17351;
    long l1=-12L;

    init(iArr, 30033);

    for (i = 3; i < 79; i++) {
        d *= (i << (long)(-(i + d)));
        Main.bFld = Main.bFld;
    }
    for (int i1 : iArr) {
        i1 += (int)((Main.instanceCount--) - (--i1));
        if (Main.bFld = (((i1 - i1) - (48.2174 - (Main.instanceCount + i2))) <= (Integer.reverseBytes(i1) - (++d))))
            continue;
        i2 = (--iArr[(i1 >>> 1) % N]);
        i1 += (int)((iArr[(i2 >>> 1) % N] >>= (int)lMeth(i2, i2, Main.instanceCount)) * (i1 &=
            (int)Math.abs(Main.instanceCount)));
        i2 >>= (int)((Main.instanceCount & (i2 + Main.instanceCount)) + (--i2));
        f = f;
        for (i8 = 2; i8 < 82; ++i8) {
            i1 = (++i1);
            Main.instanceCount = (by1++);
            i1 *= (int)((i * (d--)) + s);
            f += ((Main.instanceCount - (s - l1)) - (i9 + (iArr[i8 - 1]--)));
        }
        i1 = (int)(Math.abs(i2 >> i2) * ((f - l1) * Math.min(i2, -90)));
    }
    i10 = 86;
    do {
        i2 -= ((i9 - i2) - 35644);
        i9 -= (int)(i2 * (by1 - (-97.533F + (-i8))));
        i2 = ((i2 >>= i) - i11);
        Main.lArrFld[i10] = (((Main.instanceCount &= by1) - 5L) - (i8 * (-(~(1 - (i10 + i8))))));
    } while (--i10 > 0);
    for (i12 = 2; i12 < 76; i12++) {
        i9 >>>= Main.iArrFld[i12];
    }
    vMeth(i9);
    s += (short)(f++);

    System.out.println("i d i2 = " + i + "," + Double.doubleToLongBits(d) + "," + i2);
    System.out.println("f i8 by1 = " + Float.floatToIntBits(f) + "," + i8 + "," + by1);
    System.out.println("s l1 i9 = " + s + "," + l1 + "," + i9);
    System.out.println("i10 i11 i12 = " + i10 + "," + i11 + "," + i12);
    System.out.println("iArr = " + checkSum(iArr));

    System.out.println("Main.instanceCount Main.bFld Main.byFld = " + Main.instanceCount + "," + (Main.bFld ? 1 : 0) +
        "," + Main.byFld);
    System.out.println("Main.iArrFld Main.lArrFld Main.sArrFld = " + checkSum(Main.iArrFld) + "," +
        checkSum(Main.lArrFld) + "," + checkSum(Main.sArrFld));

    System.out.println("lMeth_check_sum: " + lMeth_check_sum);
    System.out.println("vMeth_check_sum: " + vMeth_check_sum);
}
}
