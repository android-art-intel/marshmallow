/*
 * Copyright (C) 2015 Intel Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by Dalvik Fuzzer tool (3.5.001). Fri Jan  9 23:04:32 2015
package OptimizationTests.regression.test1136;

import OptimizationTests.regression.shared.*;

public class Main extends FuzzerUtils {

    public static final int N = 100;

    public static int iFld=-18644;

public static void main(String[] strArr) {

    byte by=81;
    long l=0L, lArr[]=new long[N];
    float f=-1.296F;
    double d=-83.44845, dArr[]=new double[N];
    short s=-30461, sArr[]=new short[N];
    int i=-34591, i1=-9, i2=13448, i3=-1, i4=13824, iArr[][]=new int[N][N];

    init(lArr, -1061702730L);
    init(iArr, -10);
    init(dArr, 0.88662);
    init(sArr, (short)5193);

    for (i = 1; i < 79; i++) {
        d += s;
        l -= lArr[(i >>> 1) % N];
        d *= (l * i1);
        i1 = (int)(l--);
        for (i2 = 1; i2 < i; ++i2) {
            f = 0;
            for (i3 = 22; i3 > 1; i3 -= 2) {
                l += (s + i);
                iArr[i3 - 1][i] = i2;
                i1 += (int)((iArr[i + 1][i] * Math.max(i, i2)) - (++d));
                i1 = (int)(((i3 + f) - i1) - ((i / (i1 | 1)) * (i1--)));
                i1 *= (iArr[i2 + 1][i3] - (s++));
                l += by;
                dArr[i - 1] -= iArr[i3 - 1][i3];
                dArr[i + 1] -= (((++i1) * i3) * i);
                i1 = (int)(((i3 - l) + (i2 + i3)) - iArr[i3 + 1][i + 1]);
            }
            l >>= l;
        }
        i1 += (((i * i) + i1) - s);
        i1 = i1;
        lArr[i] = (long)(((65L << (i1 - l)) % (Math.min(i, i1) | 1)) + ((i3 + f) - sArr[i + 1]));
    }
    for (iFld = 3; iFld < 80; iFld++) {
        for (i4 = 1; i4 < 19; i4++) {
            l += -220;
            i1 *= 6;
        }
    }

    System.out.println("i d s = " + i + "," + Double.doubleToLongBits(d) + "," + s);
    System.out.println("l i1 i2 = " + l + "," + i1 + "," + i2);
    System.out.println("f i3 by = " + Float.floatToIntBits(f) + "," + i3 + "," + by);
    System.out.println("i4 lArr iArr = " + i4 + "," + checkSum(lArr) + "," + checkSum(iArr));
    System.out.println("dArr sArr = " + Double.doubleToLongBits(checkSum(dArr)) + "," + checkSum(sArr));

    System.out.println("iFld = " + iFld);
}
}
