/*
 * Copyright (C) 2015 Intel Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by Android Runtime Fuzzer tool (3.5.002). Mon Jun 29 14:40:30 2015
// srand = 26075427942406749592857512685083789305493408459287477330423242513955

package OptimizationTests.regression.test12373;

import OptimizationTests.regression.shared.*;

public class Main extends FuzzerUtils {

    public static final int N = 100;

    public static float fArrFld[]=new float[N];

    static {
        init(fArrFld, 0.747F);
    }

    public static long fMeth_check_sum = 0;

public static float fMeth(int i1, int i2) {

    float f=0.172F;
    int i3=-7, i4=-11, i5=-169, iArr1[]=new int[N];
    double d=96.95063, d1=-84.110571;
    byte by=48, byArr[]=new byte[N];
    long l=-147L, l1=2423779744L, lArr[][]=new long[N][N];

    init(iArr1, -4);
    init(byArr, (byte)34);
    init(lArr, 1276702125L);

    for (d = 1; d < 88; d += 3) {
        try {
            i1 *= (int)(-((i1 + l) * (--f)));
            for (i3 = 1; i3 < 46; ++i3) {
                l = (i2--);
                by -= (byte)((iArr1[(int)(d + 1)] = byArr[i3]) + ((65 * i1) + Math.abs(i3)));
                d1 -= (++i2);
            }
            l += (by = (byte)((++i1) + (l * i4)));
        }
        catch (NegativeArraySizeException exc) {
            i4 -= (int)(((i2 - l) * (++f)) + i4);
            for (i5 = 2; i5 < 80; ++i5) {
                iArr1[i5] = (int)l1;
                i2 = (int)((l1 %= ((i5 * i4) | 1)) + ((i5 - 53076) * (i2 += (int)f)));
            }
        }
        finally {
            l = (long)(lArr[(int)(d + 1)][(int)(d - 1)] % (((long)(fArrFld[(int)(d)] - (l + -9))) | 1));
        }
    }
    long meth_res = i1 + i2 + Double.doubleToLongBits(d) + l + Float.floatToIntBits(f) + i3 + by +
        Double.doubleToLongBits(d1) + i4 + i5 + l1 + checkSum(iArr1) + checkSum(byArr) + checkSum(lArr);
    fMeth_check_sum += meth_res;
    return (float)meth_res;
}

public static void main(String[] strArr) {

    boolean b=false;
    float f1=-78.11F, f2=2.491F;
    int i=-41855, i6=45566, i7=126, i8=-69, i9=44322, iArr[]=new int[N];
    double d2=-2.76244;
    byte by1=125;
    short s=23725;
    long l2=4651179905347731838L, lArr1[]=new long[N];

    init(iArr, 225);
    init(lArr1, -7370137526057670417L);

    i = 1;
    while (++i < 85) {
        iArr[i - 1] += (int)fMeth((int)(-(i + 6L)), 63850);
        for (f1 = 1; f1 < i; f1++) {
            for (i6 = 1; i6 < 4; ++i6) {
                i7 = (++i7);
                l2 -= (126 * (i7--));
                l2 += (6 + (i6 * i6));
                i7 <<= (i7--);
                lArr1[i] += ((3015 * (i8 * s)) + i7);
                i7 += iArr[(int)(f1)];
                l2 += Math.max((int)(-(2L + by1)), 33);
                i8 = (i8++);
            }
            f2 += 7;
            b = b;
            for (i9 = 1; i9 < 2; ++i9) {
                l2 = (l2--);
                by1 -= (byte)((iArr[i9]--) * (f2 - (i8 + 31235)));
                f2 = (float)((d2 + (l2++)) + (l2 = (long)(i + 1.842F)));
                i8 = (int)(++d2);
                i7 = (int)(((f2--) - (i7 - f1)) + ((6L - (i6 - i8)) + (f2 % (i8 | 1))));
                l2 = i7;
                i8 += (((i9 * i8) + l2) - i7);
                d2 *= (l2 - (--f2));
                i7 = (int)((++i7) + ((i6 - -2.439F) - (i8++)));
                i8 = (int)f1;
            }
        }
    }

    System.out.println("i f1 i6 = " + i + "," + Float.floatToIntBits(f1) + "," + i6);
    System.out.println("i7 l2 i8 = " + i7 + "," + l2 + "," + i8);
    System.out.println("s by1 f2 = " + s + "," + by1 + "," + Float.floatToIntBits(f2));
    System.out.println("b i9 d2 = " + (b ? 1 : 0) + "," + i9 + "," + Double.doubleToLongBits(d2));
    System.out.println("iArr lArr1 = " + checkSum(iArr) + "," + checkSum(lArr1));

    System.out.println("fArrFld = " + Double.doubleToLongBits(checkSum(fArrFld)));

    System.out.println("fMeth_check_sum: " + fMeth_check_sum);
}
}
