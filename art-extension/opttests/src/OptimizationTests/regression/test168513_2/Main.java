/*
 * Copyright (C) 2015 Intel Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by Dalvik Fuzzer tool (3.1.005). Mon Feb  3 06:22:21 2014
package OptimizationTests.regression.test168513_2;

import OptimizationTests.regression.shared.*;

public class Main extends FuzzerUtils {

    public static final int N = 120;

    public static void main(String[] x) {

        double ybc = -107.28, zi0 = -13.227;
        int a = 33243, bp = -3843, lj4 = 17553, ind = -44352, ob = -63076, kr = -52537, o = -42871, u = -39139, xuw = -12191, yvu = 11440, i[] = new int[N], u34[] = new int[N];
        boolean x4 = true, srj = false, s[] = new boolean[N];
        float lhl = -123.34F, d4c = -32.973F, run = -56.772F;
        short o1p = 230, uv9 = -9305;
        byte hp = 126;
        long q = -426508661477352819L, e8f[] = new long[N];

        init(i, -15836);
        init(s, false);
        init(u34, -60753);
        init(e8f, 3299128051348304721L);

        for (int jwx : i) {
            for (a = 3; a < 73; ++a) {
                try {
                    for (bp = a; bp < 59; ++bp) {
                        o1p -= (short) (lj4 = ((++ind) - (++i[bp - 1])));
                        if ((x4 = false) & srj)
                            break;
                    }
                    lhl = -3346395838910807949L;
                    ob %= (lj4 | 1);
                    lj4 -= -39046;
                    ind /= (int) ((long) (lhl++) | 1);
                    i[a] *= (int) ((long) (60370 * (kr - ybc)) & ((q + 81) - (-(q = -54909))));
                } catch (ArrayIndexOutOfBoundsException j) {
                    ob += (int) (((bp * bp) / ((q++) | 1)) + ((-21941 * (-(++o))) - (q--)));
                    if (s[a - 1] = false)
                        break;
                }
                o <<= (int) (d4c + 61771);
                run -= (float) ((--zi0) - bp);
            }
            try {
                lj4 -= (-((--lj4) & (u + xuw)));
                d4c = (-lj4);
                u34[(-10391 >>> 1) % N] = (int) e8f[(-26595 >>> 1) % N];
                e8f[(59979 >>> 1) % N] += hp;
            } catch (ArithmeticException vi) {
                kr -= (int) ((long) (yvu + (-70.524F - (47.867 * (-38747 ^ jwx)))) << uv9);
            }
        }

        System.out.println("a bp o1p = " + a + "," + bp + "," + o1p);
        System.out.println("lj4 ind x4 = " + lj4 + "," + ind + "," + x4);
        System.out.println("srj lhl ob = " + srj + ","
                + Float.floatToIntBits(lhl) + "," + ob);
        System.out.println("kr ybc q = " + kr + ","
                + Double.doubleToLongBits(ybc) + "," + q);
        System.out.println("o d4c run = " + o + "," + Float.floatToIntBits(d4c)
                + "," + Float.floatToIntBits(run));
        System.out.println("zi0 u xuw = " + Double.doubleToLongBits(zi0) + ","
                + u + "," + xuw);
        System.out.println("hp yvu uv9 = " + hp + "," + yvu + "," + uv9);
        System.out.println("i s u34 = " + checkSum(i) + "," + checkSum(s) + ","
                + checkSum(u34));
        System.out.println("e8f = " + checkSum(e8f));

    }
}
