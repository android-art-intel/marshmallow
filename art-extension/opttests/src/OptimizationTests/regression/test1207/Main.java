/*
 * Copyright (C) 2015 Intel Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by Dalvik Fuzzer tool (3.4.001). Sun Sep 14 06:53:49 2014
package OptimizationTests.regression.test1207;

import OptimizationTests.regression.shared.*;

public class Main extends FuzzerUtils {

    public static final int N = 100;


public static void main(String[] g) {

    boolean xt=true, f0j[]=new boolean[N];
    short gc4=-10989, o4[]=new short[N];
    int d=7656, ket=-64665, fe=-49408, rjm=-54189, pi=43288, l[]=new int[N];
    float ov=37.238F, i4[]=new float[N];
    long kn=7894422531686147392L, b=9121274411542815083L, s[]=new long[N];
    double bp=-75.949;

    init(s, 7691486449258450535L);
    init(l, -16556);
    init(f0j, true);
    init(i4, -8.272F);
    init(o4, (short)-23823);

    for (d = 5; d < 89; ++d) {
        for (ket = 1; ket < 32; ket++) {
            s[ket + 1] -= (long)(++bp);
        }
        bp += (((kn | -2790397657561294032L) + ov) + (++kn));
        l[d - 1] = (int)-3223609957215239911L;
        l[d + 1] -= (int)((kn - (s[d - 1] += gc4)) + d);
        if (f0j[d - 1] = xt) {
            kn = (long)(((ov * ket) - 82940572340872620L) - ((~(kn + ket)) - (-63431 - (kn - kn))));
            l[d] *= (int)(ov = ((61448 - l[d]) - (ket - d)));
            ov -= ((l[d]++) >> (long)((kn--) + (ov - d)));
            fe += (((d * fe) + d) - d);
        } else if (ov != ket) {
            bp += 53903;
            fe -= fe;
            l[d - 1] = -45865;
        } else {
            for (rjm = 3; rjm < 57; ++rjm) {
                l[rjm] += (int)(fe + (ov++));
                ov -= (float)(kn - bp);
                fe -= (int)(--b);
                fe = (int)((fe++) * (--i4[d - 1]));
                pi = (int)((bp++) - -59808);
                b += ((long)rjm ^ (long)ket);
                o4[rjm + 1] = (short)(++bp);
                l[rjm + 1] ^= (int)(b * (d * (++pi)));
                i4[d + 1] += ((gc4 = (short)(pi * fe)) * (d >> (fe >> pi)));
            }
            pi %= (int)((long)(ov + -56665) | 1);
        }
    }

    System.out.println("d ket bp = " + d + "," + ket + "," + Double.doubleToLongBits(bp));
    System.out.println("kn ov gc4 = " + kn + "," + Float.floatToIntBits(ov) + "," + gc4);
    System.out.println("fe xt rjm = " + fe + "," + (xt ? 1 : 0) + "," + rjm);
    System.out.println("b pi s = " + b + "," + pi + "," + checkSum(s));
    System.out.println("l f0j i4 = " + checkSum(l) + "," + checkSum(f0j) + "," + Double.doubleToLongBits(checkSum(i4)));
    System.out.println("o4 = " + checkSum(o4));

}
}
