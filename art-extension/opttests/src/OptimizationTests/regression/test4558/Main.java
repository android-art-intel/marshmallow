/*
 * Copyright (C) 2015 Intel Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by Dalvik Fuzzer tool (3.4.001). Thu Oct  9 03:51:03 2014

package OptimizationTests.regression.test4558;

import OptimizationTests.regression.shared.*;

public class Main extends FuzzerUtils {

    public static final int N = 100;


public static void main(String[] b4h) {

    long a=6699488416643120033L, pbp=-7884985180839157088L, d=8456020100012774988L, pba[]=new long[N];
    float x=0.598F, l86=-53.727F, kv=-110.107F;
    byte v=-119;
    double os=55.59;
    int s=61407, emw=10758, hcz=-9645, x89=-4064, ony=-58660, er[]=new int[N];
    short uj=-1123;

    s = 78;
    do {
        for (l86 = 3; l86 < 64; l86++) {
            emw = (int)((a--) * ((-s) - (uj + l86)));
            emw += (emw--);
            x = (float)(os++);
            for (hcz = (int)l86; hcz < 52; hcz++) {
                x *= emw;
                uj <<= (short)(-((hcz + a) + a));
            }
            emw = (int)(s - (x--));
            emw -= hcz;
            x += a;
            emw = (int)(((v - a) - x) - (x -= (-1755640662289226814L - s)));
            emw += (int)(++a);
            pbp += (long)l86;
        }
        emw >>= emw;
        x -= (++emw);
    } while (--s > 0);

    System.out.println("s emw x = " + s + "," + emw + "," + Float.floatToIntBits(x));
    System.out.println("a l86 uj = " + a + "," + Float.floatToIntBits(l86) + "," + uj);
    System.out.println("os hcz v = " + Double.doubleToLongBits(os) + "," + hcz + "," + v);
}
}
