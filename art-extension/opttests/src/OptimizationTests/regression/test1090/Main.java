/*
 * Copyright (C) 2015 Intel Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by Dalvik Fuzzer tool (3.4.001). Thu Dec 25 17:01:53 2014
package OptimizationTests.regression.test1090;

import OptimizationTests.regression.shared.*;

public class Main extends FuzzerUtils {

    public static final int N = 100;


public static void main(String[] px) {

    short v=28246;
    int h=-24002, lb=56733, n=61390, n3s=25873, y6l=48664, mp=-33364, g[]=new int[N];
    double wq5=-96.590, is[]=new double[N];
    float zm=15.976F, rhz[]=new float[N];
    long o=6514499569355337344L, vf[]=new long[N];

    init(rhz, -89.494F);
    init(g, -40211);
    init(is, 18.64);
    init(vf, 5136129672880533921L);

    for (h = 4; h < 91; ++h) {
        lb <<= (int)(o--);
        lb = (int)(((rhz[h - 1]--) - o) - (lb - (h - o)));
        lb = (int)(--zm);
        lb = (lb++);
        for (n = 51; n > 3; n -= 2) {
            o ^= n;
            lb += (((n * lb) + o) - n);
            n3s = 1;
            while (++n3s < 34) {
                zm += (-(lb++));
                lb &= (g[n - 1]++);
                o -= (long)(((lb--) - (lb * o)) - zm);
                lb |= (-lb);
                lb += (int)(68.673F - ((zm - wq5) - lb));
                v = (short)(n / (((lb++) + (h + n3s)) | 1));
                is[n] *= ((v++) + ((lb * zm) * (o++)));
            }
            zm -= (lb = (int)(o - zm));
        }
        wq5 -= 59781;
    }
    for (y6l = 5; y6l < 82; y6l++) {
        lb <<= (int)(((g[y6l - 1]--) - (o + o)) + (--zm));
    }
    for (mp = 1; mp < 77; ++mp) {
        zm += mp;
        o -= vf[mp + 1];
        wq5 *= -7549794730260055576L;
        lb += (int)(16833 - ((-63034 * (lb++)) + (o * o)));
    }

    System.out.println("h lb o = " + h + "," + lb + "," + o);
    System.out.println("zm n n3s = " + Float.floatToIntBits(zm) + "," + n + "," + n3s);
    System.out.println("wq5 v y6l = " + Double.doubleToLongBits(wq5) + "," + v + "," + y6l);
    System.out.println("mp rhz g = " + mp + "," + Double.doubleToLongBits(checkSum(rhz)) + "," + checkSum(g));
    System.out.println("is vf = " + Double.doubleToLongBits(checkSum(is)) + "," + checkSum(vf));

}
}
