/*
 * Copyright (C) 2015 Intel Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by Android Runtime Fuzzer tool (3.5.002). Fri Jun 19 18:54:10 2015
// srand = 4816312611450386415804050446232418278440888655922366389194686996166

package OptimizationTests.regression.test14423_2;

import OptimizationTests.regression.shared.*;

public class Main extends FuzzerUtils {

    public static final int N = 100;


public static void main(String[] strArr) {

    short s=3062, sArr[][]=new short[N][N];
    int i=-8, i1=25595, i2=112, i3=5, i4=32517, i5=114, i6=2, iArr[]=new int[N];
    long l=-1950843127461393457L, l1=3639024836337498683L;
    float f=117.189F, fArr[]=new float[N];
    double d=0.46098;

    init(sArr, (short)11516);
    init(iArr, 152);
    init(fArr, -2.942F);

    for (i = 4; i < 87; i++) {
        i1 += (((i * i1) + i1) - i);
        for (i2 = 1; i2 < 34; ++i2) {
            for (i3 = 1; i3 < 21; i3++) {
                l = (long)((i2 + (d * i2)) + (f - (4L / (Integer.reverseBytes(i2) | 1))));
                l -= s;
                i1 += (i1++);
                i1 *= (int)(++d);
                i1 = (int)(l - (--i1));
                sArr[i - 1][i3 + 1] -= (short)i;
                f = (-i2);
                i1 |= (--iArr[i2]);
                i1 = (int)(((i1 * l) - (i - i1)) + ((-5L + (s * f)) - (i - 18585)));
                i1 = (int)((sArr[i][i2] - (d--)) + ((-14 >>> (long)(-17.64882 - i4)) + (121 + (i4 - i4))));
            }
            i4 = ((i1 = (++i1)) + (i4 = (s--)));
            i4 = (int)(((-13 + (i4 + f)) - f) - ((i4 + i) + (-i1)));
            i4 = (int)(-(s * (s + l1)));
            for (i5 = 2; i5 < 89; i5++) {
                i4 >>>= (int)(l--);
            }
            for (i6 = i; i6 > 1; i6--) {
                i4 = (int)(++fArr[i2 - 1]);
                f = (i1++);
            }
            l1 += (((i2 * i5) + i5) - i3);
            i4 = (int)((++fArr[i2 + 1]) - ((--iArr[i2 - 1]) - (--l1)));
        }
        d = (226 - (l * 26274));
    }

    System.out.println("i i1 i2 = " + i + "," + i1 + "," + i2);
    System.out.println("i3 l d = " + i3 + "," + l + "," + Double.doubleToLongBits(d));
    System.out.println("f s i4 = " + Float.floatToIntBits(f) + "," + s + "," + i4);
    System.out.println("l1 i5 i6 = " + l1 + "," + i5 + "," + i6);
    System.out.println("sArr iArr fArr = " + checkSum(sArr) + "," + checkSum(iArr) + "," +
        Double.doubleToLongBits(checkSum(fArr)));

}
}
