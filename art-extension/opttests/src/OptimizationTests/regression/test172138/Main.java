/*
 * Copyright (C) 2015 Intel Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by Dalvik Fuzzer tool (3.2.001). Sat Feb 15 04:26:36 2014
package OptimizationTests.regression.test172138;

import OptimizationTests.regression.shared.*;

public class Main extends FuzzerUtils {

    public static final int N = 60;

    public static void main(String[] oid) {

        long c = 1599288313770249024L, n19 = 3301422476561581748L, wh6 = -4768540645840603855L, w = -1873187386740517545L, zjg = 9116688121212265867L, qjq = -7202737264890510231L;
        float wpq = 27.337F, y = 66.919F, l1 = -11.846F, fz9 = 77.962F, bns[] = new float[N];
        byte n = -26;
        int wd = -31960, ii = -23342, fm = -50512, rw = 4281, av = 11748, wl7 = 2517, zz7[] = new int[N];
        double g3 = 13.388;
        boolean s = true, wgp = true;

        init(zz7, -40492);
        init(bns, -54.682F);

        for (wd = 2; wd < 57; ++wd) {
            zz7[wd - 1] ^= (int) (((wd * -46.904F) - (c - -374974850723389721L)) - ii);
            n19 %= (long) ((long) (((c + wpq) % (ii | 1)) - ((ii ^ -9252) + ii)) | 1);
            y += c;
        }
        fm = 52;
        do {
            s = wgp;
        } while (--fm > 0);
        try {
            rw = 56;
            do {
                wpq += (wh6 = (--w));
            } while (--rw > 0);
            for (int y8 : zz7) {
                for (av = 1; av < 48; av++) {
                    ii &= (int) (n * ((fm + 5669651139723831638L) * (rw + 111.699F)));
                    ii = (++ii);
                    n19 += zjg;
                    wl7 += (int) ((-qjq) + rw);
                }
            }
        } catch (ArithmeticException yph) {
            g3 += (bns[(ii >>> 1) % N] * ((av * l1) * (-fz9)));
        }

        System.out.println("wd c ii = " + wd + "," + c + "," + ii);
        System.out.println("n19 wpq y = " + n19 + ","
                + Float.floatToIntBits(wpq) + "," + Float.floatToIntBits(y));
        System.out.println("fm s wgp = " + fm + "," + s + "," + wgp);
        System.out.println("rw wh6 w = " + rw + "," + wh6 + "," + w);
        System.out.println("av n zjg = " + av + "," + n + "," + zjg);
        System.out.println("wl7 qjq g3 = " + wl7 + "," + qjq + ","
                + Double.doubleToLongBits(g3));
        System.out.println("l1 fz9 zz7 = " + Float.floatToIntBits(l1) + ","
                + Float.floatToIntBits(fz9) + "," + checkSum(zz7));
        System.out.println("bns = " + Double.doubleToLongBits(checkSum(bns)));

    }
}
