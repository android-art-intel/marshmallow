/*
 * Copyright (C) 2015 Intel Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by Dalvik Fuzzer tool (3.5.001). Sat Mar 14 00:05:45 2015
package OptimizationTests.regression.test1706;

import OptimizationTests.regression.shared.*;

public class Main extends FuzzerUtils {

    public static final int N = 100;

    public static byte byFld=-32;

public static void main(String[] strArr) {

    long l=7L;
    int i=-63286, i1=-115, i2=5, i3=63281, i4=-56719, i5=96, i7=5, i8=-10, iArr[]=new int[N];
    boolean b=false;
    short s=-3293, sArr[]=new short[N];
    double d=1.17889;
    float f=92.910F, f1=64.276F, fArr[]=new float[N];

    init(sArr, (short)15264);
    init(iArr, 3);
    init(fArr, -112.386F);

    for (i = 92; i > 1; i -= 3) {
        i1 = 1;
        do {
            f += (-22851 + (i1 * i1));
            for (i2 = i1; i2 < i; ++i2) {
                if (b != b) {
                }
                l += (i2 * i2);
                sArr[i + 1] += (short)i1;
                i3 = (int)(f++);
                i3 *= (i4 * (s - i4));
                i3 >>>= i4;
                l = (((i3 + i4) - (55548 >>> Double.doubleToRawLongBits(d))) + (i4 ^= (int)(i4 - f)));
            }
            i4 = i4;
        } while (++i1 < 54);
        l -= -3;
    }
    i5 = 97;
    do {
        i4 = i4;
        f1 += (((i5 * i5) + s) - i1);
        for (int i6 : iArr) {
            i4 -= (int)((0.12F * d) * ((iArr[i5 + 1]--) + (++i6)));
            for (i7 = 1; i7 < 17; ++i7) {
                fArr[i5] *= (((i1 + 2.133F) * (--i4)) + (i2 + (i7 * i3)));
                i8 = i7;
                d = l;
                iArr[i7] = (int)(((++i8) * (byFld + i6)) << (long)((i3 = byFld) * (f - i3)));
                l = (((byFld = (byte)i) + (-s)) * -30442);
                i4 >>= (int)612141397L;
            }
        }
    } while (--i5 > 0);

    System.out.println("i i1 f = " + i + "," + i1 + "," + Float.floatToIntBits(f));
    System.out.println("i2 b l = " + i2 + "," + (b ? 1 : 0) + "," + l);
    System.out.println("i3 i4 s = " + i3 + "," + i4 + "," + s);
    System.out.println("d i5 f1 = " + Double.doubleToLongBits(d) + "," + i5 + "," + Float.floatToIntBits(f1));
    System.out.println("i7 i8 sArr = " + i7 + "," + i8 + "," + checkSum(sArr));
    System.out.println("iArr fArr = " + checkSum(iArr) + "," + Double.doubleToLongBits(checkSum(fArr)));

    System.out.println("byFld = " + byFld);
}
}
