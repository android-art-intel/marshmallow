/*
 * Copyright (C) 2015 Intel Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by Dalvik Fuzzer tool (3.2.001). Sat Apr  5 08:50:13 2014
package OptimizationTests.regression.test184849_1;

import OptimizationTests.regression.shared.*;

public class Main extends FuzzerUtils {

    public static final int N = 500;

    public static void main(String[] om8) {

        float ma8 = -27.557F, r[][] = new float[N][N];
        long m7z = -2528398765588400130L, hl = -1911458404914738014L, pj = 1610091724386293095L;
        byte w = 45;
        short a[] = new short[N];
        double gz = 35.365;
        int zx = 15785, t9 = -33561, l = -8551, zu = 16757, c = 29030, d = 851, jh = -4514, f = -21730, me = 58033, n6 = 33901, ufr = -61231, zn = 23171, iie = 56466, o3f[] = new int[N];

        init(r, 79.213F);
        init(o3f, -6490);
        init(a, (short) -400);

        for (zx = 411; zx > 15; zx -= 2) {
            r[zx - 1][zx + 1] += (((t9 + t9) / ((m7z + t9) | 1)) * (~(t9 - m7z)));
            for (l = 252; l > 3; --l) {
                zu %= (int) ((long) (((gz + ma8) * o3f[zx - 1]) - ((zx * c) + a[zx])) | 1);
            }
            ma8 = zx;
            w -= (byte) 19354;
            for (d = 4; d < 101; ++d) {
                c = ((d * (t9 % -52543)) * l);
            }
        }
        jh = 446;
        do {
            zu = (int) ((m7z *= (long) 42.380F) + ((-jh) + (++m7z)));
            c >>= (int) ((t9 / ((-(c * hl)) | 1)) * ((hl *= zx) - 63793));
            for (f = 19; f < 405; ++f) {
                me *= (int) (pj - ((~(6586928699868175870L + (-46551 + (39821 * n6)))) + -52668));
            }
            ufr += (int) (o3f[(zu >>> 1) % N] * (-3888451351646611654L - (zn - iie)));
            n6 = (int) ((-zn) + 63.499F);
        } while (--jh > 0);

        System.out.println("zx t9 m7z = " + zx + "," + t9 + "," + m7z);
        System.out.println("l zu gz = " + l + "," + zu + ","
                + Double.doubleToLongBits(gz));
        System.out.println("ma8 c w = " + Float.floatToIntBits(ma8) + "," + c
                + "," + w);
        System.out.println("d jh hl = " + d + "," + jh + "," + hl);
        System.out.println("f me pj = " + f + "," + me + "," + pj);
        System.out.println("n6 ufr zn = " + n6 + "," + ufr + "," + zn);
        System.out.println("iie r o3f = " + iie + ","
                + Double.doubleToLongBits(checkSum(r)) + "," + checkSum(o3f));
        System.out.println("a = " + checkSum(a));

    }
}
