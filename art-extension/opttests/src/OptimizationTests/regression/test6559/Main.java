/*
 * Copyright (C) 2015 Intel Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by Dalvik Fuzzer tool (3.5.001). Sun Mar  1 12:25:59 2015
package OptimizationTests.regression.test6559;

import OptimizationTests.regression.shared.*;

class UserDefinedException extends RuntimeException {
    public int field;
}

public class Main extends FuzzerUtils {

    public static final int N = 100;


    public static long vMeth_check_sum = 0;

public static void vMeth() {

    int i9=-7, i10=50409, i11=-190, iArr1[]=new int[N];
    long l1=89L;
    short s1=-20310;
    float f2=1.678F;
    byte by1=-55;
    double d1=-21.104327;

    init(iArr1, -181);

    for (int i8 : iArr1) {
        for (i9 = 84; i9 > 1; --i9) {
            i8 = i8;
            i8 = (int)(l1 - l1);
            iArr1[i9 - 1] *= (-((i9 + i9) * (i8 + i8)));
            i8 -= ((i9 - i8) + (++i10));
            iArr1[i9 - 1] <<= i8;
        }
        for (i11 = 2; i11 < 84; i11++) {
            by1 = (byte)((d1 -= (-12 + i11)) * i10);
            i8 = (int)(d1--);
            i10 += (i11 - f2);
            if ((((i10 - 7181809041074465639L) * (iArr1[i11 - 1] = s1)) - ((-(i8 + l1)) + (i10 + by1))) >=
                (((-(iArr1[i11 + 1]++)) * (i8 + i9)) - ((i10 * i9) - (iArr1[i11]++)))) break;
        }
    }
    vMeth_check_sum += i9 + l1 + i10 + i11 + by1 + Double.doubleToLongBits(d1) + Float.floatToIntBits(f2) + s1 +
        checkSum(iArr1);
}

public static void main(String[] strArr) {

    boolean b=true;
    int i=-15293, i1=-4864, i2=0, i3=50728, i4=-4195, i5=-15619, i6=-74, i7=-188, iArr[]=new int[N];
    long l=-362L;
    float f=0.595F, f1=99.649F;
    short s=14205;
    byte by=-32;
    double d=0.42397;

    init(iArr, -36923);

    try {
        i = 76;
        while (--i > 0) {
            i1 = (int)(l + ((i1 - i) * (iArr[i]++)));
            s += (short)(((i * i2) + i) - i);
            i2 -= (int)(--f);
            b = (d < ((i - i1) + (i3 * i1)));
            for (i4 = 2; i4 < 81; ++i4) {
                iArr[i4] %= (int)((long)(((l - -39156) + (++iArr[i4 - 1])) + (iArr[i] - (d * -11703))) | 1);
                l %= ((-((i2 + i) - i3)) | 1);
                i2 = -9;
            }
            f += i;
            i2 ^= iArr[i];
            i1 = (int)(Float.intBitsToFloat((int)(f - -1863)) * Math.abs(i2 - i5));
        }
        switch (((3 >>> 1) % 2) + 56) {
        case 56:
            i6 = 1;
            while (++i6 < 91) {
                i3 <<= (((0 << (-(i5 * i6))) - (i2 - i3)) * ((i4 + i5) - i6));
                for (i7 = 1; i7 < i6; i7++) {
                    i5 <<= s;
                    i1 |= (int)(-((f - i1) + (i4 - i7)));
                    i1 = -134;
                    i2 = (int)l;
                    i3 += i7;
                    for (f1 = 2; f1 < 53; ++f1) {
                        f += (((f1 * i7) + by) - i3);
                        by = (byte)(i3++);
                    }
                }
            }
        case 57:
            if ((i) < 65536) throw new UserDefinedException();
            break;
        default:
            vMeth();
        }
    }
    catch (UserDefinedException exc) {
        vMeth();
    }

    System.out.println("i i1 l = " + i + "," + i1 + "," + l);
    System.out.println("s i2 f = " + s + "," + i2 + "," + Float.floatToIntBits(f));
    System.out.println("b d i3 = " + (b ? 1 : 0) + "," + Double.doubleToLongBits(d) + "," + i3);
    System.out.println("i4 i5 i6 = " + i4 + "," + i5 + "," + i6);
    System.out.println("i7 f1 by = " + i7 + "," + Float.floatToIntBits(f1) + "," + by);
    System.out.println("iArr = " + checkSum(iArr));


    System.out.println("vMeth_check_sum: " + vMeth_check_sum);
}
}
