/*
 * Copyright (C) 2015 Intel Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by Dalvik Fuzzer tool (3.5.001). Thu Feb 12 02:33:57 2015
package OptimizationTests.regression.test1519_1;

import OptimizationTests.regression.shared.*;

public class Main extends FuzzerUtils {

    public static final int N = 100;


    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;

public static int iMeth(long l) {

    short s=15359;
    float f=-85.266F;
    byte by=98;
    int i2=49786, i3=9, i4=3, iArr[][]=new int[N][N];

    init(iArr, -23303);

    for (i2 = 1; i2 < 90; ++i2) {
        i3 = (int)(((i3 - by) + (i2 + f)) - ((i3 + l) ^ l));
        i3 += (int)((iArr[i2 + 1][i2 + 1] + Math.min(l, 3L)) - ((i2 * l) + (70.70F - Math.min(13, 11462))));
    }
    for (i4 = 1; i4 < 85; i4++) {
        s += (short)l;
    }
    long meth_res = l + i2 + i3 + by + Float.floatToIntBits(f) + i4 + s + checkSum(iArr);
    iMeth_check_sum += meth_res;
    return (int)meth_res;
}

public static void vMeth(int i7, int i8) {

    byte by2=-77;
    double d1=-1.111287;
    boolean b=true;
    float f1=-89.433F;
    int i9=4799, i10=135, i11=-6, iArr1[]=new int[N];
    long l2=39899L, lArr[]=new long[N];

    init(lArr, -60207L);
    init(iArr1, -23);

    for (i9 = 6; i9 < 98; i9 += 2) {
        i7 = i10;
        for (i11 = 1; i11 < 24; i11++) {
            f1 += (i10 << (i10--));
            b = true;
            i8 -= (i9 - i8);
            l2 += (long)(((i11 + i10) - (d1 - l2)) - 0L);
            l2 = (((i10 + l2) + i10) + i11);
            lArr[i9 - 1] *= (long)((-(-32589 * (i10 % ((long)f1 | 1)))) + ((l2 * -153) * (i10 & l2)));
            iArr1[i11 - 1] <<= (int)((l2 <<= (l2 ^ 10894)) * (i10++));
            i8 = i11;
        }
    }
    i10 = ((by2--) - (-(i10 - i11)));
    vMeth_check_sum += i7 + i8 + i9 + i10 + i11 + Float.floatToIntBits(f1) + (b ? 1 : 0) + l2 +
        Double.doubleToLongBits(d1) + by2 + checkSum(lArr) + checkSum(iArr1);
}

public static void main(String[] strArr) {

    short s1=-15700;
    float f2=-2.337F, f3=0.5F, fArr[]=new float[N];
    byte by1=-41;
    double d=0.110108, d2=-53.112637, dArr[]=new double[N];
    int i=244, i1=-116, i5=0, i6=-10, i12=47443, i13=-14, i14=0, iArr2[]=new int[N], iArr3[]=new int[N];
    long l1=-262739331L, l3=-1766194606L, lArr1[]=new long[N];

    init(fArr, -126.567F);
    init(iArr2, 100);
    init(iArr3, 36647);
    init(lArr1, 8L);
    init(dArr, -52.10898);

    for (i = 5; i < 91; ++i) {
        i1 += (i * i);
        fArr[i] *= (float)(((d -= i1) - (1538109783L * iMeth(-159L))) * ((l1--) - l1));
        i1 = by1;
        i1 = (int)(((i1 * i5) * (d--)) - (--s1));
    }
    i6 = 1;
    while (++i6 < 95) {
        vMeth((int)((--i1) - (-(l1 += i5))), (int)(f2 - ((i5++) - (-(-(++iArr2[i6 - 1]))))));
        for (i12 = 4; i12 < 77; i12 += 3) {
            by1 -= (byte)130;
            f2 *= ((++i5) - f3);
            f3 -= (-(i1 += (int)f3));
            l1 *= i13;
            i13 ^= (i14 + 42586);
            l1 &= i;
            iArr3[i12] = (int)(i1 * l1);
        }
        l1 = i1;
        by1 = (byte)((i + (++i14)) * (l1--));
        i13 = (int)((i5 * Math.abs(l3)) - (--i5));
        for (d2 = 26; d2 > 1; --d2) {
            i14 = (((i5 + i5) - (--i13)) * (iArr3[i6]++));
            iArr3[(int)(d2 + 1)] -= (int)(((iArr3[(int)(d2 - 1)]--) + l1) + (i1++));
            l3 >>= (l3 + (l1++));
        }
        fArr[i6 + 1] += (5 + iArr2[i6]);
        lArr1[i6] = (9919 - ((l1--) / (i5 | 1)));
        dArr[i6 + 1] += i;
    }

    System.out.println("i i1 d = " + i + "," + i1 + "," + Double.doubleToLongBits(d));
    System.out.println("l1 by1 i5 = " + l1 + "," + by1 + "," + i5);
    System.out.println("s1 i6 f2 = " + s1 + "," + i6 + "," + Float.floatToIntBits(f2));
    System.out.println("i12 f3 i13 = " + i12 + "," + Float.floatToIntBits(f3) + "," + i13);
    System.out.println("i14 l3 d2 = " + i14 + "," + l3 + "," + Double.doubleToLongBits(d2));
    System.out.println("fArr iArr2 iArr3 = " + Double.doubleToLongBits(checkSum(fArr)) + "," + checkSum(iArr2) + "," +
        checkSum(iArr3));
    System.out.println("lArr1 dArr = " + checkSum(lArr1) + "," + Double.doubleToLongBits(checkSum(dArr)));


    System.out.println("iMeth_check_sum: " + iMeth_check_sum);
    System.out.println("vMeth_check_sum: " + vMeth_check_sum);
}
}
