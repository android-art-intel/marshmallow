/*
 * Copyright (C) 2015 Intel Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by Android Runtime Fuzzer tool (4.1.002). Sun Mar 27 16:05:36 2016
// srand = 232260979019907759663087754720922655889

package OptimizationTests.regression.test3670_1;

import OptimizationTests.regression.shared.*;

public class Main extends FuzzerUtils {

    public static final int N = 100;

    public static long instanceCount=0L;
    public static int iFld=1;
    public static float fFld=122.247F;
    public static int iArrFld[]=new int[N];
    public static double dArrFld[]=new double[N];

    static {
        init(Main.iArrFld, 10);
        init(Main.dArrFld, -72.31853);
    }

    public static long vMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;

public static void vMeth() {

    int i5=20524, i6=-1, i7=-7;
    short s1=-22272;
    long lArr[]=new long[N];

    init(lArr, -11L);

    for (i5 = 5; i5 < 81; i5++) {
        Main.iFld = (int)(((-105.35909 + i5) - (-1.110F + (-1.23F - (++Main.iFld)))) - ((Main.iFld++) + Main.iFld));
        Main.iFld = (int)(Main.instanceCount - (i5 - (Main.instanceCount + i5)));
        Main.iFld = i5;
        Main.iFld <<= (int)(lArr[i5 - 1] * ((Main.iFld * Main.iFld) - (Main.iFld + Main.instanceCount)));
    }
    i6 = 85;
    do {
        Main.instanceCount = (((Main.iFld++) - i6) - Main.instanceCount);
        for (i7 = 1; i7 < i6; ++i7) {
            Main.iFld ^= (--Main.iFld);
            Main.iFld = i7;
            Main.iFld = (--Main.iArrFld[i6 + 1]);
            Main.iArrFld[i7 - 1] += (int)((--Main.iFld) - ((Main.fFld - s1) * (i5 * 163)));
        }
    } while (--i6 > 0);
    vMeth_check_sum += i5 + i6 + i7 + s1 + checkSum(lArr);
}

public static long lMeth(int i8, int i9, double d) {

    int i10=-26, i11=-86, i12=1;
    boolean b1=false, bArr[]=new boolean[N];
    short s2=2561;
    byte by1=-75;

    init(bArr, false);

    i10 = 1;
    do {
        Main.iArrFld[i10] = ((Main.iArrFld[i10 - 1] - i10) * (i8 - (Main.iFld - Main.iFld)));
        Main.instanceCount -= (long)Float.intBitsToFloat(--i9);
        Main.iArrFld[i10] = (int)(++Main.dArrFld[i10 - 1]);
        bArr[i10] = (b1 = b1);
    } while (++i10 < 86);
    for (i11 = 2; i11 < 94; i11++) {
        Main.iFld -= (int)((Main.instanceCount >>= -62770) * ((s2 += (short)i9) + (Main.instanceCount + Main.iFld)));
        d *= Integer.reverseBytes(Main.iFld);
        Main.iArrFld[i11 - 1] = (int)(Main.fFld - (--Main.instanceCount));
    }
    Main.iArrFld[(i9 >>> 1) % N] <<= (Main.iArrFld[(i10 >>> 1) % N] -= i12);
    i12 = (by1 | i10);
    long meth_res = i8 + i9 + Double.doubleToLongBits(d) + i10 + (b1 ? 1 : 0) + i11 + s2 + i12 + by1 + checkSum(bArr);
    lMeth_check_sum += meth_res;
    return (long)meth_res;
}

public static void main(String[] strArr) {

    int i=50383, i1=96, i2=0, i3=30492, i4=8;
    short s=-25672, sArr[]=new short[N];
    boolean b=true;
    byte by=69, byArr[]=new byte[N];
    float f=-12.731F, fArr[]=new float[N];

    init(byArr, (byte)37);
    init(sArr, (short)1405);
    init(fArr, 0.827F);

    for (i = 2; i < 96; i++) {
        i1 = (int)(Main.instanceCount--);
        i1 += (int)Main.instanceCount;
        s += (short)i;
        for (i2 = 2; i2 < 33; i2++) {
            i1 -= (i1 -= ((--byArr[i2 - 1]) & (++i1)));
            b = (b = b);
            i3 = i;
            while ((i3 -= 3) > 0) {
                i1 -= (int)(((i1--) + (-8 * (1.51F - (-(i3 + Main.iFld))))) + i3);
                Main.instanceCount += (((--Main.iArrFld[i + 1]) + (i - i1)) * (-sArr[i3]));
                Main.iFld -= (int)(i3 + (by - (2.929F + (++Main.fFld))));
            }
            Main.fFld -= Main.iArrFld[i + 1];
            for (i4 = 1; i4 < 6; i4++) {
                Main.iFld = (int)((by - (-42162 / ((i3 + i2) | 1))) - (--f));
                Main.instanceCount >>>= Main.iArrFld[i4 - 1];
                Main.iFld += i4;
                Main.instanceCount >>= (Main.iFld--);
                i1 -= i1;
                Main.iFld <<= (Main.iArrFld[(14 >>> 1) % N] = (Main.iFld--));
                f -= (Main.iFld++);
                Main.iArrFld[i] >>>= (--Main.iFld);
            }
        }
        vMeth();
        s -= (short)fArr[i + 1];
        Main.fFld = (++i1);
        Main.instanceCount += (((-(i2 * Main.iFld)) >>> i1) & lMeth(83, 209, 1.79456));
    }

    System.out.println("i i1 s = " + i + "," + i1 + "," + s);
    System.out.println("i2 b i3 = " + i2 + "," + (b ? 1 : 0) + "," + i3);
    System.out.println("by i4 f = " + by + "," + i4 + "," + Float.floatToIntBits(f));
    System.out.println("byArr sArr fArr = " + checkSum(byArr) + "," + checkSum(sArr) + "," +
        Double.doubleToLongBits(checkSum(fArr)));

    System.out.println("Main.instanceCount Main.iFld Main.fFld = " + Main.instanceCount + "," + Main.iFld + "," +
        Float.floatToIntBits(Main.fFld));
    System.out.println("Main.iArrFld Main.dArrFld = " + checkSum(Main.iArrFld) + "," +
        Double.doubleToLongBits(checkSum(Main.dArrFld)));

    System.out.println("vMeth_check_sum: " + vMeth_check_sum);
    System.out.println("lMeth_check_sum: " + lMeth_check_sum);
}
}
