/*
 * Copyright (C) 2015 Intel Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by Android Runtime Fuzzer tool (3.5.002). Fri Aug 21 09:45:22 2015
// srand = 84764231093932801918731340918391138961

package OptimizationTests.regression.test2518;

import OptimizationTests.regression.shared.*;

public class Main extends FuzzerUtils {

    public static final int N = 100;

    public static int iFld=-138, iFld1=12;
    public static byte byFld=-9;

public static void main(String[] strArr) {

    int i1=-84, i2=0, i3=5, i4=-5, i5=-171, iArr[]=new int[N], iArr1[]=new int[N];
    float f=1.586F;
    double d=21.85442;
    long l=-41136L, l1=16474L;
    short s=32;

    init(iArr, -12442);
    init(iArr1, 1);

    for (int i : iArr) {
        for (i1 = 3; i1 < 91; ++i1) {
            i += (int)(++f);
            f -= (--i);
            i -= (i + -62259);
            d = (--i);
            i -= (iArr[i1] - Math.max((int)(i - l), i1));
            l = Long.reverseBytes((i += i1) - (--i));
        }
        i2 <<= (int)(-(i2 >>= (int)l));
        for (i3 = 2; i3 < 80; i3 += 3) {
            switch (((((i2++) >>> 1) % 1) * 5) + 25) {
            case 29:
                i >>= (int)(l - i);
                break;
            default:
                iFld = 1;
                while (++iFld < 46) {
                    i2 = (byFld--);
                }
                for (i4 = 1; i4 < 20; ++i4) {
                    iArr[i4] += (int)(((-(i - l)) * i4) - (iFld << (i *= (int)l1)));
                    l *= (long)((--d) - (i2++));
                }
                byFld += (byte)(((i3 * i1) + i) - i2);
            }
            i -= (int)(d = (++i2));
            iFld1 *= (int)(((f - f) + (--iArr1[i3])) + ((d - l1) - (2868 * (36 - i))));
            s += (short)(-1 + (i3 * i3));
            l += i3;
        }
    }
    for (i5 = 1; i5 < 94; i5++) {
        s += (short)iFld1;
        iArr[i5 + 1] <<= (int)((i2 = (int)(i2 - l)) % ((-(++l1)) | 1));
    }

    System.out.println("i1 f d = " + i1 + "," + Float.floatToIntBits(f) + "," + Double.doubleToLongBits(d));
    System.out.println("l i2 i3 = " + l + "," + i2 + "," + i3);
    System.out.println("i4 l1 s = " + i4 + "," + l1 + "," + s);
    System.out.println("i5 iArr iArr1 = " + i5 + "," + checkSum(iArr) + "," + checkSum(iArr1));

    System.out.println("iFld byFld iFld1 = " + iFld + "," + byFld + "," + iFld1);
}
}
