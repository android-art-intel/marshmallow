/*
 * Copyright (C) 2015 Intel Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by Android Runtime Fuzzer tool (3.5.002). Sun Aug 23 13:24:03 2015
// srand = 140033527845507303630018433130557361044

package OptimizationTests.regression.test2536;

import OptimizationTests.regression.shared.*;

public class Main extends FuzzerUtils {

    public static final int N = 100;

    public static float fFld=44.42F;
    public static double dFld=2.63756, dArrFld[]=new double[N];

    static {
        init(dArrFld, -2.122685);
    }

    public static long iMeth_check_sum = 0;

public static int iMeth(int i1, byte by) {

    int i2=120, i3=10, iArr[][]=new int[N][N];
    float f=2.0F;
    long l=47L;

    init(iArr, -155);

    for (i2 = 82; i2 > 2; i2--) {
        for (f = 1; f < 54; f++) {
            l -= (-(l + Math.abs(i1)));
            i3 = 84;
            while (--i3 > 0) {
                i1 ^= (int)(iArr[i3][i2] >>= (int)(11L - (i1 = i1)));
                i1 >>>= i1;
                dFld *= (--fFld);
                l >>>= (long)(-((244 >>> (--i1)) - (27 - (dArrFld[(i1 >>> 1) % N]++))));
                i1 = (int)((by - (i1 + 248)) - ((dFld - i3) - fFld));
                i1 |= i1;
                dArrFld[i3 - 1] += (i1++);
                i1 %= (int)(((long)(++dFld)) | 1);
            }
        }
    }
    long meth_res = i1 + by + i2 + Float.floatToIntBits(f) + l + i3 + checkSum(iArr);
    iMeth_check_sum += meth_res;
    return (int)meth_res;
}

public static void main(String[] strArr) {

    int i=-10, i4=-247, i5=25557, i6=-7, i7=-64009, iArr1[]=new int[N];
    byte by1=123;
    double d=0.58721;
    long l1=23383L, l2=323871804L, l3=4168398760914657149L, lArr[]=new long[N];
    float f1=-65.489F, fArr[]=new float[N];
    boolean b=true, b1=true, bArr[]=new boolean[N];
    short s=1864, sArr[]=new short[N];

    init(lArr, 14L);
    init(iArr1, -11519);
    init(sArr, (short)19823);
    init(bArr, false);
    init(fArr, -66.685F);

    for (i = 3; i < 79; ++i) {
        if (bArr[i]) {
            fFld -= (float)((iMeth(i, by1) + (++fFld)) * ((i4 = (int)dFld) + (i4 <<= i4)));
            for (i5 = 5; i5 < 93; ++i5) {
                for (d = 2; d < 55; d++) {
                    i4 -= (int)(Float.intBitsToFloat(i6--) - (by1++));
                    i4 += (int)(((lArr[i5 - 1]++) - (132 - (i5 * i5))) + l1);
                    f1 *= -12;
                }
                i6 -= i6;
                i6 = (int)(((-60 - i4) - (--fFld)) + Integer.reverseBytes(Math.max(3, 52256)));
                l1 &= (iArr1[i5 + 1] * (sArr[i] + (i4 + -50847L)));
                l2 &= (long)(((i4 % (i4 | 1)) - (i6--)) + 19.488F);
                i4 += (int)dFld;
                i6 += i5;
                switch (((((int)(-(i + 0L))) >>> 1) % 3) + 78) {
                case 78:
                    by1 = (byte)(((l2 + i6) * (dFld - i5)) * 6L);
                    b = (b = b1);
                    break;
                case 79:
                    lArr[i - 1] = (long)(((i + i4) * (l1++)) - (++f1));
                    break;
                case 80:
                    s += (short)(i5 ^ l2);
                    break;
                }
                bArr[i5] = ((i6++) < (lArr[i]++));
            }
            i6 = (int)(i5 * l2);
            i4 = i6;
        } else {
            i7 ^= (int)((--fArr[i]) + (i7 + dArrFld[i]));
            l2 += (i5 - l3);
        }
        i4 *= (int)(i6 -= (int)(fFld - (l2 - by1)));
    }

    System.out.println("i by1 i4 = " + i + "," + by1 + "," + i4);
    System.out.println("i5 d i6 = " + i5 + "," + Double.doubleToLongBits(d) + "," + i6);
    System.out.println("l1 f1 l2 = " + l1 + "," + Float.floatToIntBits(f1) + "," + l2);
    System.out.println("b b1 s = " + (b ? 1 : 0) + "," + (b1 ? 1 : 0) + "," + s);
    System.out.println("i7 l3 lArr = " + i7 + "," + l3 + "," + checkSum(lArr));
    System.out.println("iArr1 sArr bArr = " + checkSum(iArr1) + "," + checkSum(sArr) + "," + checkSum(bArr));
    System.out.println("fArr = " + Double.doubleToLongBits(checkSum(fArr)));

    System.out.println("fFld dFld dArrFld = " + Float.floatToIntBits(fFld) + "," + Double.doubleToLongBits(dFld) + ","
        + Double.doubleToLongBits(checkSum(dArrFld)));

    System.out.println("iMeth_check_sum: " + iMeth_check_sum);
}
}
