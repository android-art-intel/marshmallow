/*
 * Copyright (C) 2015 Intel Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by Dalvik Fuzzer tool (3.5.001). Fri Mar 20 10:02:39 2015
package OptimizationTests.regression.test1744;

import OptimizationTests.regression.shared.*;

public class Main extends FuzzerUtils {

    public static final int N = 100;


    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;

public static int iMeth(float f, int i2) {

    short s=5920;
    float f1=2.1004F, f2=21.389F;
    int i3=7, i4=-217, iArr[][]=new int[N][N], iArr1[]=new int[N];
    long l=4L, l1=-8941839182237278197L, lArr[]=new long[N];
    double d=2.127290;

    init(iArr, -219);
    init(lArr, 2105002649L);
    init(iArr1, 1975);

    for (i3 = 4; i3 < 98; ++i3) {
        i2 = i2;
        l -= (iArr[i3][i3 - 1] + l);
        f *= (i2--);
        i2 -= (int)(d * ((f1 * -47571L) + i3));
        if (((-(s - i2)) + ((lArr[i3]++) - (f1 - l))) < (d--)) break;
        for (i4 = 1; i4 < i3; i4++) {
            i2 = (int)(((--f) + iArr[i3][i3 + 1]) - (l + i2));
            for (f2 = 61; f2 > 2; f2--) {
                f *= (((f2 + -63282) + (l1 = i2)) - (++i2));
            }
            i2 <<= (iArr1[i3]++);
            lArr[i3 + 1] ^= (iArr1[i4 - 1] - (++i2));
        }
    }
    long meth_res = Float.floatToIntBits(f) + i2 + i3 + l + Double.doubleToLongBits(d) + Float.floatToIntBits(f1) + s +
        i4 + Float.floatToIntBits(f2) + l1 + checkSum(iArr) + checkSum(lArr) + checkSum(iArr1);
    iMeth_check_sum += meth_res;
    return (int)meth_res;
}

public static int iMeth1() {

    float f4=101.652F;
    short s2=30229;
    int i11=-196, i12=3, i13=38, i14=-8, i15=-2414, iArr3[]=new int[N];
    byte by1=85;
    long l4=-2036702963596743224L, l5=-3182167700L;
    double d2=0.33965;

    init(iArr3, 99);

    for (i11 = 2; i11 < 89; ++i11) {
        i12 = (int)l4;
        for (i13 = 1; i13 < 43; ++i13) {
            i12 += i13;
            l4 += (l4 + s2);
            for (i14 = 1; i14 < 17; i14++) {
                by1 = (byte)Short.reverseBytes(s2);
                i12 |= (int)(iArr3[i11 + 1] * ((d2++) * i14));
                i12 *= (int)(l5++);
                f4 -= i15;
                iArr3[i13 + 1] = (int)(((iArr3[i13 + 1]--) - (l4 - i12)) + ((i11 - i12) * i15));
                by1 += (byte)(++s2);
            }
        }
    }
    long meth_res = i11 + i12 + l4 + i13 + s2 + i14 + by1 + Double.doubleToLongBits(d2) + l5 + Float.floatToIntBits(f4)
        + i15 + checkSum(iArr3);
    iMeth1_check_sum += meth_res;
    return (int)meth_res;
}

public static void main(String[] strArr) {

    short s1=-19590;
    float f3=-34.715F, fArr[]=new float[N];
    int i=-4, i1=-52628, i5=-32907, i6=2, i7=1, i8=-10, i9=-1, i10=1, iArr2[]=new int[N];
    byte by=72, byArr[]=new byte[N];
    boolean b=false, b1=true;
    long l2=237L, l3=-2188441797L, lArr1[]=new long[N];
    double d1=0.24924, dArr[]=new double[N];

    init(lArr1, -55229L);
    init(iArr2, -1);
    init(dArr, -2.58342);
    init(byArr, (byte)-98);
    init(fArr, -50.634F);

    i += i;
    for (i1 = 4; i1 < 77; i1++) {
        iMeth((-(i--)) + lArr1[i1 + 1], iArr2[i1 + 1]);
    }
    if (((--s1) - i6) < (++i8)) {
        for (i5 = 5; i5 < 82; ++i5) {
            by += (byte)(((--i) * (l2 - l2)) * ((-(l2 * i5)) + iMeth(f3, i1)));
            if ((i8--) != (l2 << (l2--))) {
                i += (int)(((-(i * 17147L)) - (d1++)) - (i - (i--)));
                i &= (((i - i6) * (i6 ^ 3)) + iArr2[i5 - 1]);
                i7 = 1;
                while (++i7 < 33) {
                    i6 = (++i);
                    i6 &= (int)((l2++) * ((-i) - i1));
                    dArr[i5 - 1] -= (iArr2[i7] >>> (i6--));
                }
                i = iArr2[i5 - 1];
            }
            i = (int)(((d1 - i8) - i) * (i1 - (i8 + -68.129F)));
            byArr[i5 + 1] = (byte)(((i1 / (i1 | 1)) - (--l2)) * 2.840F);
            i8 = (int)(-Math.min(l2, l2 + -49951));
        }
    } else if (-222L <= l3) {
        for (i9 = 1; i9 < 90; ++i9) {
            fArr[i9 - 1] *= (++i);
        }
        for (i10 = 5; i10 < 87; i10++) {
            s1 <<= (short)(-lArr1[i10]);
            f3 = (~(long)((l3 + i7) - (f3 -= i10)));
            iArr2[i10] += iMeth1();
            l2 = iArr2[i10];
        }
        i6 ^= (++i);
    } else {
        b = (b1 || b1);
    }

    System.out.println("i i1 i5 = " + i + "," + i1 + "," + i5);
    System.out.println("by l2 f3 = " + by + "," + l2 + "," + Float.floatToIntBits(f3));
    System.out.println("d1 i6 i7 = " + Double.doubleToLongBits(d1) + "," + i6 + "," + i7);
    System.out.println("i8 i9 i10 = " + i8 + "," + i9 + "," + i10);
    System.out.println("s1 l3 b = " + s1 + "," + l3 + "," + (b ? 1 : 0));
    System.out.println("b1 lArr1 iArr2 = " + (b1 ? 1 : 0) + "," + checkSum(lArr1) + "," + checkSum(iArr2));
    System.out.println("dArr byArr fArr = " + Double.doubleToLongBits(checkSum(dArr)) + "," + checkSum(byArr) + "," +
        Double.doubleToLongBits(checkSum(fArr)));


    System.out.println("iMeth_check_sum: " + iMeth_check_sum);
    System.out.println("iMeth1_check_sum: " + iMeth1_check_sum);
}
}
