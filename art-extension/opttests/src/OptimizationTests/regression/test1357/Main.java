/*
 * Copyright (C) 2015 Intel Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by Dalvik Fuzzer tool (3.5.001). Fri Jan 30 21:48:24 2015
package OptimizationTests.regression.test1357;

import OptimizationTests.regression.shared.*;

public class Main extends FuzzerUtils {

    public static final int N = 100;


public static void main(String[] strArr) {

    long l=-5011702098818419367L, lArr[]=new long[N];
    byte by=-7;
    int i=13, i1=-109, i2=-189, i3=-17285, i4=-203, iArr[]=new int[N];
    short s=-13367;
    float f=1.57F, f1=104.682F, f2=0.693F;

    init(iArr, 30516);
    init(lArr, 2L);

    i = 1;
    while (++i < 85) {
        i1 -= i;
        f = i1;
        for (f1 = 2; f1 < 36; f1++) {
            try {
                i1 = (iArr[(int)(f1)] / -56729);
                i1 = (i / i);
                i1 = (53 / iArr[(int)(f1 - 1)]);
            } catch (ArithmeticException a_e) {}
            i1 += (int)f1;
            i2 = ((++i2) + by);
            f += f1;
        }
        by >>>= (byte)(i1 = (-(i2 * i1)));
        i1 *= (int)(l + (i - (--i2)));
        i2 -= (int)(f -= i);
        for (i3 = 21; i3 > 1; i3 -= 2) {
            iArr[i - 1] = (((i2 -= -209) * i) - (-(iArr[i]--)));
            i1 += (int)(((s * i) >> Math.abs(l)) * (-i3));
            f2 += (((i3 * i1) + l) - i3);
            i4 = 1;
            do {
                iArr[i] -= i4;
                iArr[i3 + 1] += (i2 * i1);
                l = i1;
                f2 = (((--i1) - (f + 32581)) - (++i1));
                lArr[i] += l;
                i1 += (i4 - (by++));
            } while (++i4 < 22);
            i2 = (int)l;
            iArr[i3 + 1] &= (i1++);
            i2 *= (int)((l % ((-2 * i4) | 1)) % (((i1 * l) + -4) | 1));
        }
    }

    System.out.println("i i1 f = " + i + "," + i1 + "," + Float.floatToIntBits(f));
    System.out.println("f1 i2 by = " + Float.floatToIntBits(f1) + "," + i2 + "," + by);
    System.out.println("l i3 s = " + l + "," + i3 + "," + s);
    System.out.println("f2 i4 iArr = " + Float.floatToIntBits(f2) + "," + i4 + "," + checkSum(iArr));
    System.out.println("lArr = " + checkSum(lArr));

}
}
