/*
 * Copyright (C) 2015 Intel Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by Dalvik Fuzzer tool (3.4.001). Thu Oct 30 20:39:22 2014
package OptimizationTests.regression.test813;

import OptimizationTests.regression.shared.*;

public class Main extends FuzzerUtils {

    public static final int N = 100;

    public static int r = 20504, ev = -24798;
    public static float p7 = -125.966F;
    public static boolean dk = true;

    public static long ta_check_sum = 0;

    public static void ta(int yiz, long vg) {

        long o[] = new long[N];
        short y8 = -5930;
        byte wnb = -46;
        double j = -53.308, i[] = new double[N];
        int x = -54866, gb = 50497, kgu = 62010, ho = -40469, b[] = new int[N];
        float t88 = 69.939F;
        boolean db = false;

        init(b, 20027);
        init(o, 1603556723855486758L);
        init(i, -19.113);

        for (x = 5; x < 92; x++) {
            db = ((--yiz) >= (wnb++));
            vg -= vg;
            b[x + 1] = (int) ((vg * x) * ((x + vg) * (yiz *= x)));
            yiz *= (~x);
            for (gb = 3; gb < 88; ++gb) {
                vg *= y8;
                o[gb] += (long) j;
                for (kgu = 4; kgu < 67; kgu++) {
                    yiz = ((-(y8 % (y8 | 1))) + (--yiz));
                }
                i[x - 1] = ((ho + (657 + (wnb *= (byte) j))) - ((vg - y8) - ho));
                yiz = (int) (t88 * vg);
            }
        }
        ta_check_sum += yiz + vg + x + (db ? 1 : 0) + wnb + gb + y8
                + Double.doubleToLongBits(j) + kgu + ho
                + Float.floatToIntBits(t88) + checkSum(b) + checkSum(o)
                + Double.doubleToLongBits(checkSum(i));
    }

    public static void main(String[] a) {

        long p = -5926175998828027434L, wni[] = new long[N];
        short s = 28749;
        int hf = -19379, eun = 53450, z9 = 32415, y8m = -50861, kw = 42615, l[][] = new int[N][N], f[] = new int[N];
        float tf2 = 108.140F;

        init(l, 61178);
        init(f, 61115);
        init(wni, -3463248573053988870L);

        for (hf = 76; hf > 3; --hf) {
            ta((int) (43.847F * ((l[hf + 1][hf + 1]++) * (-23179 - (-21064 >> l[hf][hf])))),
                    p);
            eun *= (int) ((p++) - eun);
            for (z9 = 1; z9 < hf; z9++) {
                eun = (eun--);
                eun *= (int) (++p);
                eun -= z9;
                p /= ((((p * eun) * eun) - (eun--)) | 1);
                eun = (z9 * hf);
                eun += y8m;
            }
            p -= (s * l[hf + 1][hf - 1]);
            kw = 1;
            do {
                for (tf2 = 1; tf2 < 17; tf2++) {
                    y8m = (int) (((eun + p) << (1177588656025916171L + (z9 - y8m))) - (--y8m));
                }
                p7 += (p--);
                s /= (short) ((z9 * l[hf][kw + 1]) | 1);
                y8m = (int) (((z9 - z9) - (p7 + z9)) + f[hf - 1]);
                l[hf][kw] = (--y8m);
            } while (++kw < 93);
        }
        for (r = 87; r > 4; --r) {
            p >>= ((--s) * hf);
            for (ev = 1; ev < 28; ++ev) {
                if (dk) {
                    wni[ev] >>= (--wni[r + 1]);
                } else if (dk = false) {
                    f[ev - 1] += ev;
                    y8m *= z9;
                } else {
                    wni[ev - 1] *= (long) (((kw - tf2) - (p * p)) + p7);
                }
            }
        }

        System.out.println("hf p eun = " + hf + "," + p + "," + eun);
        System.out.println("z9 y8m s = " + z9 + "," + y8m + "," + s);
        System.out.println("kw tf2 l = " + kw + "," + Float.floatToIntBits(tf2)
                + "," + checkSum(l));
        System.out.println("f wni = " + checkSum(f) + "," + checkSum(wni));

        System.out.println("p7 r ev = " + Float.floatToIntBits(p7) + "," + r
                + "," + ev);
        System.out.println("dk = " + (dk ? 1 : 0));

        System.out.println("ta_check_sum: " + ta_check_sum);
    }
}
