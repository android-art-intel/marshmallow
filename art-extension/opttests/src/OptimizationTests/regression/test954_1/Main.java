/*
 * Copyright (C) 2015 Intel Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by Dalvik Fuzzer tool (3.4.001). Thu Nov 27 00:39:03 2014
package OptimizationTests.regression.test954_1;

import OptimizationTests.regression.shared.*;

public class Main extends FuzzerUtils {

    public static final int N = 100;

    public static int is3=-36770;
    public static boolean s5=false;

    public static long gr_check_sum = 0;

public static boolean gr(int z, double mkc, int fiw) {

    short b4[]=new short[N];
    int w=-26411, q[]=new int[N];
    double v[]=new double[N];
    float xu=76.676F, t[]=new float[N];
    long f=-8651667786530963397L, d2h[]=new long[N];
    byte h=58;

    init(q, -14918);
    init(t, 120.914F);
    init(b4, (short)-27643);
    init(v, -103.235);
    init(d2h, 3004703250847382358L);

    if ((q[(fiw >>> 1) % N] += (int)((6251667974236333743L + xu) + (++d2h[(is3 >>> 1) % N]))) <= ((fiw -= (int)(w - f))
        * (fiw - t[(z >>> 1) % N]))) {
        for (is3 = 3; is3 < 76; ++is3) {
            z += (((is3 * fiw) + is3) - is3);
            fiw >>>= q[is3 - 1];
            t[is3 + 1] *= (fiw++);
            w = ((-h) + is3);
            q[is3 + 1] = (int)(((xu * mkc) / (w | 1)) * (z + xu));
        }
        for (int c : q) {
            switch (((((-13156 + q[(c >>> 1) % N]) >>> 1) % 1) * 5) + 58) {
            case 62:
                c /= -1440;
                z = b4[(is3 >>> 1) % N];
                break;
            }
        }
        v[(z >>> 1) % N] *= z;
    }
    long meth_res = z + Double.doubleToLongBits(mkc) + fiw + w + h + Float.floatToIntBits(xu) + f + checkSum(q) +
        Double.doubleToLongBits(checkSum(t)) + checkSum(b4) + Double.doubleToLongBits(checkSum(v)) + checkSum(d2h);
    gr_check_sum += meth_res;
    return meth_res % 2 > 0;
}

public static void main(String[] p4) {

    short ffh=5635;
    int xsm=29416, wa=56145, b=24016, m40=-47591, m73=49899, sd=-4959, u=-4509, nj[][]=new int[N][N], ksl[]=new int[N];
    boolean s[][]=new boolean[N][N];
    double q7c=-26.633, z2o[]=new double[N];
    float g9x=-121.20F, v03[]=new float[N];
    byte y5=96;
    long cs8=952641819567333813L;

    init(z2o, -47.513);
    init(nj, 5770);
    init(ksl, -15543);
    init(s, false);
    init(v03, -10.589F);

    for (xsm = 1; xsm < 81; xsm++) {
        wa = 1;
        do {
            b = (int)((--g9x) + -36.647F);
        } while (++wa < 3);
        b -= (int)(((45240 | wa) * z2o[xsm]) + (b++));
        nj[xsm + 1][xsm] = (int)((++nj[xsm][xsm]) - ((b++) - (--g9x)));
        cs8 = ((wa - (b + b)) - (~(-(cs8 - cs8))));
        cs8 = (cs8 &= xsm);
        if (gr(wa, z2o[xsm]++, b++)) break;
        for (m40 = 1; m40 < xsm; ++m40) {
            b = is3;
            b -= (int)((--cs8) - xsm);
            try {
                ksl[m40] = (b % is3);
                b = (xsm % xsm);
                b = (wa % 806034615);
            } catch (ArithmeticException a_e) {}
            s5 = ((24301 != (cs8 - xsm)) == s[xsm][m40 - 1]);
            s5 = s5;
            m73 = (int)(is3 - (v03[m40] += (b--)));
            if ((s5 = ((b++) > 39169)) || (s5 = s5)) continue;
            sd = 1;
            do {
                b <<= (int)(((wa + m40) ^ nj[m40 + 1][sd - 1]) - (is3 - (cs8 % (cs8 | 1))));
                b = (int)((cs8++) - xsm);
                b += (xsm >> (--b));
                cs8 = (long)(g9x--);
                y5 ^= (byte)(((ffh - g9x) * (v03[xsm - 1]++)) - m73);
                b += is3;
            } while (++sd < 23);
            g9x = (float)(((is3 + q7c) - nj[m40][xsm + 1]) * (--q7c));
            u = (int)(z2o[m40 - 1] -= m40);
        }
    }

    System.out.println("xsm wa b = " + xsm + "," + wa + "," + b);
    System.out.println("g9x cs8 m40 = " + Float.floatToIntBits(g9x) + "," + cs8 + "," + m40);
    System.out.println("m73 sd y5 = " + m73 + "," + sd + "," + y5);
    System.out.println("ffh q7c u = " + ffh + "," + Double.doubleToLongBits(q7c) + "," + u);
    System.out.println("z2o nj ksl = " + Double.doubleToLongBits(checkSum(z2o)) + "," + checkSum(nj) + "," +
        checkSum(ksl));
    System.out.println("s v03 = " + checkSum(s) + "," + Double.doubleToLongBits(checkSum(v03)));

    System.out.println("is3 s5 = " + is3 + "," + (s5 ? 1 : 0));

    System.out.println("gr_check_sum: " + gr_check_sum);
}
}
