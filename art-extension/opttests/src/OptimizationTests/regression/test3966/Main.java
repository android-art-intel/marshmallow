/*
 * Copyright (C) 2015 Intel Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by Android Runtime Fuzzer tool (4.1.002). Mon May  2 08:35:12 2016
// srand = 204624472891696613199326674745085597177

package OptimizationTests.regression.test3966;

import OptimizationTests.regression.shared.*;

public class Main extends FuzzerUtils {

    public static final int N = 100;

    public static long instanceCount=4L;
    public static double dFld=2.115707;

public static void main(String[] strArr) {

    int i=171, i1=96, i2=-46196, i3=54038, i4=9, i5=-41, iArr[]=new int[N];
    float f=0.831F, fArr[]=new float[N];
    short s=-24557, s1=19512, sArr[]=new short[N];
    byte by=-3, byArr[]=new byte[N];
    long lArr[]=new long[N];

    init(fArr, 51.212F);
    init(iArr, 0);
    init(lArr, 593590093226617658L);
    init(sArr, (short)3889);
    init(byArr, (byte)-59);

    for (i = 3; i < 78; i++) {
        i1 = 1;
        do {
            double d=2.56715;
            Main.instanceCount = (long)(((-(i1 * Main.instanceCount)) % ((i1 * Main.instanceCount) | 1)) / (((long)(i2
                = (int)(i + f))) | 1));
            f += i1;
            i2 -= (int)(-(i2 * (--f)));
            d = (((i2 - i) % ((Main.instanceCount * -35611) | 1)) & (i2++));
            i2 |= s;
            fArr[i1 + 1] += (float)((i2 <<= (++i2)) * (-(d - i2)));
            i2 -= (int)(((s1 *= (short)i1) + i1) - ((d + i) * (i1 * Main.instanceCount)));
            Main.instanceCount = (((by + i1) - (i - i2)) >> (++i2));
            i2 *= (int)(((Main.instanceCount - i) * 0.87345) + f);
            Main.instanceCount += (Main.instanceCount--);
        } while (++i1 < 47);
        i2 += (i * i);
        f += i;
        for (i3 = 1; i3 < i; i3++) {
            Main.instanceCount += (215 + (i3 * i3));
            for (i4 = 3; i4 < 72; ++i4) {
                int i6=8;
                i2 *= iArr[i4];
                lArr[i4 + 1] = (long)(Main.dFld + (Main.instanceCount - (--i2)));
                i5 = (++iArr[i]);
                iArr[i4] += i;
                i5 += (int)((--sArr[i4 + 1]) + ((f - i3) - (Main.instanceCount++)));
                f += (((i6 - i3) + (i2 + Main.instanceCount)) - (fArr[i - 1] * Main.instanceCount));
                i2 += (((i4 * Main.instanceCount) + i2) - i4);
                i2 -= (int)((byArr[i3] + (f += i4)) * (iArr[i]++));
            }
        }
    }

    System.out.println("i i1 i2 = " + i + "," + i1 + "," + i2);
    System.out.println("f s s1 = " + Float.floatToIntBits(f) + "," + s + "," + s1);
    System.out.println("by i3 i4 = " + by + "," + i3 + "," + i4);
    System.out.println("i5 fArr iArr = " + i5 + "," + Double.doubleToLongBits(checkSum(fArr)) + "," + checkSum(iArr));
    System.out.println("lArr sArr byArr = " + checkSum(lArr) + "," + checkSum(sArr) + "," + checkSum(byArr));

    System.out.println("Main.instanceCount Main.dFld = " + Main.instanceCount + "," +
        Double.doubleToLongBits(Main.dFld));
}
}
//DEBUG  Test ->  Test
//DEBUG  main ->  main Test
//DEBUG  Depth = 1
//DEBUG  Classes = 1
//DEBUG  static objects = {}
