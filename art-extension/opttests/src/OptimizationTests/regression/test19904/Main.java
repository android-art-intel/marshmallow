/*
 * Copyright (C) 2015 Intel Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by Dalvik Fuzzer tool (3.5.001). Fri Jan 30 12:05:00 2015
package OptimizationTests.regression.test19904;

import OptimizationTests.regression.shared.*;

public class Main extends FuzzerUtils {

    public static final int N = 100;

    public static int iFld=9, iArrFld[]=new int[N];
    public static double dFld=2.51138;

    static {
        init(iArrFld, -221);
    }

    public static long lMeth_check_sum = 0;
    public static long fMeth_check_sum = 0;

public static long lMeth(int i4, float f1) {

    int i5=14, i6=-28103, i7=-37, i8=-57574, i9=0;
    long l1=-824492173L;
    byte by1=110;

    i5 = 1;
    do {
        i4 = -11040;
    } while ((i5 += 2) < 95);
    for (i6 = 2; i6 < 80; ++i6) {
        i4 = (i7 - -3);
        f1 += i6;
        i7 = i5;
        i4 >>>= (int)((l1 + (i6 * i7)) - (-1.967F * (-98 + (l1 - i5))));
        f1 += (i8 += (int)-174L);
    }
    for (i9 = 1; i9 < 98; ++i9) {
        l1 = (long)(i8 + (dFld - by1));
        l1 -= (long)dFld;
        i4 = (-22129 - i6);
    }
    long meth_res = i4 + Float.floatToIntBits(f1) + i5 + i6 + i7 + l1 + i8 + i9 + by1;
    lMeth_check_sum += meth_res;
    return (long)meth_res;
}

public static float fMeth(byte by2, short s1) {

    int i10=30248, i11=-20113;
    float f2=-2.189F;
    short sArr[]=new short[N];
    long l2=2676730121L, lArr[]=new long[N];

    init(sArr, (short)-22971);
    init(lArr, 2361340861L);

    for (i10 = 3; i10 < 83; ++i10) {
        iFld = 1;
        while (++iFld < 84) {
            i11 = (int)((-(-9L - i10)) + i10);
            sArr[iFld + 1] += (short)-3L;
            lArr[i10] = ((i11--) * l2);
        }
        l2 <<= ((++i11) * i11);
        by2 >>= (byte)Float.floatToRawIntBits(i11 * (i11 + i11));
        i11 *= iFld;
        by2 = (byte)(--i11);
        i11 += i10;
    }
    i11 >>= (int)((i11 + (++l2)) - l2);
    i11 >>= (int)(((-(s1 * f2)) + (iFld - l2)) - (iArrFld[(iFld >>> 1) % N] >>= (iFld * iFld)));
    long meth_res = by2 + s1 + i10 + i11 + l2 + Float.floatToIntBits(f2) + checkSum(sArr) + checkSum(lArr);
    fMeth_check_sum += meth_res;
    return (float)meth_res;
}

public static void main(String[] strArr) {

    int i=44952, i1=-58135, i2=8, i3=-11, i12=-54338, i13=-13, iArr[]=new int[N];
    float f=-66.47F, fArr[]=new float[N];
    boolean b=true;
    short s=11135;
    long l=-2362584238L;
    double d=70.66051;
    byte by=-45;

    init(iArr, -12);
    init(fArr, -1.624F);

    try {
        for (i = 1; i < 76; ++i) {
            l = (i + (i1++));
            i1 = (i1--);
            for (i2 = i; i2 < 18; ++i2) {
                i1 = ((iArr[i2] % ((--i1) | 1)) - (-35151 * i1));
            }
            s *= (short)(iArr[i] |= (int)((--f) - (i + l)));
            by -= (byte)3530093850L;
        }
        for (i3 = 2; i3 < 91; ++i3) {
            d = (i1++);
            l -= lMeth((int)((l * 0.28372) - (-(dFld - l))), fMeth(by, s));
            l = i;
            for (i12 = 36; i12 > 2; --i12) {
                i1 -= iFld;
                b = b;
                l = (iArr[i12 + 1]++);
                for (i13 = 1; i13 < i12; ++i13) {
                    i1 = (++i1);
                    i1 = (int)(++f);
                    l = ((--iArrFld[i13]) + (++i1));
                    i1 >>= (int)((i1 + (--l)) - ((l |= -189) - (i1 ^ i2)));
                    i1 >>= (int)((iFld * (i * s)) * l);
                    iArrFld[i3 - 1] -= (int)(--l);
                    s = (short)(((l - iFld) >> iFld) + iArrFld[i13 + 1]);
                    fArr[i3 - 1] -= (float)dFld;
                }
            }
        }
    }
    catch (NegativeArraySizeException exc) {
        dFld = -81;
    }

    System.out.println("i l i1 = " + i + "," + l + "," + i1);
    System.out.println("i2 s f = " + i2 + "," + s + "," + Float.floatToIntBits(f));
    System.out.println("by i3 d = " + by + "," + i3 + "," + Double.doubleToLongBits(d));
    System.out.println("i12 b i13 = " + i12 + "," + (b ? 1 : 0) + "," + i13);
    System.out.println("iArr fArr = " + checkSum(iArr) + "," + Double.doubleToLongBits(checkSum(fArr)));

    System.out.println("dFld iFld iArrFld = " + Double.doubleToLongBits(dFld) + "," + iFld + "," + checkSum(iArrFld));

    System.out.println("lMeth_check_sum: " + lMeth_check_sum);
    System.out.println("fMeth_check_sum: " + fMeth_check_sum);
}
}
