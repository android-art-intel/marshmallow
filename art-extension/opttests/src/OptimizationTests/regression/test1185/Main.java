/*
 * Copyright (C) 2015 Intel Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by Dalvik Fuzzer tool (3.5.001). Tue Apr  7 13:13:24 2015
package OptimizationTests.regression.test1185;

import OptimizationTests.regression.shared.*;

public class Main extends FuzzerUtils {

    public static final int N = 100;

    public static double dArrFld[][]=new double[N][N];

    static {
        init(dArrFld, -75.10061);
    }

public static void main(String[] strArr) {

    int i=60596, i1=139, i2=-143, i3=-232, i4=-7, i5=-113, i6=-2, iArr[]=new int[N];
    double d=75.14214;
    float f=-80.893F, fArr[]=new float[N];
    short s=10354;
    long l=2594750724427274098L, lArr[]=new long[N];

    init(iArr, 74);
    init(lArr, 38L);
    init(fArr, -106.695F);

    for (i = 5; i < 89; i++) {
        l /= -5;
        i1 <<= i;
        i1 += (i | l);
    }
    for (i2 = 3; i2 < 97; ++i2) {
        l += (iArr[i2 - 1] += iArr[i2 + 1]);
        i1 %= (int)(lArr[i2 + 1] | 1);
        i1 &= i1;
    }
    for (i3 = 88; i3 > 4; i3--) {
        for (i4 = 3; i4 < 70; ++i4) {
            i1 /= (((++i1) * 61791) | 1);
        }
        l += (((i3 * i2) + i) - i4);
        i5 = 1;
        while (++i5 < 83) {
            i1 = (int)(--l);
            l <<= (l++);
            f += i5;
            l -= (i ^ (++iArr[i3]));
            l = (long)fArr[i3];
            l <<= (long)(f + ((--fArr[i5]) - (s++)));
            for (i6 = 3; i6 < 81; ++i6) {
                l ^= (long)((d - fArr[i5 + 1]) * i6);
                dArrFld[i6 - 1][i6] = (i1++);
                i1 = i2;
                s += (short)i5;
                d += iArr[(i3 >>> 1) % N];
            }
        }
    }

    System.out.println("i l i1 = " + i + "," + l + "," + i1);
    System.out.println("i2 i3 i4 = " + i2 + "," + i3 + "," + i4);
    System.out.println("i5 f s = " + i5 + "," + Float.floatToIntBits(f) + "," + s);
    System.out.println("i6 d iArr = " + i6 + "," + Double.doubleToLongBits(d) + "," + checkSum(iArr));
    System.out.println("lArr fArr = " + checkSum(lArr) + "," + Double.doubleToLongBits(checkSum(fArr)));

    System.out.println("dArrFld = " + Double.doubleToLongBits(checkSum(dArrFld)));
}
}
