/*
 * Copyright (C) 2015 Intel Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by Dalvik Fuzzer tool (3.3.001). Sun Jul 20 10:36:29 2014
package OptimizationTests.regression.test212248_3;

import OptimizationTests.regression.shared.*;

public class Main extends FuzzerUtils {

public static final int N = 150;

    public static long ag[]=new long[N];
    public static short xf[][]=new short[N][N];

    static {
        init(xf, (short)-1068);
        init(ag, 3310804064129370365L);
    }

public static void main(String[] b2c) {

    byte i[]=new byte[N];
    float cl=115.929F;
    long n=2139523360878107226L, z0l=8774010994686752444L;
    double yv=-56.572;
    int iq=11958, kq=31958, wy=44792, ot=62670, d=3329, e=-42432, njs=-46302, oh1=-60917, vi=-5614, psx[]=new int[N],
        yao[]=new int[N];
    boolean a=true;
    short pn=16597;

    init(psx, -2688);
    init(i, (byte)55);
    init(yao, -1342);

    for (iq = 1; iq < 123; ++iq) {
        n += iq;
        kq = iq;
        do {
            for (wy = 4; wy < 79; wy += 2) {
                ot >>= (int)(((cl + -35738) + (d * kq)) - ((--ot) * d));
                ot = (int)(50451 - ((wy - -64765) + (cl - wy)));
            }
            ot = (ot & ((wy * kq) % (ot | 1)));
            d = psx[kq - 1];
            ot = wy;
        } while ( --kq > 0 );
        e = 18;
        while ( --e > 0 ) {
            ot <<= e;
        }
        cl /= (psx[iq] | 1);
        psx[iq] = (ot--);
        ot >>= ot;
        z0l += (ot * e);
    }
    for (int o : psx) {
        try {
            for (njs = 118; njs > 4; --njs) {
                if (a) break;
                cl = (d = ((21289 - njs) - (e - kq)));
                d >>= (int)((--z0l) + wy);
                psx[njs] = (pn + kq);
                oh1 = 3;
                do {
                    i[oh1] += (byte)((ot -= (int)(cl - o)) * yv);
                    ot -= (int)z0l;
                    if ((e ^ (vi--)) <= (++vi)) {
                        z0l -= xf[njs + 1][oh1 - 1];
                    }
                    ot *= (int)(psx[njs] - ((-45863 + ag[oh1 + 1]) + pn));
                    cl *= ((wy + z0l) + (++d));
                    yao[njs] = (int)(n--);
                } while ( --oh1 > 0 );
            }
        }
        catch (NullPointerException x1) {
            cl -= (float)(n - yv);
        }
        finally {
            d *= (yao[(-55959 >>> 1) % N] * (d++));
        }
    }

    System.out.println("iq n kq = " + iq + "," + n + "," + kq);
    System.out.println("wy ot cl = " + wy + "," + ot + "," + Float.floatToIntBits(cl));
    System.out.println("d e z0l = " + d + "," + e + "," + z0l);
    System.out.println("njs a pn = " + njs + "," + a + "," + pn);
    System.out.println("oh1 yv vi = " + oh1 + "," + Double.doubleToLongBits(yv) + "," + vi);
    System.out.println("psx i yao = " + checkSum(psx) + "," + checkSum(i) + "," + checkSum(yao));
    
    System.out.println("xf ag = " + checkSum(xf) + "," + checkSum(ag));
}
}
