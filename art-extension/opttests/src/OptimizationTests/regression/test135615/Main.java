/*
 * Copyright (C) 2015 Intel Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by Dalvik Fuzzer tool (2.1.003). Mon Sep  2 13:43:43 2013
package OptimizationTests.regression.test135615;

import OptimizationTests.regression.shared.*;

public class Main extends FuzzerUtils {

    public static final int N = 30;

    public static long h2k_check_sum = 0;
    static int statIntField = 3;

    static void statSet(int value) {
        statIntField = value;
    }

    static int statGet() {
        return statIntField;
    }

    public static void h2k(int mh, int d6, int u1, int m8) {

        int l = 22349, q9 = 33862, s = 57300, it[][] = new int[N][N], e8[] = new int[N];
        long ekt[] = new long[N];

        init(it, -48755);
        init(e8, 23297);
        init(ekt, -1898459796029872864L);

        int dac = 11;
        while (--dac > 0) {
            int x4u = 11;
            while (--x4u > 0) {
                for (l = 16; l > 1; --l) {
                    it[l][l + 1] += (int) (d6 * (it[l][l]));
                    e8[l] *= (int) ((it[l][l - 1]) + ((q9--) - -20120));
                }
            }
            for (s = 22; s > 1; --s) {
                if (ekt[s] > 0)
                    continue;
            }
        }
        h2k_check_sum += mh + d6 + u1 + m8 + l + q9 + s + checkSum(it)
                + checkSum(e8) + checkSum(ekt);
    }

    public static void main(String[] w1q) {

        char uc4[] = new char[N];
        int b = 24748, rg = 65200, jww = 46325, d[] = new int[N];

        init(uc4, (char) 35030);
        init(d, 52389);

        for (b = 1; b < 2; b += 3) {
            uc4[b + 1] = (char) (uc4[b]);
            uc4[b - 1] = (char) (uc4[b]);
        }
        h2k((int) ((statGet()) - -14435),
                (int) ((((uc4[4]) + (b)) + b) - ((++rg) - (uc4[16]))),
                (int) ((uc4[17]) * rg), (int) (d[15]));
        for (jww = 27; jww > 1; --jww) {
            uc4[jww - 1] = (char) (44109);
        }

        int res = (int) checkSum(uc4);
        if (res == 35379) { 
            System.out.println("TEST PASSED");
        } else {
            System.out.println("TEST FAILED: res = " + res + "; expected res = 35379");
        }
    }
}
