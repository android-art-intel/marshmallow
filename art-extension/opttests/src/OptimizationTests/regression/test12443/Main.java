/*
 * Copyright (C) 2015 Intel Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by Dalvik Fuzzer tool (3.4.001). Sun Dec  7 13:11:50 2014
package OptimizationTests.regression.test12443;

import OptimizationTests.regression.shared.*;

public class Main extends FuzzerUtils {

    public static final int N = 100;


    public static long zet_check_sum = 0;

public static int zet(int m8x, int sb) {

    long z=-2196707075096180046L, emn[][]=new long[N][N], ae[]=new long[N];
    float l=33.101F, nio[]=new float[N];
    double ck=-121.653, wuc=125.17;
    int dsx=-47956, sx=54629, ln[][]=new int[N][N];
    short xx2=18286;

    init(ln, -54752);
    init(nio, 112.439F);
    init(emn, -2652933824948044841L);
    init(ae, -3557639741825018756L);

    for (dsx = 3; dsx < 84; ++dsx) {
        for (ck = 5; ck < 92; ++ck) {
            wuc = (ln[dsx + 1][dsx - 1] >>>= (int)((l % -14735) - (dsx - m8x)));
            m8x += (int)-5412934708705646825L;
            sb *= (int)l;
            sb = (int)(((z <<= m8x) * (m8x - 8448643841067237288L)) + (m8x + 42898));
        }
        sb += (dsx * sb);
        l += sb;
        m8x = (int)((m8x += m8x) - (xx2 - nio[dsx + 1]));
        emn[dsx - 1][dsx - 1] -= (long)(l++);
        sx += dsx;
        ae[dsx] -= (long)((z--) + ((-(z + ck)) - dsx));
    }
    long meth_res = m8x + sb + dsx + Double.doubleToLongBits(ck) + Double.doubleToLongBits(wuc) +
        Float.floatToIntBits(l) + z + xx2 + sx + checkSum(ln) + Double.doubleToLongBits(checkSum(nio)) + checkSum(emn)
        + checkSum(ae);
    zet_check_sum += meth_res;
    return (int)meth_res;
}

public static void main(String[] v5c) {

    float bl=-24.279F, w[]=new float[N];
    long d8=2316793558934852179L, rpg=-913898176798258966L, j[]=new long[N];
    byte r1=-102;
    double mn=-122.1012, ft[]=new double[N];
    int r7=-38370, n=24817, xhb=-46136, l4=53112, qn1=-37754, p31[]=new int[N], ymb[]=new int[N];
    short al=11504;
    boolean tz=false, ojd[]=new boolean[N];

    init(p31, 60195);
    init(w, 108.831F);
    init(ojd, true);
    init(j, 5268952568297972727L);
    init(ft, 44.563);
    init(ymb, 25115);

    for (r7 = 3; r7 < 83; r7 += 2) {
        n *= (-5227 + r7);
        d8 = (-((d8 * r7) - (-(r7 + n))));
        p31[r7 - 1] /= (int)((long)(((d8 - 40678) * (++n)) * (-(bl - mn))) | 1);
        for (xhb = 1; xhb < 36; ++xhb) {
            n /= (int)((long)(((r7 - n) + (w[r7 + 1]--)) - (--p31[r7])) | 1);
            tz = (bl >= n);
            d8 = (long)(n * ((r7 - d8) - bl));
            mn = (((n * al) * (++n)) - n);
            if (ojd[xhb + 1]) continue;
            d8 -= 21040;
            j[xhb + 1] -= (-((-33132 + (-(r1 * d8))) * (4726680881900719434L + (--n))));
        }
        n += r7;
        n += xhb;
        rpg *= (p31[r7 + 1]++);
    }
    for (l4 = 2; l4 < 90; ++l4) {
        bl -= p31[l4 - 1];
        for (qn1 = l4; qn1 < 43; ++qn1) {
            al &= (short)qn1;
            ft[l4 - 1] %= (((qn1 - (-10017 + (l4 - rpg))) - (--n)) | 1);
            n -= (int)(rpg += ymb[l4]);
            d8 += qn1;
            n = (int)(bl + ((r1 * qn1) * mn));
            n += (int)(((bl * qn1) - 32922) * ((--ymb[qn1 + 1]) + r7));
        }
        n += zet((int)((d8++) + (r7 + l4)), qn1);
    }

    System.out.println("r7 n d8 = " + r7 + "," + n + "," + d8);
    System.out.println("bl mn xhb = " + Float.floatToIntBits(bl) + "," + Double.doubleToLongBits(mn) + "," + xhb);
    System.out.println("tz al r1 = " + (tz ? 1 : 0) + "," + al + "," + r1);
    System.out.println("rpg l4 qn1 = " + rpg + "," + l4 + "," + qn1);
    System.out.println("p31 w ojd = " + checkSum(p31) + "," + Double.doubleToLongBits(checkSum(w)) + "," +
        checkSum(ojd));
    System.out.println("j ft ymb = " + checkSum(j) + "," + Double.doubleToLongBits(checkSum(ft)) + "," + checkSum(ymb));


    System.out.println("zet_check_sum: " + zet_check_sum);
}
}
