/*
 * Copyright (C) 2015 Intel Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by Android Runtime Fuzzer tool (4.0.001). Tue Dec 15 14:32:54 2015
// srand = 4857575287377361234293540149231187624849725611613561074112173711689

package OptimizationTests.regression.test2972_1;

import OptimizationTests.regression.shared.*;

public class Main extends FuzzerUtils {

    public static final int N = 100;

    public static long instanceCount=6391916635436589452L;
    public static double dFld=-10.12008;
    public static short sFld=-10978;
    public static long lArrFld[]=new long[N];

    static {
        init(Main.lArrFld, 171L);
    }

    public static long lMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;

public static long lMeth(int i2, int i3, long l1) {

    float f=-98.105F, f1=100.12F, fArr[][]=new float[N][N];
    boolean b=false;
    byte by=51;
    int i4=-7, i5=-20595, iArr1[]=new int[N];

    init(iArr1, 13941);
    init(fArr, -2.771F);

    for (i4 = 1; i4 < 91; i4++) {
        Main.dFld -= ((33 - i4) * ((f++) + (-(i3 - Main.instanceCount))));
        i3 = -51987;
        i5 = 1;
        while (++i5 < i4) {
            for (f1 = 1; f1 < i4; f1++) {
                f -= (float)(((Main.instanceCount * Main.dFld) * i3) + ((by++) / ((Main.lArrFld[i4 + 1]--) | 1)));
                b = (b = (!(4 != (f--))));
                Main.lArrFld[i5] = i4;
                iArr1[i5 - 1] = (int)(i5 - (--fArr[(int)(f1 + 1)][(i2 >>> 1) % N]));
            }
        }
        i2 *= i3;
        iArr1[i4 - 1] = i4;
        i2 -= (int)((long)((i3 - Main.instanceCount) + (Main.dFld--)) << (long)((Main.instanceCount % ((long)(f1) | 1))
            - Integer.reverseBytes(i5)));
    }
    long meth_res = i2 + i3 + l1 + i4 + Float.floatToIntBits(f) + i5 + Float.floatToIntBits(f1) + by + (b ? 1 : 0) +
        checkSum(iArr1) + Double.doubleToLongBits(checkSum(fArr));
    lMeth_check_sum += meth_res;
    return (long)meth_res;
}

public static int iMeth(int i6, int i7, int i8) {

    float f2=-2.1016F, fArr1[][]=new float[N][N];
    boolean b1=false;
    short s=11617;
    byte by1=-18;
    int i9=45682, i11=-10883, i12=-1, iArr2[]=new int[N];

    init(iArr2, 52830);
    init(fArr1, 2.530F);

    i9 = 1;
    do {
        iArr2[i9] >>= (int)(i7 <<= (int)(Math.abs(Main.dFld) + (i7 >>> by1)));
    } while (++i9 < 96);
    for (int i10 : iArr2) {
        if ((i9 * (by1 = (byte)(i12 + 65))) <= f2) {
            for (i11 = 5; i11 < 86; i11++) {
                iArr2[i11] /= (int)(i7 | 1);
                by1 *= (byte)((i10 = (int)(55312 * (1.371F - (-(--i6))))) + ((i6--) + (Main.instanceCount + i10)));
                Main.dFld -= -11;
                Main.instanceCount = -75;
                Main.dFld += (fArr1[i11 - 1][i11] * i12);
                if (b1) break;
                iArr2[i11] = (--s);
            }
        }
    }
    long meth_res = i6 + i7 + i8 + i9 + by1 + i11 + i12 + (b1 ? 1 : 0) + s + Float.floatToIntBits(f2) + checkSum(iArr2)
        + Double.doubleToLongBits(checkSum(fArr1));
    iMeth_check_sum += meth_res;
    return (int)meth_res;
}

public static void main(String[] strArr) {

    float f3=68.268F, fArr2[]=new float[N];
    double d=-89.95036;
    byte by2=126;
    int i=17510, i1=114, i13=-49024, i14=11, i15=45745, iArr[][]=new int[N][N];
    long l=-153L, l2=-166L;

    init(iArr, 199);
    init(fArr2, -104.790F);

    for (i = 2; i < 86; i++) {
        i1 -= iArr[i - 1][i - 1];
        iArr[i][i] /= (int)((((Main.instanceCount * i1) - i) - (--l)) | 1);
        Main.lArrFld[i - 1] /= (lMeth((i + i) * (i1++), iMeth(--i1, iArr[i - 1][i - 1], i - i), (i - -141) + (--l)) |
            1);
        i1 = (int)((Main.sFld = (short)iArr[i][i + 1]) * (Main.instanceCount + (i - i)));
    }
    for (i13 = 5; i13 < 88; ++i13) {
        iArr[i13][i13] -= (int)((iArr[i13][i13] + (++l)) + (i1++));
    }
    d = 1;
    while (++d < 93) {
        fArr2[(int)(d + 1)] = Math.min(i, Math.min(-42703, i1) - (i + i1));
        i1 = i;
        by2 = (byte)(i1 - ((f3 + i) - Main.instanceCount));
        for (i14 = (int)d; i14 > 1; --i14) {
            i1 <<= (int)((i13 + (i / (i13 | 1))) + ((i1++) / (((long)(f3 * i1)) | 1)));
            i1 &= (int)Main.instanceCount;
            for (i15 = i14; i15 < 26; i15++) {
                int i16=7;
                i1 *= (int)f3;
                fArr2[i15 - 1] -= ((--i1) - by2);
                i1 = (int)(Math.min((int)(d + i1), i1) + (-l));
                i1 = (int)(i1 - (++l));
                f3 += Math.abs((float)((-113 - (i14 + 10)) - (28.10137 + (Main.instanceCount + 211))));
                i1 = (i1++);
                i1 = (int)(l2++);
                i1 %= (int)((((i1 - i1) - l) + ((Main.instanceCount + i1) * (l2 - i1))) | 1);
                Main.lArrFld[i14 + 1] *= (l + ((l2++) - Main.instanceCount));
                iArr[i14][i15] >>>= (int)((i1 = (int)(-(f3 + -1.824F))) * ((-47949 & i) % (i16 | 1)));
            }
        }
    }

    System.out.println("i i1 l = " + i + "," + i1 + "," + l);
    System.out.println("i13 d by2 = " + i13 + "," + Double.doubleToLongBits(d) + "," + by2);
    System.out.println("f3 i14 i15 = " + Float.floatToIntBits(f3) + "," + i14 + "," + i15);
    System.out.println("l2 iArr fArr2 = " + l2 + "," + checkSum(iArr) + "," + Double.doubleToLongBits(checkSum(fArr2)));

    System.out.println("Main.instanceCount Main.dFld Main.sFld = " + Main.instanceCount + "," +
        Double.doubleToLongBits(Main.dFld) + "," + Main.sFld);
    System.out.println("Main.lArrFld = " + checkSum(Main.lArrFld));

    System.out.println("lMeth_check_sum: " + lMeth_check_sum);
    System.out.println("iMeth_check_sum: " + iMeth_check_sum);
}
}
