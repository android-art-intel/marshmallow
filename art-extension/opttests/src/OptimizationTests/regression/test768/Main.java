/*
 * Copyright (C) 2015 Intel Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by Dalvik Fuzzer tool (3.4.001). Wed Oct 22 10:54:54 2014
package OptimizationTests.regression.test768;

import OptimizationTests.regression.shared.*;

public class Main extends FuzzerUtils {

    public static final int N = 100;

    public static int i = 17626;

    public static void main(String[] d3) {

        byte ztw = -77;
        long mk = -5497240700694158211L, yq[] = new long[N], d[] = new long[N];
        float z62 = -4.422F, ca7[] = new float[N];
        double rbp = -32.108;
        int leq = 49461, q5 = -10315, kh = -62658, nbp = 56321, p = -57122, x[] = new int[N], uys[] = new int[N];
        short ttr[] = new short[N];

        init(x, 41017);
        init(yq, 7847547363801084121L);
        init(ca7, -1.613F);
        init(ttr, (short) 7264);
        init(d, 448508704094026978L);
        init(uys, 60632);

        for (leq = 2; leq < 86; ++leq) {
            i |= (int) (((i - leq) - -2835590375789582149L) - (leq >>> (long) (mk -= (long) rbp)));
            i %= (int) ((long) (((-308094023659390977L * q5) * (mk * q5)) + ((i++) * 23.623F)) | 1);
            x[leq + 1] += 52456;
            for (kh = 1; kh < leq; kh++) {
                q5 += (kh - z62);
                nbp = 1;
                while (++nbp < 27) {
                    q5 -= q5;
                    q5 = ztw;
                    q5 -= (int) (((kh - mk) << (kh - q5)) - (leq - (leq ^ leq)));
                    z62 = ((i + (leq * nbp)) - (++z62));
                    i = (int) (mk + ((kh + q5) - (yq[nbp - 1]--)));
                    if (true) {
                        q5 &= x[nbp + 1];
                        ca7[nbp + 1] -= (-38591 * ((mk + leq) - nbp));
                        mk = (-(kh * (mk * q5)));
                    } else {
                        q5 = (-(q5++));
                    }
                    q5 = (int) (((z62 % (kh | 1)) * (i++)) + nbp);
                }
                ttr[leq + 1] += (short) (((i = leq) - kh) * (mk - (31.595 + q5)));
                for (p = 2; p < 67; p++) {
                    q5 = x[kh + 1];
                    mk = (long) (z62 - (kh % ((--i) | 1)));
                    d[kh - 1] >>>= ztw;
                    i += ((uys[p - 1]++) - ((q5--) - (q5 * q5)));
                    mk += ((x[kh - 1]++) % ((leq - (++mk)) | 1));
                }
            }
        }

        System.out.println("leq mk rbp = " + leq + "," + mk + ","
                + Double.doubleToLongBits(rbp));
        System.out.println("q5 kh z62 = " + q5 + "," + kh + ","
                + Float.floatToIntBits(z62));
        System.out.println("nbp ztw p = " + nbp + "," + ztw + "," + p);
        System.out.println("x yq ca7 = " + checkSum(x) + "," + checkSum(yq)
                + "," + Double.doubleToLongBits(checkSum(ca7)));
        System.out.println("ttr d uys = " + checkSum(ttr) + "," + checkSum(d)
                + "," + checkSum(uys));

        System.out.println("i = " + i);
    }
}
