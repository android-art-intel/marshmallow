/*
 * Copyright (C) 2015 Intel Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by Dalvik Fuzzer tool (3.5.001). Sat Mar 21 17:27:34 2015
package OptimizationTests.regression.test7318;

import OptimizationTests.regression.shared.*;

public class Main extends FuzzerUtils {

    public static final int N = 100;

    public static float fFld=103.760F;

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

public static void vMeth(int i, float f) {

    short s=-5496;
    long l=677882642L, l1=-1L;
    int i1=-215, i2=-1, i3=174, i4=-9035, i5=-44991, iArr[]=new int[N];

    init(iArr, -8);

    for (i1 = 5; i1 < 81; ++i1) {
        l = (i -= (int)(iArr[i1 - 1] + (l1 + l)));
        l += i1;
        i += (((i1 * l) + i) - f);
    }
    for (i2 = 1; i2 < 98; i2++) {
        f += l;
        l = -61197;
    }
    for (i3 = 4; i3 < 82; ++i3) {
        for (i4 = 2; i4 < 98; i4++) {
            s = (short)(i1 * i4);
        }
        f += (((i5 * i1) * (i5 - f)) - ((i3 - f) * s));
        iArr[i3] = (-48 * (++iArr[i3]));
    }
    vMeth_check_sum += i + Float.floatToIntBits(f) + i1 + l + l1 + i2 + i3 + i4 + s + i5 + checkSum(iArr);
}

public static void vMeth1(float f1, long l4, double d1) {

    short sArr[][]=new short[N][N];
    long lArr[]=new long[N], lArr1[]=new long[N];
    boolean b=false;
    int i11=-6, i12=-44704, i13=-126, i14=-6, iArr2[]=new int[N];

    init(lArr, 10171L);
    init(iArr2, -2);
    init(sArr, (short)22919);
    init(lArr1, -6450387191609346696L);

    for (i11 = 5; i11 < 98; i11++) {
        if (b) continue;
        i12 /= (int)((++lArr[i11 - 1]) | 1);
        i12 = iArr2[i11 - 1];
        for (i13 = i11; i13 < 38; ++i13) {
            i14 = 1;
            while (++i14 < 70) {
                i12 *= (int)f1;
                l4 *= Float.floatToRawIntBits(fFld);
                i12 += i14;
                fFld += (((--iArr2[i14 - 1]) - l4) - ((f1--) + (i12 + i13)));
                sArr[i13][i14 + 1] >>= (short)(l4 -= ((i12 <<= (int)l4) - i11));
                lArr1[i14 + 1] *= i12;
            }
        }
    }
    vMeth1_check_sum += Float.floatToIntBits(f1) + l4 + Double.doubleToLongBits(d1) + i11 + (b ? 1 : 0) + i12 + i13 +
        i14 + checkSum(lArr) + checkSum(iArr2) + checkSum(sArr) + checkSum(lArr1);
}

public static void main(String[] strArr) {

    float fArr[][]=new float[N][N];
    byte by=83;
    long l2=-49814L, l3=122L;
    short s1=15855;
    boolean bArr[]=new boolean[N];
    double d=-1.101329, dArr[]=new double[N];
    int i6=1, i7=58941, i8=-52417, i9=-5, i10=5, i15=25680, iArr1[]=new int[N];

    init(iArr1, 175);
    init(dArr, -1.2267);
    init(fArr, -70.104F);
    init(bArr, false);

    vMeth((int)((++iArr1[(i6 >>> 1) % N]) - ((s1 * d) - (i6 + l2))), 2.638F);
    for (i7 = 4; i7 < 94; i7++) {
        l2 *= (((l2 - i6) + (i7 * 14)) + ((l2 + l3) + i6));
        i6 += (int)(l2++);
        i6 >>= (int)(((~(i6 -= s1)) * d) + dArr[i7]);
        i6 >>= (++i6);
        i6 ^= (int)(((-2.402F + (fFld++)) + (--l3)) - i7);
        for (i8 = 1; i8 < 51; ++i8) {
            fFld -= by;
            i6 += (-37 + (i8 * i8));
            i6 = (int)((l3 &= (l2 * l2)) - (i8 + (i6 - fFld)));
        }
        i6 *= (int)(((fArr[i7][i7 - 1]++) * (l3 >> l3)) + iArr1[i7 + 1]);
        i6 *= (int)((l3++) + ((i6 = i6) ^ (--i6)));
        i6 = by;
    }
    for (i9 = 4; i9 < 90; i9++) {
        for (i10 = 1; i10 < 19; ++i10) {
            i6 <<= (int)l3;
        }
        vMeth1(fFld, l2++, l3 + ((i10 - i6) + (i8 - i10)));
        l3 += ((long)i9 ^ (long)by);
        bArr[i9] = ((l3 + 2005) != (-(l3++)));
        i6 = (i6--);
    }
    i15 = 1;
    while (++i15 < 81) {
        i6 += (--iArr1[i15 - 1]);
        s1 -= (short)((i6 + (i6 -= 7127)) + -45797);
        iArr1[i15 + 1] -= (int)(dArr[i15 + 1] - (-s1));
    }

    System.out.println("i6 s1 d = " + i6 + "," + s1 + "," + Double.doubleToLongBits(d));
    System.out.println("l2 i7 l3 = " + l2 + "," + i7 + "," + l3);
    System.out.println("i8 by i9 = " + i8 + "," + by + "," + i9);
    System.out.println("i10 i15 iArr1 = " + i10 + "," + i15 + "," + checkSum(iArr1));
    System.out.println("dArr fArr bArr = " + Double.doubleToLongBits(checkSum(dArr)) + "," +
        Double.doubleToLongBits(checkSum(fArr)) + "," + checkSum(bArr));

    System.out.println("fFld = " + Float.floatToIntBits(fFld));

    System.out.println("vMeth_check_sum: " + vMeth_check_sum);
    System.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
}
}
