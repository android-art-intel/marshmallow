/*
 * Copyright (C) 2015 Intel Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by Android Runtime Fuzzer tool (3.5.002). Sat Aug 29 00:22:02 2015

package OptimizationTests.regression.test2580;

import OptimizationTests.regression.shared.*;

public class Main extends FuzzerUtils {

    public static final int N = 100;

    public static byte byArrFld[]=new byte[N];

    static {
        init(byArrFld, (byte)32);
    }

public static void main(String[] strArr) {

    byte by=-38;
    double d=2.57134;
    int i=55, i1=-13140, i2=7, i3=-83, iArr[]=new int[N];
    short s=-19105;
    float f=1.871F, f1=-2.256F, f2=1.759F;
    Main O=new Main(), O1=null, O2=new Main(), O3=null, O4=new Main(), O5=new Main(), O6=new Main(), O7=null, O8=new
        Main(), O9=new Main(), O10=new Main(), O11=new Main(), O12=new Main(), O13=new Main(), O14=null, O15=null;
    long l=-902490006484463541L, l1=-10L, lArr[]=new long[N];

    init(lArr, -2919183074L);
    init(iArr, 16);

    for (i = 5; i < 91; ++i) {
        O = (O1 = O2);
        i1 = (i1--);
    }
    for (f = 2; f < 82; f++) {
        O2 = (O3 = (O4 = (O5 = O6)));
        l = (((i1 + i1) + (i + i)) * (lArr[(int)(f)] += (i1 + i)));
        O4 = (O7 = (O8 = O9));
        l1 = (i1 + ((l1 - i) + i1));
        O3 = (O10 = (O11 = (O12 = O13)));
    }
    for (f1 = 2; f1 < 97; ++f1) {
        i1 += (int)(((f1 * i) + i) - i1);
        byArrFld[(int)(f1)] = (byte)((i1++) - d);
        i2 = 1;
        while (++i2 < 54) {
            O2 = (O14 = O15);
            f2 -= 14L;
            l1 -= (i1++);
            i1 >>= (int)l1;
            l1 = (lArr[i2] - i);
            for (i3 = 3; i3 < 72; ++i3) {
                i1 = (int)(l1 >>> (++iArr[i3 - 1]));
                l1 = (long)(d - (iArr[(i3 >>> 1) % N] - (by >> i1)));
                i1 += i3;
                i1 -= 175;
                l += (--i1);
                f2 += (++s);
            }
        }
    }

    System.out.println("i i1 f = " + i + "," + i1 + "," + Float.floatToIntBits(f));
    System.out.println("l l1 f1 = " + l + "," + l1 + "," + Float.floatToIntBits(f1));
    System.out.println("d i2 f2 = " + Double.doubleToLongBits(d) + "," + i2 + "," + Float.floatToIntBits(f2));
    System.out.println("i3 by s = " + i3 + "," + by + "," + s);
    System.out.println("lArr iArr O = " + checkSum(lArr) + "," + checkSum(iArr) + "," + checkSum(O));
    System.out.println("O1 O2 O3 = " + checkSum(O1) + "," + checkSum(O2) + "," + checkSum(O3));
    System.out.println("O4 O5 O6 = " + checkSum(O4) + "," + checkSum(O5) + "," + checkSum(O6));
    System.out.println("O7 O8 O9 = " + checkSum(O7) + "," + checkSum(O8) + "," + checkSum(O9));
    System.out.println("O10 O11 O12 = " + checkSum(O10) + "," + checkSum(O11) + "," + checkSum(O12));
    System.out.println("O13 O14 O15 = " + checkSum(O13) + "," + checkSum(O14) + "," + checkSum(O15));

    System.out.println("byArrFld = " + checkSum(byArrFld));
}
}
