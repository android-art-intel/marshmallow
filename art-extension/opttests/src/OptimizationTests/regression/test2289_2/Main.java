/*
 * Copyright (C) 2015 Intel Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by Android Runtime Fuzzer tool (3.5.002). Wed Jul  8 07:08:26 2015
// srand = 24004669905147492532956573221050193524561325847151383577586413379270

package OptimizationTests.regression.test2289_2;

import OptimizationTests.regression.shared.*;

class TestClass {
    public int field;
    public void meth() {field = 1;}
}

public class Main extends FuzzerUtils {

    public static final int N = 100;

    public static float fArrFld[]=new float[N];
    public static int iFld=100;

    static {
        init(fArrFld, -34.48F);
    }

    public static long vMeth_check_sum = 0;
    public static long bMeth_check_sum = 0;

public static void vMeth(long l1, int i5) {

    double dArr[]=new double[N];
    short s1=-18;
    float f1=86.897F;
    boolean b1=false;
    int i6=-13, i7=1, iArr1[]=new int[N];

    init(iArr1, -76);
    init(dArr, 2.61604);

    for (iFld = 5; iFld < 84; ++iFld) {
        for (i6 = 1; i6 < 33; ++i6) {
            b1 = (i5 > ((12L - (l1 + i5)) * (i5 + l1)));
            fArrFld[iFld] -= (((-(l1 - i5)) * i5) - ((l1 + i6) >> (l1 - i5)));
            try {
                i5 += i5;
                l1 >>= (long)(0.942F * ((i7--) - -127));
                iArr1[iFld] += (int)((++f1) + ((--iArr1[i6]) - Math.max(iFld, i7)));
                TestClass obj = null;
                obj.field = 3;
                iArr1[i6] = (int)(s1 - (i7 = (int)Math.abs(l1)));
                i7 += (i6 - iArr1[iFld + 1]);
            }
            catch (NullPointerException exc) {
                dArr[i6 + 1] -= Math.max(i5--, (int)((i7 * f1) + (++i7)));
            }
        }
    }
    vMeth_check_sum += l1 + i5 + i6 + (b1 ? 1 : 0) + i7 + Float.floatToIntBits(f1) + s1 + checkSum(iArr1) +
        Double.doubleToLongBits(checkSum(dArr));
}

public static boolean bMeth(int i9, long l2) {

    double d1=96.1671, dArr1[]=new double[N];
    byte byArr[]=new byte[N];
    long lArr1[]=new long[N];
    float f2=-80.92F, f3=-108.947F;
    int i10=16757, i11=-7952, iArr2[]=new int[N], iArr3[]=new int[N], iArr4[]=new int[N];

    init(iArr2, 11);
    init(iArr3, 202);
    init(dArr1, 0.44950);
    init(lArr1, 239L);
    init(iArr4, 17182);
    init(byArr, (byte)102);

    for (i10 = 1; i10 < 77; i10 += 2) {
        for (i11 = 45; i11 > i10; --i11) {
            f2 *= (iArr2[i10 - 1]--);
            i9 += (i11 * i11);
            i9 = (int)((iArr3[i10] >> iFld) >> ((--l2) - (i11 - l2)));
            iArr3[i11 - 1] = (int)((f3++) - ((--f3) - dArr1[i10 - 1]));
            iArr3[i11] = iArr3[i11];
            i9 = (int)(((--i9) + (lArr1[i10 + 1]++)) + (++d1));
            i9 -= (int)(i9 -= (int)(d1--));
        }
        i9 -= iFld;
        try {
            iArr2[i10] = (iArr3[i10] % -276099335);
            iArr4[i10] = (-1628183632 / iArr3[i10 - 1]);
            i9 = (25065 / i10);
        } catch (ArithmeticException a_e) {}
        i9 <<= byArr[i10];
    }
    long meth_res = i9 + l2 + i10 + i11 + Float.floatToIntBits(f2) + Float.floatToIntBits(f3) +
        Double.doubleToLongBits(d1) + checkSum(iArr2) + checkSum(iArr3) + Double.doubleToLongBits(checkSum(dArr1)) +
        checkSum(lArr1) + checkSum(iArr4) + checkSum(byArr);
    bMeth_check_sum += meth_res;
    return meth_res % 2 > 0;
}

public static void main(String[] strArr) {

    double d=-110.21099;
    long l=32293L, lArr[]=new long[N];
    byte by=-60, by1=-102;
    short s=31373;
    float f=0.727F;
    boolean b=false, bArr[]=new boolean[N];
    int i=2, i1=-12, i2=-27206, i3=-11, i4=8480, i8=-174, iArr[][]=new int[N][N];

    init(iArr, 8);
    init(bArr, true);
    init(lArr, 6L);

    if (((f + (lArr[(i4 >>> 1) % N]--)) != i) ^ ((bMeth(i8, l) || (b = b)) & ((b && b) || (b && b)))) {
        for (i = 1; i < 89; ++i) {
            i1 = 1;
            do {
                iArr[i - 1][i + 1] = (int)(((-125.99402 * (-3 - (--iArr[i - 1][i - 1]))) - (by - l)) - ((i2 <<= (int)l)
                    * (i2 = i1)));
                i2 >>= (int)(iArr[i - 1][i + 1] | l);
                f *= (--i2);
                i2 |= (int)(((i2 = i) - (i - i1)) - (l + (++d)));
                l += (((l - i1) - (i2 % (i1 | 1))) + Math.min(-6, -15019 + i1));
                i2 <<= (int)((~(i - i)) + (--d));
                iArr[i1][i1 + 1] = 2;
            } while (++i1 < 20);
            i2 >>= 61710;
            s = (short)((++i2) * (i1 / ((--iArr[i + 1][i + 1]) | 1)));
            i3 = 40;
            do {
                s -= (short)(i1 - (i2 += (i1 - i)));
                d += l;
                i2 ^= i3;
                for (i4 = 5; i4 < 95; ++i4) {
                    i2 = (i2 &= i3);
                    bArr[i - 1] = b;
                    i2 -= (int)(((f / (i2 | 1)) * (i + f)) - iArr[i][i + 1]);
                    i2 += (int)(l--);
                    l = ((i3 + i3) - (++i2));
                    i2 -= (int)((-2.93F * (236 << l)) * ((i4 + i3) * (d * i4)));
                    i2 += (i4 * i4);
                    i2 += (int)l;
                }
            } while (--i3 > 0);
        }
    } else if (b) {
        vMeth(lArr[(i3 >>> 1) % N], i2 *= ((iFld - by) - (by1 - i1)));
    } else if (b = (i1 <= -29057)) {
        vMeth((Integer.reverseBytes(i1) - i3) * l, Math.abs((int)((i8 + by1) - (l + i4))));
    }

    System.out.println("i i1 by = " + i + "," + i1 + "," + by);
    System.out.println("l i2 f = " + l + "," + i2 + "," + Float.floatToIntBits(f));
    System.out.println("d s i3 = " + Double.doubleToLongBits(d) + "," + s + "," + i3);
    System.out.println("i4 b by1 = " + i4 + "," + (b ? 1 : 0) + "," + by1);
    System.out.println("i8 iArr bArr = " + i8 + "," + checkSum(iArr) + "," + checkSum(bArr));
    System.out.println("lArr = " + checkSum(lArr));

    System.out.println("iFld fArrFld = " + iFld + "," + Double.doubleToLongBits(checkSum(fArrFld)));

    System.out.println("vMeth_check_sum: " + vMeth_check_sum);
    System.out.println("bMeth_check_sum: " + bMeth_check_sum);
}
}
