/*
 * Copyright (C) 2015 Intel Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by Dalvik Fuzzer tool (2.1.003). Mon May 19 12:21:11 2014
package OptimizationTests.regression.test196371;

import OptimizationTests.regression.shared.*;

public class Main extends FuzzerUtils {

public static final int N = 30;

public static long l_check_sum = 0;
static int statIntField = 3;
static void statSet(int value) {statIntField = value;}
static int  statGet() {return statIntField;}

public static void l(long gef, int lh) {

    byte vy[][]=new byte[N][N];
    long loz=774705934405679146L, v=5150893784079847868L, o[]=new long[N];
    int k=40801, r=-22892, flz=14275, r5=27876, s=-55201, h6[]=new int[N], y[][]=new int[N][N], uw[]=new int[N];

    init(h6, -29266);
    init(y, 30109);
    init(uw, 31232);
    init(vy, (byte)-8);
    init(o, -2373598341353439026L);

    int fhr = 11;
    while ( --fhr > 0 ) {
        for (k = 16; k > 1; --k) {
            h6[k-1] *= (int)(h6[k-1]);
        }
        for (r = 1; r < 11; r++) {
            flz += (int)(h6[r+1]);
            try {
                y[r-1][r] = (int)(gef % loz);
                flz = (int)(uw[r+1] / 249357996);
                h6[r-1] = (int)(247 % r5);
                vy[r][r] = (byte)(y[r+1][r-1] % -40721);
                v = (long)(lh / -76);
            } catch (ArithmeticException a_e) {}
        }
    }

    for (s = 1; s < 13; s++) {
        o[s-1] = (long)(k);
    }

    l_check_sum += gef + lh + k + r + flz + loz + r5 + v + s + checkSum(h6) + checkSum(y) + checkSum(uw) + checkSum(vy)
        + checkSum(o);
}

public static void main(String[] t) {

    long x[]=new long[N];
    int cx3=51939, ns=-30682, qj=-41685, m=-36265, s=-65093, g=43280, u=-33318, j=60684, mj=-62522, v=21149, bus=45278,
        hj=48650, vcm[]=new int[N], lfp[]=new int[N], cr[][]=new int[N][N], c0h[][]=new int[N][N], voh[]=new int[N];

    init(vcm, 36220);
    init(lfp, -31455);
    init(cr, -60139);
    init(c0h, -13333);
    init(x, -785734780309665298L);
    init(voh, -56592);

    for (cx3 = 1; cx3 < 21; ++cx3) {
        ns -= (int)(vcm[cx3+1]);
        for (qj = 1; qj < cx3; ++qj) {
            lfp[cx3+1] *= (int)(ns - (ns * qj));
            cr[qj+1][qj-1] -= (int)(--m);
        }
        for (s = 1; s < cx3; ++s) {
            int o = 11;
            while ( --o > 0 ) {
                c0h[cx3+1][s-1] *= (int)(g++);
            }
            for (u = 1; u < 5; ++u) {
                m += (int)(j--);
                l((long)(j - ((vcm[u-1]) + ((vcm[cx3-1]) - (vcm[u+1])))), (int)(cr[cx3+1][s-1]));
                j += (int)(cr[u][s-1]);
            }
            for (mj = 1; mj < 5; mj++) {
                int[] eb = null;
                try {
                    statSet((int)(--v));
                    eb[2] = 3;
                    try {
                        vcm[s-1] = (int)(42077 % g);
                        v = (int)(109330957 % m);
                        c0h[cx3-1][cx3-1] = (int)(lfp[mj-1] / 31666032);
                        x[s] = (long)(6376 % x[s]);
                        ns = (int)(234 / voh[cx3]);
                    } catch (ArithmeticException a_e) {}

                } catch (NullPointerException r6) {
                    m += (int)(vcm[cx3-1]);
                    v = (int)(++bus);
                } finally {
                    g -= (int)(c0h[cx3+1][cx3]);
                }
            }
        }
    }
    for (hj = 1; hj < 21; ++hj) {
        cr[hj-1][hj] += (int)(voh[hj+1]);
    }

    System.out.println("long: " + checkSum(x));
    System.out.println("int: " + cx3 + "," + ns + "," + qj + "," + m + "," + s + "," + g + "," + u + "," + j + "," + mj
        + "," + v + "," + bus + "," + hj + "," + checkSum(vcm) + "," + checkSum(lfp) + "," + checkSum(cr) + "," +
        checkSum(c0h) + "," + checkSum(voh));

    System.out.println("l_check_sum: " + l_check_sum);
    System.out.println("statIntField: " + statIntField);
}
}
