/*
 * Copyright (C) 2015 Intel Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by Dalvik Fuzzer tool (3.5.001). Sat Feb  7 10:47:19 2015
package OptimizationTests.regression.test1461;

import OptimizationTests.regression.shared.*;

public class Main extends FuzzerUtils {

    public static final int N = 100;


public static void main(String[] strArr) {

    float f=2.355F, f1=42.968F, fArr[]=new float[N];
    int i=230, i1=-2, i2=228, i3=-7, i4=191, iArr[]=new int[N];
    double d=76.121384;
    long l=-57210L, lArr[]=new long[N];
    byte by=-10;

    init(lArr, 3075693029L);
    init(iArr, -427);
    init(fArr, -1.898F);

    for (i = 1; i < 83; i++) {
        f += (i1--);
        try {
            by = (byte)i;
            i1 *= -30596;
            f1 = (-(f1--));
            for (i2 = 4; i2 < 91; i2++) {
                i1 = (int)f;
                i3 = 1;
                do {
                    l |= (lArr[i + 1]++);
                    f1 = i;
                    f1 = (i1++);
                    i4 = -10;
                    iArr = new int[i4];
                    l >>= Math.abs((int)((-(i3 - -8)) - (by - l)));
                    by = (byte)((i4--) + i3);
                    f1 -= iArr[i3];
                    i1 &= (int)(l--);
                    l += (3 + (i3 * i3));
                    lArr[i] = (((l++) - (l + i3)) + i4);
                } while (++i3 < 98);
                try {
                    i4 += i2;
                    i4 += (int)(-(i2 + (++fArr[i2 + 1])));
                    i1 = i;
                    i4 = (int)(d - (++i1));
                    i1 -= (int)((--d) - (i1 = (++iArr[i + 1])));
                }
                catch (ArrayIndexOutOfBoundsException exc) {
                    f1 = l;
                }
            }
        }
        catch (NegativeArraySizeException exc1) {
            by &= (byte)i2;
        }
    }

    System.out.println("i f i1 = " + i + "," + Float.floatToIntBits(f) + "," + i1);
    System.out.println("by f1 i2 = " + by + "," + Float.floatToIntBits(f1) + "," + i2);
    System.out.println("i3 l i4 = " + i3 + "," + l + "," + i4);
    System.out.println("d lArr iArr = " + Double.doubleToLongBits(d) + "," + checkSum(lArr) + "," + checkSum(iArr));
    System.out.println("fArr = " + Double.doubleToLongBits(checkSum(fArr)));

}
}
