/*
 * Copyright (C) 2015 Intel Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by Dalvik Fuzzer tool (3.4.001). Sun Dec  7 08:01:28 2014
package OptimizationTests.regression.test12444;

import OptimizationTests.regression.shared.*;

public class Main extends FuzzerUtils {

    public static final int N = 100;


public static void main(String[] g) {

    float eq=-58.1002F;
    short z=27376;
    int uy=-45173, f=13440, qsc=-52387, q=14304, m0=-18816, i[]=new int[N], m6[]=null;
    byte gwi=37, u[][]=new byte[N][N];
    long s6=-4589368210175499736L, y[]=new long[N];

    init(u, (byte)59);
    init(i, -11631);
    init(y, -725031112225467380L);
    
    for (uy = 2; uy < 21; uy++) {
        f = u[(uy >>> 1) % N][uy];
        i[uy] = (int)(uy + s6);
        z += (short)eq;
        qsc = 17;
        do {
            s6 = (long)(qsc * ((s6 - qsc) + (uy * eq)));
            for (q = 1; q < 28; ++q) {
                f <<= (((f - 7829) * m0) + (-z));
                eq -= (m0++);
                switch ((qsc % 2) + 68) {
                case 68:
                    y[uy - 1] -= (++m0);
                    f += (m0++);
                    break;
                case 69:
                    i[qsc] -= m0;
                    break;
                default:
                    eq += 125.76F;
                    m0 <<= (int)(((++m0) - (1018 / (qsc | 1))) << ((m0 + uy) * (-2610501649556048071L % ((s6++) | 1))));
                }
                m0 >>= (++m0);
                m0 = (m0 -= (qsc + (39021 * qsc)));
                m0 >>>= uy;
                try {
                    f = i[qsc];
                    m0 >>>= m0;
                    f = (int)(((-(gwi - 113.991)) + qsc) + (-(--u[qsc][q - 1])));
                    s6 += s6;
                    f = m6[1];
                    i[uy] &= i[q];
                }
                catch (NullPointerException ck) {
                    u[qsc + 1][qsc - 1] >>= (byte)i[qsc];
                }
            }
        } while (--qsc > 0);
    }

    System.out.println("uy f s6 = " + uy + "," + f + "," + s6);
    System.out.println("z eq qsc = " + z + "," + Float.floatToIntBits(eq) + "," + qsc);
    System.out.println("q m0 gwi = " + q + "," + m0 + "," + gwi);
    System.out.println("u i y = " + checkSum(u) + "," + checkSum(i) + "," + checkSum(y));
    System.out.println("m6 = " + 0);
}
}
