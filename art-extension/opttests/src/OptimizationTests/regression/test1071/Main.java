/*
 * Copyright (C) 2015 Intel Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by Dalvik Fuzzer tool (3.4.001). Sat Dec 20 06:53:08 2014
package OptimizationTests.regression.test1071;

import OptimizationTests.regression.shared.*;

public class Main extends FuzzerUtils {

    public static final int N = 100;

    public static double a0c[]=new double[N];
    public static short vlz=634;

    static {
        init(a0c, 43.342);
    }

    public static long n9_check_sum = 0;
    public static long w_check_sum = 0;

public static void n9(byte n4) {

    float k=-14.741F;
    long i=-5631651347011552398L, pp3=-2951368082341647486L;
    int z5g=52127, ygv=60898, f86=11808, r[]=new int[N];
    double a=-16.54, t=-19.961;

    init(r, -4113);

    for (a = 2; a < 77; a++) {
        z5g -= (int)(((i & 8610427089840996999L) + i) - ((a * z5g) / ((z5g * z5g) | 1)));
        for (ygv = (int)a; ygv < a; ygv += 2) {
            z5g += (int)-2318734241240627059L;
            t -= a;
            for (f86 = 2; f86 < 50; f86++) {
                z5g -= (int)(r[f86] - ((-3222159966527883975L + pp3) + (ygv - -4.140F)));
                z5g = (int)a0c[ygv + 1];
                i = (z5g--);
                z5g += 30856;
            }
            k = (((--i) + (f86 - f86)) >>> (long)((--z5g) - (a - z5g)));
            pp3 >>= z5g;
        }
    }
    n9_check_sum += n4 + Double.doubleToLongBits(a) + z5g + i + ygv + Double.doubleToLongBits(t) + f86 + pp3 +
        Float.floatToIntBits(k) + checkSum(r);
}

public static int w(int s, int wh) {

    long yv=7969836888277963710L, aw=5454623245291914853L, ei[][]=new long[N][N];
    int py=839, g5h=-46513, drz=-4965, nmj=30167, x[]=new int[N];
    boolean y3e=false;
    short t1[]=new short[N];

    init(x, -44833);
    init(ei, 6370384340081766131L);
    init(t1, (short)11161);

    if (y3e) {
        for (py = 80; py > 1; --py) {
            s += s;
            wh = (((py * -6838) / (wh | 1)) - py);
            s *= x[py];
            yv >>>= x[py];
            wh -= (int)(-58781 * yv);
            s = ((x[py - 1]++) + (x[py] * wh));
            g5h = 1;
            do {
                for (drz = g5h; drz < 43; ++drz) {
                    ei[g5h][py - 1] += t1[g5h - 1];
                    wh += (int)(((g5h >> yv) + (--x[g5h])) + ((wh + wh) + aw));
                }
            } while (++g5h < 69);
        }
    } else {
        ei[(py >>> 1) % N][(s >>> 1) % N] ^= ((wh++) * (x[(nmj >>> 1) % N]++));
    }
    long meth_res = s + wh + py + yv + g5h + drz + aw + (y3e ? 1 : 0) + nmj + checkSum(x) + checkSum(ei) + checkSum(t1);
    w_check_sum += meth_res;
    return (int)meth_res;
}

public static void main(String[] o) {

    long tyg=5724356481266342010L;
    float d5l=-7.274F;
    int jrs=33926, o6c=-7837, nbf=21533, rle=16810, oi=45102, m8[]=new int[N];
    boolean gmi=false;
    double spz=24.145;
    byte zl=44, j4t[]=new byte[N];

    init(m8, -65078);
    init(j4t, (byte)-32);

    spz = 1;
    while (++spz < 82) {
        jrs = (int)((jrs + (--vlz)) + (d5l--));
        zl ^= (byte)(--tyg);
        tyg -= jrs;
        m8[(int)(spz - 1)] = jrs;
        vlz &= (short)((--jrs) + 34084);
        n9((byte)(62));
        j4t[(int)(spz)] = (byte)(jrs++);
        gmi = (gmi = (jrs != w(jrs, jrs)));
        jrs = (--vlz);
        jrs = ((-(m8[(int)(spz)]++)) + (jrs--));
    }
    for (o6c = 5; o6c < 86; o6c++) {
        for (nbf = 1; nbf < o6c; ++nbf) {
            tyg = -61593;
            m8[nbf - 1] = (int)(((nbf - jrs) + (54406 << (tyg | tyg))) + (--tyg));
            jrs -= ((-(zl + -38264)) * jrs);
            rle = 1;
            while (++rle < 68) {
                m8[rle] -= 39541;
            }
            jrs = 62232;
            jrs |= (++m8[o6c - 1]);
            for (oi = 3; oi < 49; ++oi) {
                tyg += tyg;
                m8[nbf - 1] >>= (jrs--);
                d5l = (jrs--);
                zl += (byte)oi;
            }
        }
    }

    System.out.println("spz jrs d5l = " + Double.doubleToLongBits(spz) + "," + jrs + "," + Float.floatToIntBits(d5l));
    System.out.println("zl tyg gmi = " + zl + "," + tyg + "," + (gmi ? 1 : 0));
    System.out.println("o6c nbf rle = " + o6c + "," + nbf + "," + rle);
    System.out.println("oi m8 j4t = " + oi + "," + checkSum(m8) + "," + checkSum(j4t));

    System.out.println("vlz a0c = " + vlz + "," + Double.doubleToLongBits(checkSum(a0c)));

    System.out.println("n9_check_sum: " + n9_check_sum);
    System.out.println("w_check_sum: " + w_check_sum);
}
}
