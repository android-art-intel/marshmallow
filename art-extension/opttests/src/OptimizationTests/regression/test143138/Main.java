/*
 * Copyright (C) 2015 Intel Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by Dalvik Fuzzer tool (3.1.001). Sat Oct  5 13:08:06 2013

package OptimizationTests.regression.test143138;

import OptimizationTests.regression.shared.*;

public class Main extends FuzzerUtils {

    public static final int N = 30;

    public static void main(String[] nzc) {

        boolean g = false;
        int xu2 = 57652, s = 7303, v9 = -52648, gwf = -8188, w6a = 31717, o0 = -35048, n = -60252, g5 = 56196, zf3 = -11979, q = 17274, lv = -45824, ywg = 5308, lq = 13182, k1s = -50185, go = -29954, cp[] = new int[N], xi[] = new int[N], o[][] = new int[N][N];
        short wp6 = -4726;
        double j0 = 65.161;
        byte b = 63;
        float opt = -112.918F, t6 = 115.30F;
        long l0 = 6212053220233553247L, tss = -8690330483018280417L, he = 5966810190171986991L, lj = -7187033084864477693L, gu[] = new long[N];

        init(gu, 1862069547019940682L);
        init(cp, 17284);
        init(xi, 5078);
        init(o, -62363);

        xu2 = 18;
        while (--xu2 > 0) {
            g = ((--l0) <= 53789);
            s *= xu2;
            gu[(v9 >>> 1) % N] *= (((gwf % ((xu2 >>> 1) + 1)) + (w6a++)) - (++o0));
            // Test integer division optimization
            try {
                s = (n % -59);
                v9 = (xu2 % w6a);
                v9 = (xu2 / gwf);
            } catch (ArithmeticException a_e) {
            }
            switch ((((g5 <<= o0) >>> 1) % 1) + 12) {
            case 12:
                for (int pc : cp) {
                    opt *= (((pc * pc) / (((-12515 >> (long) (opt * zf3)) >>> 1) + 1)) - ((g5 >> w6a) / ((xu2 >>> 1) + 1)));
                    for (q = 1; q < 27; ++q) {
                        b -= (byte) (-((xi[q - 1] = lv) * (ywg * lq)));
                        t6 %= (((-l0) >>> 1) + 1);
                    }
                    tss >>= (long) ((-o[(gwf >>> 1) % N][(ywg >>> 1) % N]) - (j0++));
                    xi[(k1s >>> 1) % N] = (int) ((wp6 - (-1725 - (zf3 >> zf3))) + he);
                    lj *= ((~(-(gwf + s))) * (go - he));
                }
                s /= (((~s) >>> 1) + 1);
            default:
                zf3 += (int) t6;
            }
        }

        System.out.println("boolean: " + g);
        System.out.println("int: " + xu2 + "," + s + "," + v9 + "," + gwf + ","
                + w6a + "," + o0 + "," + n + "," + g5 + "," + zf3 + "," + q
                + "," + lv + "," + ywg + "," + lq + "," + k1s + "," + go + ","
                + checkSum(cp) + "," + checkSum(xi) + "," + checkSum(o));
        System.out.println("short: " + wp6);
        System.out.println("double: " + j0);
        System.out.println("byte: " + b);
        System.out.println("float: " + opt + "," + t6);
        System.out.println("long: " + l0 + "," + tss + "," + he + "," + lj
                + "," + checkSum(gu));

    }
}
