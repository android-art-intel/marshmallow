/*
 * Copyright (C) 2015 Intel Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by Android Runtime Fuzzer tool (3.5.002). Sat Aug 22 00:22:02 2015
// srand = 321252508465669517656215959941567838232

package OptimizationTests.regression.test2537;

import OptimizationTests.regression.shared.*;

public class Main extends FuzzerUtils {

    public static final int N = 100;

    public static double dArrFld[]=new double[N];

    static {
        init(dArrFld, 35.45491);
    }

    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;

public static int iMeth() {

    int i1=214, i2=190, i3=52, i4=-7, i5=249;
    long l1=-3483574979L, l2=42768L;
    short s=-4495, sArr[]=new short[N];
    float f1=0.112F;
    double d=-2.46094;
    boolean b=true, bArr[]=new boolean[N];

    init(sArr, (short)2569);
    init(bArr, true);

    for (i1 = 87; i1 > 5; i1 -= 3) {
        i2 = (int)(i2 + (i1 * l1));
        s = (short)(((4805052211624159434L + (i2 - i1)) * (-(--i2))) * (i2++));
        s += (short)i1;
        i2 += (i1 | i1);
        f1 += i1;
        l1 += ((long)(15993 - (d * l1)) & (long)((i3 + i4) + (d + i1)));
        f1 += f1;
        b = true;
        i5 += (-sArr[i1 + 1]);
        i3 |= (int)((--l1) - (l1 * (l2--)));
    }
    bArr[(i3 >>> 1) % N] = b;
    long meth_res = i1 + i2 + l1 + s + Float.floatToIntBits(f1) + Double.doubleToLongBits(d) + i3 + i4 + (b ? 1 : 0) +
        i5 + l2 + checkSum(sArr) + checkSum(bArr);
    iMeth_check_sum += meth_res;
    return (int)meth_res;
}

public static int iMeth1() {

    long l4=4171417256708915089L;
    short s2=24045;
    boolean b2=false;
    int i12=-28, i13=-2, i14=-142, i15=-11990, iArr1[]=new int[N];
    float f3=0.88F;

    init(iArr1, -94);

    for (double d2 : dArrFld) {
        l4 -= 99605429L;
        s2 = (short)d2;
        if (b2) continue;
        iArr1[(i12 >>> 1) % N] = (int)l4;
        i12 <<= i12;
        i13 = (int)(((-2.924F * (i13++)) + (f3 + 317875077L)) + (--iArr1[(i12 >>> 1) % N]));
    }
    for (i14 = 5; i14 < 95; ++i14) {
        for (i15 = 1; i15 < 6; i15++) {
            l4 <<= (-((i12--) - (i12--)));
            i13 += -225;
            i12 += i15;
        }
    }
    long meth_res = l4 + s2 + (b2 ? 1 : 0) + i12 + i13 + Float.floatToIntBits(f3) + i14 + i15 + checkSum(iArr1);
    iMeth1_check_sum += meth_res;
    return (int)meth_res;
}

public static void main(String[] strArr) {

    float f=0.257F, f2=1.949F;
    int i=23549, i6=61030, i7=12747, i8=-10, i9=-141, i10=-4635, i11=-29292, iArr[]=new int[N];
    long l=15701L, l3=-11L, lArr[]=new long[N];
    double d1=-2.102569;
    short s1=18161;
    boolean b1=false, bArr1[]=new boolean[N];
    byte by=88;

    init(lArr, 9L);
    init(iArr, -107);
    init(bArr1, false);

    for (f = 4; f < 80; f++) {
        i = (int)(l++);
        i = ((i--) * iMeth());
        d1 += ((--i) + ((-(38 - lArr[(int)(f - 1)])) + iArr[(int)(f)]));
        l = i;
    }
    for (i6 = 3; i6 < 91; ++i6) {
        i7 = 57;
        while ((i7 -= 3) > 0) {
            i8 = 1;
            while (++i8 < 62) {
                i += (int)d1;
                lArr[i7] = (i--);
                i -= (((i - i) + (s1 - i6)) * -4);
                i = i8;
            }
            i *= (int)(((l - -1) - (i7 - l)) + (d1 + (i--)));
            lArr[i6 - 1] = (long)(((i + f) * l) - ((i7 + i6) - i6));
            i += i7;
            i += (int)(++f2);
            b1 = (((bArr1[i6 + 1] = b1) && (i8 == 224)) && (i9 < (l + i8)));
        }
    }
    i10 = 1;
    while (++i10 < 96) {
        i9 -= i7;
        for (i11 = i10; i11 > 1; i11 -= 3) {
            l += (((i11 * l) + i11) - f2);
            i9 = (int)Math.sqrt(l + i);
            by += (byte)i11;
            i9 <<= (int)((l - i9) - (l - i));
        }
        i9 <<= (int)((l3 * (23719 - iMeth1())) - ((i11 + d1) + (i9 * 9)));
    }

    System.out.println("f i l = " + Float.floatToIntBits(f) + "," + i + "," + l);
    System.out.println("d1 i6 i7 = " + Double.doubleToLongBits(d1) + "," + i6 + "," + i7);
    System.out.println("i8 s1 f2 = " + i8 + "," + s1 + "," + Float.floatToIntBits(f2));
    System.out.println("b1 i9 i10 = " + (b1 ? 1 : 0) + "," + i9 + "," + i10);
    System.out.println("i11 by l3 = " + i11 + "," + by + "," + l3);
    System.out.println("lArr iArr bArr1 = " + checkSum(lArr) + "," + checkSum(iArr) + "," + checkSum(bArr1));

    System.out.println("dArrFld = " + Double.doubleToLongBits(checkSum(dArrFld)));

    System.out.println("iMeth_check_sum: " + iMeth_check_sum);
    System.out.println("iMeth1_check_sum: " + iMeth1_check_sum);
}
}
