/*
 * Copyright (C) 2015 Intel Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by Dalvik Fuzzer tool (3.5.001). Tue Apr  7 14:36:46 2015
package OptimizationTests.regression.test1192;

import OptimizationTests.regression.shared.*;

public class Main extends FuzzerUtils {

    public static final int N = 100;


public static void main(String[] strArr) {

    double d=1.118063;
    boolean b=false;
    byte by=-87;
    short s=-15378;
    float f=1.972F;
    long l=-2L, lArr[]=new long[N];
    int i=-103, i1=0, i2=6, iArr[]=new int[N], iArr1[]=new int[N], iArr2[]=new int[N];

    init(iArr, 2);
    init(lArr, 3L);
    init(iArr1, -63734);
    init(iArr2, -49981);

    for (i = 2; i < 76; ++i) {
        i1 = (int)(++l);
        i1 += (int)(((i1 + f) + iArr[i - 1]) % ((long)((s * -86.126148) * (by - i1)) | 1));
        i1 += i;
        for (d = 1; d < 13; ++d) {
            for (i2 = 3; i2 < 68; ++i2) {
                i1 = (((++i1) * -227) - (-(i2 + i1)));
                lArr[(int)(d)] += (long)(--f);
                iArr1[i] += (int)f;
                i1 = (int)(l = (-(i2 + i)));
                b = (!(!b));
                b = (((i + f) + (i * i)) < ((i1 - i) + f));
                iArr1[(-29330 >>> 1) % N] -= Short.reverseBytes((short)(s++));
            }
            f += (float)(d * i2);
        }
        i1 = (i1 + iArr1[i]);
        iArr[i - 1] *= (iArr2[i]--);
        lArr[i - 1] = (i1 = (-iArr1[i]));
        i1 *= i2;
        i1 = (int)(++l);
        i1 = i1;
    }

    System.out.println("i i1 l = " + i + "," + i1 + "," + l);
    System.out.println("f s by = " + Float.floatToIntBits(f) + "," + s + "," + by);
    System.out.println("d i2 b = " + Double.doubleToLongBits(d) + "," + i2 + "," + (b ? 1 : 0));
    System.out.println("iArr lArr iArr1 = " + checkSum(iArr) + "," + checkSum(lArr) + "," + checkSum(iArr1));
    System.out.println("iArr2 = " + checkSum(iArr2));

}
}
