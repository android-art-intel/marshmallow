/*
 * Copyright (C) 2015 Intel Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by Dalvik Fuzzer tool (3.5.001). Fri May  8 08:30:39 2015
package OptimizationTests.regression.test1224;
                                 
import OptimizationTests.regression.shared.*;

public class Main extends FuzzerUtils {

    public static final int N = 100;


    public static long lMeth_check_sum = 0;

public static long lMeth(int i5, int i6, int i7) {

    boolean b1=true;
    int i9=-110, i10=177, iArr1[]=new int[N];
    float f1=-1.6F;
    byte by1=41;
    long l1=3419187030L;

    init(iArr1, 52807);

    for (int i8 : iArr1) {
        l1 >>= (i6 - i7);
        i5 = (int)(l1++);
        for (i9 = 3; i9 < 83; ++i9) {
            i6 += (iArr1[i9]--);
            l1 -= (long)((-i5) + ((36595 + f1) - i8));
            for (i10 = 2; i10 < 41; ++i10) {
                if (b1 = (b1 = true)) {
                    i5 -= (++i6);
                    f1 = i8;
                    f1 *= (-(f1 - f1));
                }
                iArr1[i10] = (i8 |= (by1--));
            }
        }
    }
    long meth_res = i5 + i6 + i7 + l1 + i9 + Float.floatToIntBits(f1) + i10 + (b1 ? 1 : 0) + by1 + checkSum(iArr1);
    lMeth_check_sum += meth_res;
    return (long)meth_res;
}

public static void main(String[] strArr) {

    boolean b=false, bArr[]=new boolean[N];
    int i=-14189, i1=-4, i2=-38587, i3=3, i4=8580, iArr[][]=new int[N][N];
    float f=1.218F;
    double d=68.53957, dArr[]=new double[N];
    long l=6656699090691864435L, lArr[]=new long[N];
    byte by=-9;
    short s=30153;

    init(bArr, true);
    init(lArr, 2558964494L);
    init(dArr, 93.128327);
    init(iArr, -5);

    for (i = 6; i < 96; i++) {
        for (i1 = i; i1 < 41; i1 += 3) {
            b = bArr[i1 + 1];
            for (i2 = 5; i2 < 96; i2++) {
                i3 <<= (int)(((s * i) + (2.59181 - (i3 + i))) - (-3 % ((--by) | 1)));
                i3 -= i3;
                b = (b = (lArr[i1] <= (--i3)));
                switch (((i1 % 1) * 5) + 100) {
                case 102:
                    i3 += i2;
                    i3 >>>= (i2 + (--i3));
                    f += (++i3);
                    break;
                default:
                    i3 = (int)(dArr[i2 + 1] - f);
                    i3 += i2;
                    i3 = (int)Math.max((i2 | l) - (i3 += s), -i3);
                }
                l += (((i2 * i1) + i2) - f);
                l -= (i2 * ((179 | (long)(i3 - f)) + (i3--)));
                f = ((++i3) + ((l++) - (-(i3 + i))));
                s *= (short)((i3 -= (int)l) + (14862L + (s + i)));
                d += d;
            }
        }
        i4 = (int)(d + ((iArr[i - 1][i]++) * i3));
        by <<= (byte)lMeth((int)((l * l) + (-3L + (-1404773661643906146L - (-2620302949L - (f + i1))))), (int)((d -
            233) * (-42.45848 + (-161L * Float.intBitsToFloat(i4)))), (s + i2) - Integer.reverseBytes(i4));
        lArr[i] -= (--iArr[i][i + 1]);
        i3 >>>= (int)(((l--) + (l + s)) - (~(--iArr[i][i + 1])));
        s += (short)(++i4);
        l = i3;
    }

    System.out.println("i i1 b = " + i + "," + i1 + "," + (b ? 1 : 0));
    System.out.println("i2 i3 s = " + i2 + "," + i3 + "," + s);
    System.out.println("by f l = " + by + "," + Float.floatToIntBits(f) + "," + l);
    System.out.println("d i4 bArr = " + Double.doubleToLongBits(d) + "," + i4 + "," + checkSum(bArr));
    System.out.println("lArr dArr iArr = " + checkSum(lArr) + "," + Double.doubleToLongBits(checkSum(dArr)) + "," +
        checkSum(iArr));


    System.out.println("lMeth_check_sum: " + lMeth_check_sum);
}
}
