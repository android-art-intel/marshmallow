/*
 * Copyright (C) 2015 Intel Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by Dalvik Fuzzer tool (3.5.001). Sat Jan 10 01:00:10 2015
package OptimizationTests.regression.test1133;

import OptimizationTests.regression.shared.*;

public class Main extends FuzzerUtils {

    public static final int N = 100;


public static void main(String[] strArr) {

    short s=-31475;
    int i=4, i1=6, i2=94, i3=2, iArr[]=new int[N];
    double d=-2.82499;
    boolean b=false, bArr[]=new boolean[N];
    long l=-10L, lArr[]=new long[N];
    float f=-2.644F, f1=8.261F, fArr[]=new float[N];
    byte by=40;

    init(bArr, false);
    init(fArr, 33.219F);
    init(iArr, -13);
    init(lArr, 3580115900L);

    for (i = 5; i < 94; ++i) {
        i1 = (i1++);
        i1 += (int)(((++i1) - (f - 49384)) * (-45 - (-51 - i1)));
        b = (b = (bArr[i] | (b || b)));
        i1 += i;
        for (i2 = i; i2 < i; ++i2) {
            i1 += ((i1++) - (i1--));
            l = (--i1);
            fArr[i2 - 1] -= (float)(f *= (float)((d - by) - (-1 + (38705L + (by * i1)))));
            i1 += i2;
            i1 += (int)fArr[i - 1];
        }
        s *= (short)(i1++);
        d *= (((l + i2) + (by++)) + -5L);
        i1 = (++i1);
        i1 -= (12775 / (((iArr[i + 1]--) + (i1--)) | 1));
        for (f1 = 4; f1 < 66; ++f1) {
            i1 <<= (int)((iArr[(int)(f1 + 1)]--) + l);
            l = lArr[i];
            i1 = (int)Double.doubleToRawLongBits(--d);
            i1 = i;
            f *= -5;
            for (i3 = 97; i3 > 5; --i3) {
                iArr[i] = (int)(((i + l) + i2) - ((i1 - 62315) - (by++)));
                i1 = (int)(((long)(i - f1) ^ (i2 * i3)) * (i1--));
                i1 += (i3 * i3);
            }
        }
    }

    System.out.println("i i1 f = " + i + "," + i1 + "," + Float.floatToIntBits(f));
    System.out.println("b i2 l = " + (b ? 1 : 0) + "," + i2 + "," + l);
    System.out.println("d by s = " + Double.doubleToLongBits(d) + "," + by + "," + s);
    System.out.println("f1 i3 bArr = " + Float.floatToIntBits(f1) + "," + i3 + "," + checkSum(bArr));
    System.out.println("fArr iArr lArr = " + Double.doubleToLongBits(checkSum(fArr)) + "," + checkSum(iArr) + "," +
        checkSum(lArr));

}
}
