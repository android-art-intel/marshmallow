/*
 * Copyright (C) 2015 Intel Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by Dalvik Fuzzer tool (3.5.001). Wed Feb 18 01:27:14 2015
package OptimizationTests.regression.test1535;

import OptimizationTests.regression.shared.*;

public class Main extends FuzzerUtils {

    public static final int N = 100;


public static void main(String[] strArr) {

    double d=1.96567;
    float f=-81.698F, f1=2.741F;
    byte by=23;
    short s=-30955;
    long l=-226L, l1=-41676L, l2=-13L, lArr[]=new long[N];
    int i=-63243, i1=47, i2=-13, i3=-14522, i4=13, i5=-17708, iArr[][]=new int[N][N];

    init(iArr, -13);
    init(lArr, -48345L);

    for (i = 5; i < 93; i++) {
        for (i1 = 1; i1 < 10; ++i1) {
            i2 = (int)((i2--) - ((l--) + (++f)));
            l = (s++);
            d = i;
            f = (f + iArr[i + 1][i1 - 1]);
            i2 %= (int)((i2 -= (int)((i2++) * (l - l))) | 1);
            for (i3 = 1; i3 < i1; ++i3) {
                i2 += (i3 - i2);
                i2 = (int)(l1 - (f--));
                by <<= (byte)(((--i2) + l) - iArr[i1 + 1][i3 + 1]);
                l = (long)((-191 * (--iArr[i3][i3])) - ((i - i2) - d));
            }
            for (i4 = 3; i4 < 70; i4++) {
                l1 >>= (long)(((l - i1) - Math.abs(f)) + i4);
                i2 = (int)(l2++);
                lArr[i + 1] -= (++i2);
            }
            s = (short)f;
            f -= i3;
            for (i5 = 1; i5 < 2; ++i5) {
                l1 += (i5 | i5);
                i2 -= (int)((by = (byte)(f1 - 40)) * ((l2++) - (++l1)));
                i2 *= (int)Math.abs(d);
            }
        }
        iArr[i + 1][i] = i1;
        l2 = (long)(((--lArr[i - 1]) * (-1.941F + i5)) * (f + (i2 + i2)));
        f1 += i;
    }

    System.out.println("i i1 i2 = " + i + "," + i1 + "," + i2);
    System.out.println("l f s = " + l + "," + Float.floatToIntBits(f) + "," + s);
    System.out.println("d i3 l1 = " + Double.doubleToLongBits(d) + "," + i3 + "," + l1);
    System.out.println("by i4 l2 = " + by + "," + i4 + "," + l2);
    System.out.println("i5 f1 iArr = " + i5 + "," + Float.floatToIntBits(f1) + "," + checkSum(iArr));
    System.out.println("lArr = " + checkSum(lArr));

}
}
