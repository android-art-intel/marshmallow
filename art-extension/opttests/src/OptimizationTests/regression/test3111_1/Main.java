/*
 * Copyright (C) 2015 Intel Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by Android Runtime Fuzzer tool (4.1.002). Mon Jan 18 11:33:20 2016
// srand = 112500015886452654215287228933867089484

package OptimizationTests.regression.test3111_1;

import OptimizationTests.regression.shared.*;

public class Main extends FuzzerUtils {

    public static final int N = 100;

    public static long instanceCount=-143L;

public static void main(String[] strArr) {

    int i=-148, i1=-5, i2=0, i3=52, i4=48, i5=-58532, i7=-24, iArr[]=new int[N];
    byte by=126;
    float f=-51.682F;
    double d=2.93583;
    short s=-6015;

    init(iArr, 49);

    for (i = 4; i < 83; i++) {
        by -= (byte)(i1++);
    }
    for (i2 = 3; i2 < 97; i2++) {
        Main.instanceCount = (i1 * ((125 + (iArr[i2]++)) / 106));
        iArr[i2] = (i + (i * iArr[i2 + 1]));
    }
    for (i3 = 97; i3 > 5; --i3) {
        f = i1;
        for (i4 = 1; i4 < i3; i4++) {
            Main.instanceCount = ((Main.instanceCount + i1) * ((++Main.instanceCount) - i1));
            i1 *= (int)(((-47075 - d) - (i2 + f)) - (iArr[i3 - 1] += (i4 * 173)));
        }
        i5 = 1;
        do {
            i1 = (int)Main.instanceCount;
            i1 += -123;
            i1 = by;
            i1 = -226;
            iArr[i3 + 1] = (int)-8339495502787137827L;
            iArr[i5 - 1] = ((++i1) + ((-111 * (i1++)) * (-i5)));
            Main.instanceCount = (((by + i2) - -5) | (++i1));
        } while (++i5 < i3);
        for (int i6 : iArr) {
            i7 = 1;
            while (++i7 < 78) {
                i6 = (int)((s * (Main.instanceCount = 53771)) - f);
                i6 *= (-(--i6));
                i1 -= (int)Main.instanceCount;
                iArr[i3 + 1] += i1;
                f -= (i6--);
            }
        }
    }

    System.out.println("i by i1 = " + i + "," + by + "," + i1);
    System.out.println("i2 i3 f = " + i2 + "," + i3 + "," + Float.floatToIntBits(f));
    System.out.println("i4 d i5 = " + i4 + "," + Double.doubleToLongBits(d) + "," + i5);
    System.out.println("i7 s iArr = " + i7 + "," + s + "," + checkSum(iArr));

    System.out.println("Main.instanceCount = " + Main.instanceCount);
}
}
