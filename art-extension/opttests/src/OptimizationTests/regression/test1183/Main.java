/*
 * Copyright (C) 2015 Intel Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by Dalvik Fuzzer tool (3.5.001). Tue Apr  7 15:10:22 2015
package OptimizationTests.regression.test1183;

import OptimizationTests.regression.shared.*;

public class Main extends FuzzerUtils {

    public static final int N = 100;

    public static int iFld=214;
    public static boolean bFld=false;

public static void main(String[] strArr) {

    float f=2.661F, f1=15.95F, fArr[]=new float[N];
    byte by=50;
    long l=9L, lArr[]=new long[N];
    int i1=4, i2=-6, i3=185, i4=5201, i5=10, i6=207, iArr[]=new int[N];
    boolean b=true;
    short s=19150, sArr[]=new short[N];
    double d=-64.44427, d1=0.51788, dArr[]=new double[N];

    init(iArr, 141);
    init(sArr, (short)27780);
    init(fArr, -2.926F);
    init(dArr, -1.60607);
    init(lArr, -1763299654948928127L);

    for (int i : iArr) {
        i = (++i);
    }
    iFld = 1;
    do {
        i1 = (((iFld + i1) >> (i1 + i2)) + i3);
        for (i4 = 2; i4 < 38; i4++) {
            for (i5 = iFld; i5 < 25; i5++) {
                bFld = (((l - i2) + (d + 20761)) <= (d -= (i2++)));
                i3 *= iFld;
                sArr[i4] ^= (short)(l % (((iFld - i2) * (i3++)) | 1));
                if (d < iArr[i5]) break;
                l = (-i5);
                i1 = (int)(((i1 - i3) - (i3 + d)) / 21688L);
            }
            for (i6 = 20; i6 > 1; i6 -= 3) {
                iArr[i4 + 1] = (int)((++fArr[i6 + 1]) + (dArr[i4 - 1]--));
                by -= (byte)((dArr[iFld]--) + (i2++));
            }
            iArr[i4 - 1] = (int)((i1++) * (-(l - 23)));
            i3 *= i6;
            l = s;
            f = (i2 + ((l - l) - (++l)));
            if (bFld = (bFld != b)) break;
            iArr[i4 + 1] = (int)(((d1 - -13) + Math.max(i6, i2)) + ((l - iFld) - (i1 - 16215)));
            f += i4;
        }
    } while (++iFld < 78);
    f1 = 1;
    do {
        f *= ((iFld + (i3 * i2)) - (i6 + (f - l)));
        i3 -= (int)lArr[(int)(f1)];
    } while (++f1 < 81);

    System.out.println("i1 i2 i3 = " + i1 + "," + i2 + "," + i3);
    System.out.println("i4 i5 l = " + i4 + "," + i5 + "," + l);
    System.out.println("d i6 by = " + Double.doubleToLongBits(d) + "," + i6 + "," + by);
    System.out.println("s f b = " + s + "," + Float.floatToIntBits(f) + "," + (b ? 1 : 0));
    System.out.println("d1 f1 iArr = " + Double.doubleToLongBits(d1) + "," + Float.floatToIntBits(f1) + "," +
        checkSum(iArr));
    System.out.println("sArr fArr dArr = " + checkSum(sArr) + "," + Double.doubleToLongBits(checkSum(fArr)) + "," +
        Double.doubleToLongBits(checkSum(dArr)));
    System.out.println("lArr = " + checkSum(lArr));

    System.out.println("iFld bFld = " + iFld + "," + (bFld ? 1 : 0));
}
}
