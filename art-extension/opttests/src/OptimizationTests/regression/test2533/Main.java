/*
 * Copyright (C) 2015 Intel Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by Android Runtime Fuzzer tool (3.5.002). Fri Aug 21 21:56:00 2015
// srand = 94582103155407361910435267988794818020

package OptimizationTests.regression.test2533;

import OptimizationTests.regression.shared.*;

public class Main extends FuzzerUtils {

    public static final int N = 100;

    public static int iFld=14, iFld1=-221, iFld2=-2;
    public static float fArrFld[]=new float[N];

    static {
        init(fArrFld, 0.952F);
    }

public static void main(String[] strArr) {

    int i=53917, i1=-1, i2=-169, i3=-58367, i4=-7, i5=44814, iArr[]=new int[N];
    float f=0.647F;
    double d=-22.117663, dArr[]=new double[N];
    long l=-2156136784L, l1=-2397594238L, lArr[][]=new long[N][N];
    short s=23964;
    boolean b=true;
    byte by=-119;

    init(iArr, 212);
    init(dArr, 0.48896);
    init(lArr, 31522L);

    if (b = (((by - l) <= i1) && ((-(--i3)) < i2))) {
        for (i = 1; i < 78; i++) {
            i1 = 1;
            do {
                i2 *= (int)((i2++) * -1.104803);
                f -= (float)(d--);
                l |= (i + (++l));
                i2 = (int)((i1 * (i2 + i1)) + ((-41863 + (i2 + f)) + iArr[i - 1]));
            } while (++i1 < 81);
            iFld = 1;
            while ((iFld += 3) < 20) {
                i2 -= (int)((-l) >> ((i2++) - (++l)));
                l = ((--i2) - i);
            }
            l = ((iArr[i] - (i3 + -13)) - ((-112 % ((i2++) | 1)) + (i3 - i1)));
        }
    } else if (i != i2) {
        for (i4 = 4; i4 < 81; ++i4) {
            l = (s = (short)(i3 ^= iFld));
            i3 += (int)(l++);
        }
    }
    for (iFld1 = 2; iFld1 < 80; iFld1++) {
        l = (long)(((95L - (l * i1)) - (1833 + (i3++))) * (dArr[iFld1 - 1]++));
        d += i3;
        for (iFld2 = 1; iFld2 < 74; iFld2++) {
            fArrFld[iFld1 - 1] -= (++iArr[iFld2 + 1]);
            l1 = (64022 - iFld1);
            i3 = (int)(-((l + -38226L) + (i - l1)));
            for (i5 = 2; i5 < 41; i5++) {
                if (true) continue;
                i2 *= (i2++);
                lArr[iFld1][iFld1 - 1] -= (i3++);
            }
        }
    }

    System.out.println("i i1 i2 = " + i + "," + i1 + "," + i2);
    System.out.println("f d l = " + Float.floatToIntBits(f) + "," + Double.doubleToLongBits(d) + "," + l);
    System.out.println("i3 i4 s = " + i3 + "," + i4 + "," + s);
    System.out.println("b by l1 = " + (b ? 1 : 0) + "," + by + "," + l1);
    System.out.println("i5 iArr dArr = " + i5 + "," + checkSum(iArr) + "," + Double.doubleToLongBits(checkSum(dArr)));
    System.out.println("lArr = " + checkSum(lArr));

    System.out.println("iFld iFld1 iFld2 = " + iFld + "," + iFld1 + "," + iFld2);
    System.out.println("fArrFld = " + Double.doubleToLongBits(checkSum(fArrFld)));
}
}
