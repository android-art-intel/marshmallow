/*
 * Copyright (C) 2015 Intel Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by Dalvik Fuzzer tool (3.1.005). Thu Jan 30 17:53:44 2014
package OptimizationTests.regression.test168513_1;

import OptimizationTests.regression.shared.*;

public class Main extends FuzzerUtils {

    public static final int N = 120;

    public static void main(String[] p3u) {

        byte kwa = 6, kew = 115, zk[] = new byte[N];
        long u = 4841505316085948409L, xi = 7164554605274608835L, wkn = 371643965057429249L, yuk = -7408741915951177415L, f[] = new long[N];
        int r4 = 14646, tq = -54205, z4 = 40924, qk = 25302, ko = 9624, oe = -49691, j = -33116, du = 39858, nqn = -24604, fmh = 57481, kp = -2236, e = -28081, cd = 35853, dv3 = 3929, t8 = -19765, gi = 26399, y[] = new int[N], slg[] = new int[N], i[][] = new int[N][N];
        float a4c = -93.579F, cj2[] = new float[N];
        short sn = 13434;
        double ae = 31.1008, pn = -26.117, w = 3.964;

        init(cj2, 72.948F);
        init(zk, (byte) 33);
        init(y, 37542);
        init(slg, -15505);
        init(f, -7280923198715592714L);
        init(i, 58664);

        for (r4 = 1; r4 < 33; r4 += 3) {
            cj2[r4 + 1] *= (((-(r4 * a4c)) / ((r4 * r4) | 1)) * (-(-47739 | (-5765 + (-(r4 - tq))))));
            for (z4 = 1; z4 < 72; ++z4) {
                zk[z4 - 1] -= (byte) tq;
                try {
                    a4c = -22898;
                    y[r4] = slg[z4 + 1];
                    ae = ((++y[z4]) * (z4 - (-112 * (qk * -23589))));
                    y[r4 - 1] &= (int) (((ko--) >> (-29302 << (oe - u))) - ((long) (ko - 12.816F) << (ko |= oe)));
                } catch (ArithmeticException c55) {
                    qk ^= qk;
                    qk += ((ko++) + ((sn & kwa) - (j % (tq | 1))));
                    du = (int) (20186 * (-(-(ae *= a4c))));
                    pn += (zk[r4 + 1] += (byte) nqn);
                } finally {
                    for (fmh = z4; fmh < r4; fmh++) {
                        oe /= (int) (((-(kp * oe)) & ((u - oe) << (long) (xi / 83.898F))) | 1);
                        e = (int) (du - (z4 * (wkn += kew)));
                    }
                    f[z4 + 1] -= (long) (-(kp + 77.101));
                    i[z4][r4 + 1] %= (int) ((long) ((a4c += (--yuk)) + (-e)) | 1);
                    w += (ko - ((-2370722205481909254L >> cd) - u));
                }
                try {
                    qk = (-229 / dv3);
                    j = (cd / t8);
                    gi = (j / 105);
                } catch (ArithmeticException a_e) {
                }
            }
        }

        System.out.println("r4 a4c tq = " + r4 + ","
                + Float.floatToIntBits(a4c) + "," + tq);
        System.out.println("z4 ae qk = " + z4 + ","
                + Double.doubleToLongBits(ae) + "," + qk);
        System.out.println("ko oe u = " + ko + "," + oe + "," + u);
        System.out.println("sn kwa j = " + sn + "," + kwa + "," + j);
        System.out.println("du pn nqn = " + du + ","
                + Double.doubleToLongBits(pn) + "," + nqn);
        System.out.println("fmh kp xi = " + fmh + "," + kp + "," + xi);
        System.out.println("e wkn kew = " + e + "," + wkn + "," + kew);
        System.out.println("yuk w cd = " + yuk + ","
                + Double.doubleToLongBits(w) + "," + cd);
        System.out.println("dv3 t8 gi = " + dv3 + "," + t8 + "," + gi);
        System.out.println("cj2 zk y = "
                + Double.doubleToLongBits(checkSum(cj2)) + "," + checkSum(zk)
                + "," + checkSum(y));
        System.out.println("slg f i = " + checkSum(slg) + "," + checkSum(f)
                + "," + checkSum(i));

    }
}
