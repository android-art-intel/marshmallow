/*
 * Copyright (C) 2015 Intel Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by Android Runtime Fuzzer tool (4.1.002). Fri Apr 22 09:47:20 2016
// srand = 44823014028117663942317612723798024286

package OptimizationTests.regression.test3931;

import OptimizationTests.regression.shared.*;

public class Main extends FuzzerUtils {

    public static final int N = 100;

    public static long instanceCount=-14L;
    public static int iFld=-22270;
    public static float fArrFld[]=new float[N];
    public static long lArrFld[]=new long[N];
    public static int iArrFld[]=new int[N];

    static {
        init(Main.fArrFld, -1.511F);
        init(Main.lArrFld, -3878050803816703469L);
        init(Main.iArrFld, 227);
    }

    public static long sMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;

public static short sMeth(boolean b, int i3, short s) {

    int i4=-59479, i5=-167, i6=212, iArr[][]=new int[N][N];
    float f1=-47.876F;
    double d1=-2.33471, d2=-2.9891;

    init(iArr, 99);

    for (i4 = 5; i4 < 90; ++i4) {
        i3 = (int)f1;
        switch ((i4 % 3) + 121) {
        case 121:
            i3 -= (int)((-Main.fArrFld[i4]) - (++Main.instanceCount));
            break;
        case 122:
            i3 = (int)(i4 * -62409L);
            break;
        case 123:
            Main.lArrFld[i4] -= (long)(d1 * (++i3));
            for (i5 = 1; i5 < 21; ++i5) {
                i3 >>= (int)((iArr[i4][i4]++) + (--Main.instanceCount));
                i3 = i4;
                for (d2 = 1; d2 < i4; ++d2) {
                    i3 <<= (int)(Main.instanceCount++);
                    i6 = (int)(((f1 * d1) * (Main.instanceCount + 30687)) + ((i3++) >> (i4 + 10)));
                }
            }
            break;
        }
    }
    long meth_res = (b ? 1 : 0) + i3 + s + i4 + Float.floatToIntBits(f1) + Double.doubleToLongBits(d1) + i5 +
        Double.doubleToLongBits(d2) + i6 + checkSum(iArr);
    sMeth_check_sum += meth_res;
    return (short)meth_res;
}

public static int iMeth() {

    int i7=200, i8=1;
    double d3=0.29711, dArr[]=new double[N];
    byte by=-112;

    init(dArr, 0.58936);

    i7 = 1;
    while (++i7 < 91) {
        float f2=1.776F;
        Main.instanceCount = (i7 - i7);
        Main.iFld -= (int)(((-14 - (f2 + i7)) - Math.abs(d3)) + i7);
        Main.iFld -= (int)((f2 += (9 * (Main.iFld - Main.instanceCount))) - Main.iFld);
        by >>= (byte)(Main.iFld * ((Main.fArrFld[i7] += Main.instanceCount) - (Main.iFld - f2)));
        for (i8 = 2; i8 < 58; ++i8) {
            Main.instanceCount -= (long)(++d3);
            Main.iFld += (int)(--f2);
            Main.instanceCount = (Main.iFld >>= i8);
            Main.iFld = (Main.iFld * -25499);
            Main.iArrFld[i8] = (int)((--Main.instanceCount) * ((++Main.instanceCount) - Main.instanceCount));
            dArr[i7] -= ((-i7) - ((-53 - (Main.iFld + Main.instanceCount)) - (++Main.iFld)));
        }
    }
    long meth_res = i7 + Double.doubleToLongBits(d3) + by + i8 + Double.doubleToLongBits(checkSum(dArr));
    iMeth_check_sum += meth_res;
    return (int)meth_res;
}

public static void main(String[] strArr) {

    int i=-243, i1=-5, i2=4, i9=-5, i10=-12026, i11=55636, i12=145, i13=49978;
    double d=-104.45301;
    float f=2.823F, fArr[]=new float[N];
    short s1=8855, sArr[]=new short[N];
    byte by1=75;
    long lArr[]=new long[N];

    init(fArr, 2.29F);
    init(lArr, -5316694728902550369L);
    init(sArr, (short)-7993);

    i = 1;
    while (++i < 83) {
        Main.instanceCount = (++Main.instanceCount);
        i1 -= (int)(Main.instanceCount++);
        fArr[i] = (i1--);
        d = ((lArr[i + 1] * (++Main.instanceCount)) - ((7 - (f + Main.instanceCount)) * f));
        Main.instanceCount -= (sArr[i]++);
        i1 = (((i1--) + i2) + sMeth(i1 != Main.instanceCount, iMeth(), s1));
    }
    i9 = 1;
    do {
        f += (((i * -142) * (Main.iFld + Main.instanceCount)) + Math.abs(i9 - by1));
        i2 -= (int)(((Main.instanceCount - f) * (s1 % -25)) * (--i1));
    } while (++i9 < 83);
    for (i10 = 80; i10 > 5; i10 -= 2) {
        for (i11 = 2; i11 < 32; i11++) {
            if ((i2 ^ ((i9 ^ Main.iFld) - (i >> i12))) != (((++Main.instanceCount) + (by1--)) + ((Main.instanceCount *=
                (long)f) + (--i12)))) continue;
            i12 = (int)(--Main.lArrFld[i10 - 1]);
            d += ((++Main.instanceCount) * i);
            lArr[i11] += (long)f;
        }
        Main.instanceCount += (20458 + (i10 * i10));
    }
    i13 = 90;
    while (--i13 > 0) {
        int i14=18881;
        d = (i12--);
        i2 = i;
        d = f;
        i2 = (int)(Math.max(Math.abs(i14), (int)(Main.instanceCount + i11)) - f);
    }
    if (((++Main.instanceCount) + lArr[(4 >>> 1) % N]) >= i11) {
        fArr[(-10 >>> 1) % N] += (i1--);
    } else {
        Main.instanceCount >>= Main.instanceCount;
    }

    System.out.println("i i1 d = " + i + "," + i1 + "," + Double.doubleToLongBits(d));
    System.out.println("f i2 s1 = " + Float.floatToIntBits(f) + "," + i2 + "," + s1);
    System.out.println("i9 by1 i10 = " + i9 + "," + by1 + "," + i10);
    System.out.println("i11 i12 i13 = " + i11 + "," + i12 + "," + i13);
    System.out.println("fArr lArr sArr = " + Double.doubleToLongBits(checkSum(fArr)) + "," + checkSum(lArr) + "," +
        checkSum(sArr));

    System.out.println("Main.instanceCount Main.iFld Main.fArrFld = " + Main.instanceCount + "," + Main.iFld + "," +
        Double.doubleToLongBits(checkSum(Main.fArrFld)));
    System.out.println("Main.lArrFld Main.iArrFld = " + checkSum(Main.lArrFld) + "," + checkSum(Main.iArrFld));

    System.out.println("sMeth_check_sum: " + sMeth_check_sum);
    System.out.println("iMeth_check_sum: " + iMeth_check_sum);
}
}

//DEBUG  Test ->  Test
//DEBUG  main ->  main Test
//DEBUG  sMeth ->  sMeth main Test
//DEBUG  iMeth ->  iMeth main Test
//DEBUG  Depth = 2
//DEBUG  Classes = 1
//DEBUG  static objects = {}
