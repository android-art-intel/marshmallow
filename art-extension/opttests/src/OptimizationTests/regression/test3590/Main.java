/*
 * Copyright (C) 2015 Intel Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by Android Runtime Fuzzer tool (4.1.002). Mon May 30 18:38:33 2016
// srand = 35363831352953665596358056940916157648

package OptimizationTests.regression.test3590;

import OptimizationTests.regression.shared.*;

public class Main extends FuzzerUtils {

    public static final int N = 100;

    public static long instanceCount=3586632858736875968L;
    public static float fArrFld[]=new float[N];
    public static int iArrFld[]=new int[N];
    public static long lArrFld[]=new long[N];

    static {
        init(Main.fArrFld, 57.313F);
        init(Main.iArrFld, 130);
        init(Main.lArrFld, 1598292692503154264L);
    }

    public static void main(String[] strArr) {

        int i=-5551, i1=14361, i2=68, i3=-2, i4=587, i5=-14, i6=-53813;
        float f=1.91F;
        short s=20345;
        double d=0.61739, dArr[]=new double[N];
        byte by=58;

        init(dArr, 0.121858);

        try {
            i = 1;
            do {
                Main.instanceCount -= i;
                i1 = 1;
                do {
                    Main.instanceCount = i;
                    Main.instanceCount <<= i1;
                    f = ((++s) + (i2++));
                    i2 -= (int)((88.94589 * i) * ((-(++i2)) - (-2 + (i - 25988))));
                    i2 -= (int)Main.fArrFld[i + 1];
                } while (++i1 < i);
                f += (Main.iArrFld[i - 1] ^ (i2 = (int)Main.instanceCount));
                s = (short)(++i2);
                i2 = (int)((24.419F * (i - i1)) - ((i1 * i2) + (i1 + i)));
                i3 = 1;
                do {
                    d = i1;
                    f = (float)((Main.instanceCount++) - (Main.instanceCount + (Main.instanceCount + d)));
                    Main.instanceCount += ((i3 * (i4 % (Main.instanceCount | 1))) * ((54828 - i4) << (long)(d - f)));
                    Main.lArrFld[i + 1] = (long)(-213 + dArr[i + 1]);
                    i4 = (((Main.iArrFld[i3]--) + (i1 * i1)) + ((--i4) - (i3 - by)));
                    i2 += (i3 + i1);
                } while (++i3 < 35);
                f += (-1.798F + ((--Main.instanceCount) + Main.iArrFld[i - 1]));
                f += ((i4 - Math.max(i3, i1)) * (-(i2 - i)));
                Main.instanceCount += (((-(++by)) - (--i2)) - ((i2 - i3) - (s - 227L)));
            } while (++i < 96);
            for (i5 = 3; i5 < 81; ++i5) {
                i4 += i3;
                i4 = (int)((--Main.fArrFld[i5]) - ((by - i) - (i6 + i3)));
            }
        }
        catch (NullPointerException exc) {
        }

        System.out.println("i i1 f = " + i + "," + i1 + "," + Float.floatToIntBits(f));
        System.out.println("s i2 i3 = " + s + "," + i2 + "," + i3);
        System.out.println("d i4 by = " + Double.doubleToLongBits(d) + "," + i4 + "," + by);
        System.out.println("i5 i6 dArr = " + i5 + "," + i6 + "," + Double.doubleToLongBits(checkSum(dArr)));

        System.out.println("Main.instanceCount Main.fArrFld Main.iArrFld = " + Main.instanceCount + "," +
            Double.doubleToLongBits(checkSum(Main.fArrFld)) + "," + checkSum(Main.iArrFld));
        System.out.println("Main.lArrFld = " + checkSum(Main.lArrFld));
    }
}

//DEBUG  Test ->  Test
//DEBUG  main ->  main Test
//DEBUG  Depth = 1
//DEBUG  Classes = 1
//DEBUG  static objects = {}
