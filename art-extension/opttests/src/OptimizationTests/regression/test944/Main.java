/*
 * Copyright (C) 2015 Intel Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by Dalvik Fuzzer tool (3.4.001). Thu Nov 27 00:18:11 2014
package OptimizationTests.regression.test944;

import OptimizationTests.regression.shared.*;

public class Main extends FuzzerUtils {

    public static final int N = 100;

    public static float f9x=-115.293F;

    public static long yi_check_sum = 0;

public static void yi() {

    short u5=-29040;
    int arj=-64329, yn=-14275, x=31674, qt[]=new int[N], oql[]=new int[N];
    double hx=-63.50, ja6=35.247;
    long u=-5078489659037646314L;
    byte g=87;
    boolean v1=true;

    init(qt, -62996);
    init(oql, -34865);

    for (arj = 83; arj > 3; arj--) {
        yn += (--yn);
        g -= (byte)((--u) - arj);
        f9x += ((qt[arj - 1]--) + (++g));
        f9x = qt[arj];
        yn += arj;
        oql[arj] -= (int)((-(arj + yn)) << -304132421705862008L);
        switch (((arj % 4) * 5) + 4) {
        case 18:
            yn -= (++oql[arj]);
            hx = 57;
            while (--hx > 0) {
                ja6 *= (((u5 - arj) + (qt[(int)(hx + 1)]--)) + (x + (u - arj)));
                if (v1 || (!(v1 && (v1 == v1)))) break;
            }
            break;
        case 24:
            u += arj;
            break;
        case 14:
            yn <<= (yn--);
            break;
        case 13:
            ja6 -= (x++);
        }
    }
    yi_check_sum += arj + yn + g + u + Double.doubleToLongBits(hx) + Double.doubleToLongBits(ja6) + u5 + x + (v1 ? 1 :
        0) + checkSum(qt) + checkSum(oql);
}

public static void main(String[] y) {

    short m=-26063;
    int ci=30882, mw=11322, p=-6918, yv2[]=new int[N];
    byte r=85;
    long n1=2083178231546816194L, k=1189697286686411773L, xi[]=new long[N];
    double myu=5.323, nti=-67.175;
    float vu=-98.858F, w0=71.498F, vx[]=new float[N];

    init(yv2, -2838);
    init(vx, -71.55F);
    init(xi, 4679293113213848606L);

    switch ((((yv2[(ci >>> 1) % N]++) >>> 1) % 1) + 85) {
    case 85:
        if (nti < (-(mw * -52975))) {
            for (vu = 3; vu < 92; vu++) {
                ci -= (int)myu;
                for (w0 = 1; w0 < 21; ++w0) {
                    f9x = (yv2[(int)(w0)]--);
                    vx[(int)(vu + 1)] -= ci;
                    for (mw = (int)vu; mw < 45; ++mw) {
                        ci += (mw | n1);
                        ci -= (int)(((--yv2[(int)(vu - 1)]) - (mw - ci)) - n1);
                        n1 |= (ci++);
                    }
                    f9x -= ((mw + (-7678 - (mw + -5766596335517035675L))) >> ((mw << r) * 4968381033585209922L));
                    ci *= mw;
                    myu -= (ci--);
                    ci += (int)(m * ((-4814559830231401699L + (ci--)) - (vu * 60775)));
                    n1 <<= (mw << ((ci - mw) - xi[(int)(vu)]));
                    ci = (yv2[(int)(vu + 1)]++);
                }
                ci += (int)vu;
                myu += ((--n1) % ((n1 += (--ci)) | 1));
            }
            for (int w7i : yv2) {
                nti += vu;
            }
            for (p = 88; p > 1; p -= 2) {
                yv2[p + 1] = (int)(-f9x);
                yv2[p - 1] *= (int)(ci & ((++ci) * (n1--)));
                yv2[p] = (int)(((ci -= ci) + (k++)) + ((ci = (int)k) + (-39986 + (3636 + (ci++)))));
            }
        } else {
            yi();
        }
    }

    System.out.println("ci vu myu = " + ci + "," + Float.floatToIntBits(vu) + "," + Double.doubleToLongBits(myu));
    System.out.println("w0 mw n1 = " + Float.floatToIntBits(w0) + "," + mw + "," + n1);
    System.out.println("r m nti = " + r + "," + m + "," + Double.doubleToLongBits(nti));
    System.out.println("p k yv2 = " + p + "," + k + "," + checkSum(yv2));
    System.out.println("vx xi = " + Double.doubleToLongBits(checkSum(vx)) + "," + checkSum(xi));

    System.out.println("f9x = " + Float.floatToIntBits(f9x));

    System.out.println("yi_check_sum: " + yi_check_sum);
}
}
