/*
 * Copyright (C) 2015 Intel Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by Dalvik Fuzzer tool (3.2.001). Sun Apr 27 04:11:31 2014
package OptimizationTests.regression.test190559;

import OptimizationTests.regression.shared.*;

public class Main extends FuzzerUtils {

public static final int N = 500;

    public static long t=5614596031939401983L;

public static void main(String[] e) {

    long rnw=6575188710609236163L, rn=-6698143319463083160L, c8[][]=new long[N][N];
    short yi2=-32238, n=28550;
    float xfm=-77.151F, sja[]=new float[N];
    int s=50463, i=-15452, ij3=-38133, q=47972, g=36589, ts7=39594, s21=-13660, cq=-62832, ne=-37847, id[]=new int[N];
    double bs=51.902;

    init(id, -41210);
    init(c8, 7427006074264067728L);
    init(sja, -101.890F);

    for (s = 489; s > 25; --s) {
        for (i = 8; i < 379; i++) {
            try {
                ij3 = (-199 / s);
                q = (133 / id[i]);
                q = (ij3 / 188);
            } catch (ArithmeticException a_e) {}
            rnw = ((-(8806935862758629744L + (8240 + (rnw--)))) + (rnw + g));
            rnw = (long)(((2575205046251103010L % ((long)(xfm - xfm) | 1)) + (rnw * ij3)) - rnw);
            bs = (55.435F + (yi2 * c8[(-45119 >>> 1) % N][i]));
        }
        n <<= (short)t;
    }
    for (ts7 = 16; ts7 < 446; ts7++) {
        for (s21 = 25; s21 < 412; ++s21) {
            q >>>= (cq = id[ts7]);
        }
        ij3 = 24723;
        g *= (int)sja[ts7 + 1];
        c8[ts7][ts7 - 1] |= (long)(((bs++) * g) - id[ts7]);
        ij3 >>= (int)(((ne * -63393) - (rnw * ne)) - cq);
    }
    rn -= (long)(id[(-43219 >>> 1) % N] + ((xfm * g) * (cq - q)));

    System.out.println("s i ij3 = " + s + "," + i + "," + ij3);
    System.out.println("q rnw g = " + q + "," + rnw + "," + g);
    System.out.println("xfm bs yi2 = " + Float.floatToIntBits(xfm) + "," + Double.doubleToLongBits(bs) + "," + yi2);
    System.out.println("n ts7 s21 = " + n + "," + ts7 + "," + s21);
    System.out.println("cq ne rn = " + cq + "," + ne + "," + rn);
    System.out.println("id c8 sja = " + checkSum(id) + "," + checkSum(c8) + "," +
        Double.doubleToLongBits(checkSum(sja)));
    
    System.out.println("t = " + t);
}
}
