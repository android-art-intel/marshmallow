/*
 * Copyright (C) 2015 Intel Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by Dalvik Fuzzer tool (2.1.003). Sun Jul 28 14:39:29 2013
package OptimizationTests.regression.test126535_2;

import OptimizationTests.regression.shared.*;

public class Main extends FuzzerUtils {

    public static final int N = 30;

    public static void main(String[] l) {

        int s8 = 30465, c = -6335, wf = -23420, v = -29616, he = -22451, yf = 4579, jrv = 19614, ltc[][] = new int[N][N], bje[][] = new int[N][N], g[] = new int[N], ras[] = new int[N], s[] = new int[N];
        long uiv = -5091763336284772090L, iq[] = new long[N], m9[][] = new long[N][N], pjn[] = new long[N];

        init(ltc, -60466);
        init(iq, 8409209643479134885L);
        init(m9, -3888675987348909813L);
        init(bje, -43079);
        init(g, -64678);
        init(pjn, -979579911172234458L);
        init(ras, -34577);
        init(s, -24938);

        int d = 11;
        do {

            for (s8 = 1; s8 < 22; ++s8) {
                int ti = 11;
                do {

                    // Test integer division optimization
                    try {
                        c = (int) (c / -323643489);
                        wf = (int) (-10609 / ltc[s8][s8 + 1]);
                        ltc[s8][s8 - 1] = (int) (756312448 % v);
                        iq[s8] = (long) (wf % uiv);
                        wf = (int) (162 / v);
                    } catch (ArithmeticException a_e) {
                    }

                } while (--ti > 0);

                int ls = 11;
                while (--ls > 0) {
                    c *= (int) (m9[s8][s8 - 1]);
                }

                bje[s8][s8 - 1] *= (int) ((g[s8]) + 32450);

                // Test Loop Vectorization
                for (he = 1; he < 6; he++) {
                    pjn[he - 1] = (long) (ras[s8 - 1]);
                    s[he] = (int) (16513);
                }

            }

            int m = 11;
            do {

                for (yf = 1; yf < 25; yf++) {
                    s[yf] -= (int) (jrv++);
                }

            } while (--m > 0);

        } while (--d > 0);

        System.out.println("int: " + s8 + "," + c + "," + wf + "," + v + ","
                + he + "," + yf + "," + jrv + "," + checkSum(ltc) + ","
                + checkSum(bje) + "," + checkSum(g) + "," + checkSum(ras) + ","
                + checkSum(s));
        System.out.println("long: " + uiv + "," + checkSum(iq) + ","
                + checkSum(m9) + "," + checkSum(pjn));

    }
}
