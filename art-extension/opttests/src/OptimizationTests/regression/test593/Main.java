/*
 * Copyright (C) 2015 Intel Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by Dalvik Fuzzer tool (3.4.001). Fri Sep  5 16:46:30 2014
package OptimizationTests.regression.test593;

import OptimizationTests.regression.shared.*;

public class Main extends FuzzerUtils {

    public static final int N = 100;

    public static int ja7[]=new int[N];
    public static float md=81.994F;

    static {
        init(ja7, -53152);
    }

public static void main(String[] fn) {

    boolean r43=true;
    int bgd=-5820, ekv=-47777, axt=-37930, o=28817;
    long c=-7569272045341232599L, wm[]=new long[N];
    byte m7v=121;
    short ww8=8708;

    init(wm, -1909082174844819670L);

    md = 92;
    while ((md -= 3) > 0) {
        bgd -= (--bgd);
        if (r43) {
            ekv = (int)(((bgd--) << bgd) << ((-c) + (wm[(int)(md)]++)));
            ekv -= 18171;
        }
        for (axt = 1; axt < md; ++axt) {
            wm[axt + 1] = (axt % (m7v | 1));
            o = 1;
            while (++o < 40) {
                switch ((o % 4) + 89) {
                case 89:
                    break;
                case 90:
                    c += o;
                    ja7[axt] >>= (++bgd);
                    bgd -= (bgd++);
                    break;
                case 91:
                    ekv += (int)(3960359412869775314L + (o * o));
                    m7v -= (byte)ekv;
                    bgd += (((o * bgd) + m7v) - c);
                    break;
                case 92:
                    bgd *= axt;
                    break;
                default:
                    bgd += (o * c);
                    try {
                        c *= (long)((ja7[(int)(md - 1)] + (ja7[(int)(md)]--)) + (md * ekv));
                        wm[axt - 1] = (ja7[o + 1] * ((c++) - ww8));
                        c |= bgd;
                        ja7[o] -= (int)(((axt * axt) - (c * o)) - ((c % -41661) - (axt >>> axt)));
                        bgd += ((bgd--) * (bgd++));
                    }
                    catch (ArithmeticException v) {
                        ja7[axt + 1] *= (++m7v);
                    }
                    ja7[o + 1] += (int)(c <<= ((bgd - o) >> bgd));
                }
            }
        }
    }

    System.out.println("bgd ekv c = " + bgd + "," + ekv + "," + c);
    System.out.println("r43 axt m7v = " + (r43 ? 1 : 0) + "," + axt + "," + m7v);
    System.out.println("o ww8 wm = " + o + "," + ww8 + "," + checkSum(wm));

    System.out.println("md ja7 = " + Float.floatToIntBits(md) + "," + checkSum(ja7));
}
}
