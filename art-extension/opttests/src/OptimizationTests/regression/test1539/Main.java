/*
 * Copyright (C) 2015 Intel Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by Dalvik Fuzzer tool (3.5.001). Wed Feb 18 03:18:46 2015
package OptimizationTests.regression.test1539;

import OptimizationTests.regression.shared.*;

public class Main extends FuzzerUtils {

    public static final int N = 100;

    public static int iFld=-17;
    public static long lFld=137L, lArrFld[]=new long[N];

    static {
        init(lArrFld, 46L);
    }

    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;

public static int iMeth(boolean b) {

    float f1=-45.582F;
    int i2=-60237, i3=7, i4=231, iArr[]=new int[N];
    long l1=-3515606352L;
    short sArr[]=new short[N];
    double d=2.109422;

    init(iArr, -54);
    init(sArr, (short)-11944);

    for (i2 = 1; i2 < 84; i2 += 3) {
        for (i3 = 1; i3 < i2; i3++) {
            iArr[i3 + 1] = (int)(((i4 = (int)l1) - (++sArr[i2])) * (i4++));
            if (b) break;
            switch ((i2 % 1) + 57) {
            case 57:
                i4 += (int)(lArrFld[i3 - 1] = l1);
            }
            l1 += (i4 - i4);
        }
        f1 = (((i3 + i4) - (i4 + i2)) * ((i4 + i4) % (i3 | 1)));
        l1 = i2;
        l1 = (long)(((f1 - l1) - (l1 ^ l1)) - f1);
        iArr[i2 - 1] *= (int)(-150 - (++d));
        i4 += (int)(((i4 = (int)f1) * (i2 % 25)) + i3);
    }
    long meth_res = (b ? 1 : 0) + i2 + i3 + i4 + l1 + Float.floatToIntBits(f1) + Double.doubleToLongBits(d) +
        checkSum(iArr) + checkSum(sArr);
    iMeth_check_sum += meth_res;
    return (int)meth_res;
}

public static int iMeth1(float f2, double d3, float f3) {

    float f4=126.390F;
    int i9=1, i10=-12, i11=11, iArr3[]=new int[N], iArr4[]=new int[N];

    init(iArr3, -13);
    init(iArr4, 61096);

    for (int i8 : iArr3) {
        d3 -= (((i8 - i8) - -54) - iArr4[(i8 >>> 1) % N]);
        i8 -= (int)((i8 = (i9++)) * (d3 * (i9 - i8)));
    }
    for (i10 = 1; i10 < 84; i10++) {
        i9 = 194;
        f3 = -4;
        try {
            i9 = (++i9);
        }
        catch (NullPointerException exc) {
            for (i11 = i10; i11 < 43; ++i11) {
                f4 += (((i11 * lFld) + f2) - f2);
            }
        }
        i9 += i10;
        i9 += -14;
    }
    long meth_res = Float.floatToIntBits(f2) + Double.doubleToLongBits(d3) + Float.floatToIntBits(f3) + i9 + i10 + i11
        + Float.floatToIntBits(f4) + checkSum(iArr3) + checkSum(iArr4);
    iMeth1_check_sum += meth_res;
    return (int)meth_res;
}

public static void main(String[] strArr) {

    float f=0.774F, fArr[]=new float[N];
    int i=63119, i1=-31897, i5=-13, i6=65127, i7=43913, i12=13, i13=57119, i14=12, i15=-238, i16=11, iArr1[]=new
        int[N], iArr2[]=new int[N], iArr5[]=new int[N];
    byte by=87;
    long l=1304425858086312243L, l2=46L, l3=-95L;
    short s=-14915, sArr1[][]=new short[N][N];
    double d1=-104.89969, d2=-7.89303, d4=2.25890, d5=-1.52797, d6=8.2360, dArr[]=new double[N];
    boolean b1=true, bArr[]=new boolean[N];

    init(iArr1, 26555);
    init(dArr, 0.18483);
    init(iArr2, -76);
    init(sArr1, (short)-3741);
    init(bArr, true);
    init(fArr, 0.628F);
    init(iArr5, 8);

    for (i = 2; i < 98; i += 2) {
        i1 -= (int)(++f);
        l = (i1 + ((-105 + (-2 - (i1 - l))) * iMeth(b1)));
        i1 = (--i1);
        i1 = (int)f;
        l = (long)(Integer.reverseBytes((int)(l - i)) - ((d1 - i) + (i5 * 17676)));
        for (d2 = 5; d2 < 88; ++d2) {
            iArr1[(int)(d2 + 1)] = (int)(-((l - f) * (i5 * l)));
        }
        l2 *= (long)dArr[i];
        i1 = (Integer.reverseBytes(i1) - (--iArr1[i - 1]));
    }
    for (i6 = 4; i6 < 94; ++i6) {
        switch (i6 + 6) {
        case 6:
            i1 *= (int)(((d1 - i) - (l * i1)) - i1);
            f = ((f++) + (~i));
            i1 += (i6 * i5);
            i5 = (int)(((i1--) - l2) * (--i5));
        case 7:
            i5 = (int)((d1++) - -6547652365521049930L);
            break;
        case 8:
            d1 += i6;
            break;
        case 9:
            l2 <<= (long)(((i5--) - (26 * (lArrFld[i6]++))) * ((l++) + (f--)));
            break;
        case 10:
            iArr1[i6] = (int)(i - f);
            l2 += (((i6 * l2) + f) - i1);
            i7 -= (int)f;
            iArr1[i6] += (int)(s * ((l2 *= i7) << (i1--)));
        case 11:
            i5 <<= (int)(-((2789148838465802982L + (--i7)) * 55));
            break;
        case 12:
            iArr2[i6] += (int)(lArrFld[i6 - 1] - i7);
            break;
        case 13:
            i7 = (int)(--l2);
            break;
        case 14:
            l2 += (i6 - i1);
            break;
        case 15:
            s -= (short)((by - 1) - (--d1));
        case 16:
            i7 *= (int)(sArr1[i6 - 1][i6] - (f + (l3--)));
            break;
        case 17:
            d1 -= ((--iArr1[i6]) + iMeth1(43.657F * l, 11 + (i1 + i6), f));
            break;
        case 18:
            i5 |= i5;
            break;
        case 19:
            l2 += (198 + (i6 * i6));
        case 20:
            i5 += (i6 - i5);
            break;
        case 21:
            f *= ((i1 <<= i1) - (f--));
            break;
        case 22:
            i7 += (i6 ^ by);
            break;
        case 23:
            d1 = iArr1[i6 - 1];
            break;
        case 24:
            i5 = (-i);
            break;
        case 25:
            i5 -= 254;
            break;
        case 26:
            f += (++i1);
        case 27:
            l += (long)f;
            break;
        case 28:
            i7 -= (--i7);
            break;
        case 29:
            sArr1[i6 + 1][i6 + 1] -= (short)(--i1);
            break;
        case 30:
            f = (i7 = s);
        case 31:
            i7 = ((i7++) << (i1--));
            break;
        case 32:
            l2 += i;
            break;
        case 33:
            lFld = (--lFld);
            break;
        case 34:
            i1 |= (int)(((i1 -= i1) * (i1 *= i5)) + ((f + by) * iArr2[i6 - 1]));
            break;
        case 35:
            iArr1[i6] -= (int)(-(i5 = (int)(lFld++)));
        case 36:
            i5 = i6;
            break;
        case 37:
            i5 += (int)(Math.sqrt(d1 + f) + (l3 <<= 57));
            break;
        case 38:
            d1 -= by;
            break;
        case 39:
            i5 -= (-((i5 + i) - (i + i)));
            break;
        case 40:
            dArr[i6] += ((i1 = (int)Math.abs(d2)) - ((by - f) + 93.7249));
        case 41:
            f *= (s += (short)(i7++));
            break;
        case 42:
            f -= i5;
            break;
        case 43:
            l2 -= (long)(f = i);
            break;
        case 44:
            sArr1[i6 - 1][i6 + 1] = (short)(--l2);
        case 45:
            f = ((iFld -= (int)(lFld * s)) * 5);
            break;
        case 46:
            iFld ^= (int)(iArr2[i6 + 1] + (lFld + Float.floatToRawIntBits(f)));
        case 47:
            i1 += (int)(iArr1[i6 - 1] = (int)(-(l3 *= iFld)));
        case 48:
            i5 += i5;
            break;
        case 49:
            i1 = (int)(((iFld + 2.549F) * (--iArr2[i6 - 1])) / (s | 1));
        case 50:
            d1 -= (i1 *= ((i + i) | (--i1)));
            break;
        case 51:
            lFld = Float.floatToRawIntBits((i12++) + (--i1));
            break;
        case 52:
            i13 <<= (int)((-32L - iArr1[i6 - 1]) - ((i12 + i) * (0 + (1893260129L + (iFld++)))));
            break;
        case 53:
            i13 <<= (++i5);
            break;
        case 54:
        case 55:
            iArr2[i6] = (int)(++lArrFld[i6]);
            break;
        case 56:
            iArr1[i6 - 1] = (--iFld);
        case 57:
            i14 -= (int)l3;
        case 58:
            f = (i5++);
        case 59:
            i12 += (int)((--iArr1[i6 - 1]) + (l2--));
            break;
        case 60:
            l -= s;
            break;
        case 61:
            i7 = (int)(i14 + ((f * i6) + (i15 + f)));
            break;
        case 62:
            i7 = (int)d4;
            break;
        case 63:
            s += (short)iArr1[i6 - 1];
        case 64:
            if (b1) break;
            break;
        case 65:
            if (!(b1 = (b1 = (bArr[i6 - 1] = b1)))) break;
        case 66:
            i14 = (int)(-4172L + (iArr1[i6 + 1]++));
            break;
        case 67:
            l2 >>= (long)(((i6 - d5) * i6) - (i7 - (1415243580627110803L * fArr[i6 + 1])));
            break;
        case 68:
            lFld = (long)((++iArr5[i6]) + d6);
            break;
        case 69:
            f += (((f = lFld) * (f + i12)) * (lFld++));
            break;
        case 70:
            i12 = (int)((++f) + (s++));
            break;
        case 71:
            d4 = l;
        case 72:
            l += (i1++);
            break;
        case 73:
            b1 = (b1 = ((i15 * l) != (i14 * 156)));
            break;
        case 74:
            i1 += i6;
            break;
        case 75:
            i16 += (int)(((i14 = 13105) * i13) + 12L);
            break;
        default:
            i15 += (i6 * i6);
        }
    }

    System.out.println("i i1 f = " + i + "," + i1 + "," + Float.floatToIntBits(f));
    System.out.println("l b1 d1 = " + l + "," + (b1 ? 1 : 0) + "," + Double.doubleToLongBits(d1));
    System.out.println("i5 d2 l2 = " + i5 + "," + Double.doubleToLongBits(d2) + "," + l2);
    System.out.println("i6 i7 s = " + i6 + "," + i7 + "," + s);
    System.out.println("by l3 i12 = " + by + "," + l3 + "," + i12);
    System.out.println("i13 i14 i15 = " + i13 + "," + i14 + "," + i15);
    System.out.println("d4 d5 d6 = " + Double.doubleToLongBits(d4) + "," + Double.doubleToLongBits(d5) + "," +
        Double.doubleToLongBits(d6));
    System.out.println("i16 iArr1 dArr = " + i16 + "," + checkSum(iArr1) + "," +
        Double.doubleToLongBits(checkSum(dArr)));
    System.out.println("iArr2 sArr1 bArr = " + checkSum(iArr2) + "," + checkSum(sArr1) + "," + checkSum(bArr));
    System.out.println("fArr iArr5 = " + Double.doubleToLongBits(checkSum(fArr)) + "," + checkSum(iArr5));

    System.out.println("lFld iFld lArrFld = " + lFld + "," + iFld + "," + checkSum(lArrFld));

    System.out.println("iMeth_check_sum: " + iMeth_check_sum);
    System.out.println("iMeth1_check_sum: " + iMeth1_check_sum);
}
}
