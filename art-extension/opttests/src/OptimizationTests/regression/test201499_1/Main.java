/*
 * Copyright (C) 2015 Intel Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by Dalvik Fuzzer tool (2.1.003). Fri Jun  6 11:31:37 2014
package OptimizationTests.regression.test201499_1;

import OptimizationTests.regression.shared.*;

public class Main extends FuzzerUtils {

public static final int N = 30;

public static long lgx_check_sum = 0;

public static void lgx(long y) {

    long f[][]=new long[N][N], yf[][]=new long[N][N];
    int ja5=65342, e=45377, sq=33311, i[]=new int[N], md[]=new int[N], r[]=new int[N];

    init(i, -37524);
    init(md, 35286);
    init(r, -18152);
    init(f, 3726169695151526297L);
    init(yf, -6210249638332362065L);

    for (ja5 = 1; ja5 < 4; ja5++) {
        i[ja5-1] = (int)(-i[ja5+1]);
        i[ja5-1] = (int)(38750);
    }

    for (e = 1; e < 26; e++) {
        md[e] = (int)(r[e]);
        sq = (int)(md[e]);
        int vq = 11;
        do {
            f[e][e-1] *= (long)(r[e+1]);
        } while ( --vq > 0 );
        sq = (int)(yf[e][e-1]);
    }
    lgx_check_sum += y + ja5 + e + sq + checkSum(i) + checkSum(md) + checkSum(r) + checkSum(f) + checkSum(yf);
}

public static void main(String[] mvj) {

    long r[]=new long[N], z[]=new long[N], y[]=new long[N], e[]=new long[N];
    char by[]=new char[N];
    int cx4=-56917, q2=-62048, ioz=-51726, n=47612, x7s=41899, y7m=37610, yg[]=new int[N], d[]=new int[N], j[][]=new
        int[N][N], ao[]=new int[N];

    init(yg, 43686);
    init(r, -4679659515503481290L);
    init(z, 3335920192553441229L);
    init(d, 22810);
    init(y, -5935750019389720785L);
    init(j, -62587);
    init(by, (char)28511);
    init(ao, 22209);
    init(e, -5973244529433528364L);

    int pzx = 11;
    while ( --pzx > 0 ) {
        for (cx4 = 27; cx4 > 1; --cx4) {
            yg[cx4-1] = (int)(r[cx4+1] - z[cx4]);
        }
        if (++q2 == d[25]) {
            if (q2 > 0) break;
            for (ioz = 1; ioz < 8; ++ioz) {
                r[ioz-1] -= (long)(yg[ioz] - yg[ioz-1]);
            }
        }
    }

    int u = 11;
    while ( --u > 0 ) {
        for (n = 1; n < 17; n += 3) {
            y[n+1] -= (long)(ioz);
            d[n] = (int)((j[n][n-1]) - 12230);
        }
        int eoj = 11;
        do {
            for (char o: by) {
                lgx((long)(z[13]));

                y7m = (int)(yg[5]);
            }
        } while ( --eoj > 0 );
    }

    System.out.println("long: " + checkSum(r) + "," + checkSum(z) + "," + checkSum(y) + "," + checkSum(e));
    System.out.println("char: " + (int)checkSum(by));
    System.out.println("int: " + cx4 + "," + q2 + "," + ioz + "," + n + "," + x7s + "," + y7m + "," + checkSum(yg) +
        "," + checkSum(d) + "," + checkSum(j) + "," + checkSum(ao));

    System.out.println("lgx_check_sum: " + lgx_check_sum);
}
}
