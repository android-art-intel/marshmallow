/*
 * Copyright (C) 2015 Intel Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by Dalvik Fuzzer tool (3.2.001). Sun Mar 16 02:37:08 2014
package OptimizationTests.regression.test179372;

import OptimizationTests.regression.shared.*;

public class Main extends FuzzerUtils {

    public static final int N = 500;

    public static int ri = -38270;
    public static double ot = -96.25;

    public static void main(String[] i3) {

        boolean rh[] = new boolean[N];
        int z3 = 32291, uit = 721, c8 = -2781, t = -3157, h2u = 29547, k = 16391, bw1 = -63016, sch = 40599, x = 61390, yi = 6362, m = 51070, cpj = 22285, hx1[] = new int[N], le6[] = new int[N], f[] = new int[N], e[] = new int[N], nva[][] = new int[N][N];
        byte og0 = -9;
        short zp = -8268;
        double i = -92.540, uk = -3.135, vq[] = new double[N];
        float ubv = 17.120F;
        long d8b = -3111785029120815651L, jid = -867629844227140344L, cmo[] = new long[N];

        init(cmo, 405123006138137164L);
        init(hx1, -9482);
        init(le6, -15664);
        init(f, 22508);
        init(e, 47009);
        init(rh, true);
        init(nva, -4816);
        init(vq, 126.603);

        for (z3 = 3; z3 < 383; z3 += 3) {
            d8b /= (((-(z3 + z3)) * ri) | 1);
            cmo[z3 + 1] -= 30408;
        }
        uit = 479;
        do {
            for (c8 = 22; c8 < 451; c8 += 2) {
                try {
                    i -= zp;
                    try {
                        hx1[c8 + 1] = (t / uit);
                        t = (le6[uit - 1] % le6[c8 + 1]);
                        ri = (-55091 / f[c8]);
                    } catch (ArithmeticException a_e) {
                    }
                } catch (NullPointerException l) {
                    ri *= (int) (((long) (ot + z3) >>> (d8b - h2u)) + ((k - jid) / (z3 | 1)));
                }
                if (((-(--e[c8 + 1])) < (ubv - (ri++))) == (rh[c8 + 1] = ((uit >>> uit) == (og0 -= (byte) bw1))))
                    continue;
                d8b = (uit + ((long) (-(ubv - k)) >> bw1));
            }
            sch -= (int) (d8b++);
            d8b *= nva[uit][uit];
            try {
                yi = (bw1 / x);
                m = (47560 / m);
                sch = (x % 203);
            } catch (ArithmeticException a_e) {
            }
        } while (--uit > 0);
        vq[(m >>> 1) % N] += ((-(h2u - ri)) + ((cpj++) * (-6466753666608590822L - (-(-(-(jid + uk)))))));

        System.out.println("z3 d8b uit = " + z3 + "," + d8b + "," + uit);
        System.out.println("c8 i zp = " + c8 + "," + Double.doubleToLongBits(i)
                + "," + zp);
        System.out.println("t h2u k = " + t + "," + h2u + "," + k);
        System.out.println("jid ubv og0 = " + jid + ","
                + Float.floatToIntBits(ubv) + "," + og0);
        System.out.println("bw1 sch x = " + bw1 + "," + sch + "," + x);
        System.out.println("yi m cpj = " + yi + "," + m + "," + cpj);
        System.out.println("uk cmo hx1 = " + Double.doubleToLongBits(uk) + ","
                + checkSum(cmo) + "," + checkSum(hx1));
        System.out.println("le6 f e = " + checkSum(le6) + "," + checkSum(f)
                + "," + checkSum(e));
        System.out.println("rh nva vq = " + checkSum(rh) + "," + checkSum(nva)
                + "," + Double.doubleToLongBits(checkSum(vq)));

        System.out.println("ri ot = " + ri + "," + Double.doubleToLongBits(ot));
    }
}
