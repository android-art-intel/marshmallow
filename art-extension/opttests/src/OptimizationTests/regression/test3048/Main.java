/*
 * Copyright (C) 2015 Intel Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by Android Runtime Fuzzer tool (4.1.001). Tue Dec 29 01:28:04 2015
// srand = 144359270742683981196476760881464260266

package OptimizationTests.regression.test3048;

import OptimizationTests.regression.shared.*;

public class Main extends FuzzerUtils {

    public static final int N = 100;

    public static long instanceCount=-7044175205898709974L;
    public static boolean bFld=true;
    public static byte byFld=-41;
    public static int iArrFld[]=new int[N];
    public static long lArrFld[]=new long[N];

    static {
        init(Main.iArrFld, 237);
        init(Main.lArrFld, 55090L);
    }

    public static long lMeth_check_sum = 0;

public static long lMeth(long l) {

    int i6=-41659, i7=8, i8=-57919, i9=225;
    float f1=0.526F;
    short s1=-15542;
    double d1=1.117700;

    for (i6 = 3; i6 < 90; i6++) {
        i7 <<= (int)(((i7 * Main.instanceCount) * (40.33465 + (i7++))) - ((Main.instanceCount - i7) * (49 - i7)));
        Main.lArrFld[i6] = (long)2.78077;
        i8 = 1;
        do {
            Main.iArrFld[i6 - 1] = (((i7 - i8) - (i7 + i8)) % (((++i7) + (--Main.iArrFld[i6 - 1])) | 1));
            Main.byFld = (byte)(((i7++) * (i6 * i8)) + i6);
            f1 += (Main.iArrFld[i6 + 1] = (i7 &= (i7 - i8)));
            i7 *= (i7--);
        } while (++i8 < 50);
        i9 = 68;
        do {
            if ((((i8 + i6) + s1) - (Main.instanceCount - (d1 - s1))) < (++i7)) continue;
            Main.lArrFld[i6 - 1] >>= ((--Main.byFld) * (++i7));
            i7 *= (int)(--l);
        } while (--i9 > 0);
    }
    long meth_res = l + i6 + i7 + i8 + Float.floatToIntBits(f1) + i9 + s1 + Double.doubleToLongBits(d1);
    lMeth_check_sum += meth_res;
    return (long)meth_res;
}

public static void main(String[] strArr) {

    int i=-57071, i1=-57, i2=18, i3=-10, i4=-32370, i5=11;
    float f=0.119F;
    short s=20698, sArr[]=new short[N];
    double d=127.122888;
    long lArr[][]=new long[N][N];

    init(lArr, -3910329154859014543L);
    init(sArr, (short)28160);

    for (i = 1; i < 96; i++) {
        if (Main.instanceCount < (((i4 + -55844L) * i1) - d)) {
            i1 += i;
            for (i2 = 2; i2 < 64; ++i2) {
                int iArr[]=new int[N];
                if ((f--) < (iArr[i2]--)) {
                    i3 = 1;
                    do {
                        Main.instanceCount = (long)(f - i2);
                    } while (++i3 < 79);
                } else if (Main.bFld) {
                    i1 &= (int)(Main.instanceCount - (iArr[i2 + 1] + (-2.102132 - (i2 * i))));
                    i1 = (--i1);
                    Main.instanceCount = (i4++);
                    i4 |= ((--i4) - (++iArr[i2 - 1]));
                }
                try {
                    i1 = (-78 / i2);
                    i4 = (i4 / -287406747);
                    i4 = (i4 / i2);
                } catch (ArithmeticException a_e) {}
                i5 = 1;
                do {
                    i4 = ((-i3) * i);
                    iArr[(i5 >>> 1) % N] = (int)(++Main.instanceCount);
                    iArr[i2 + 1] = (int)(iArr[i] - (++Main.instanceCount));
                    f -= (f = ((i5 - Main.instanceCount) + 222L));
                    i1 >>= (int)(-(i + (i3 + -1911072491L)));
                    i1 += iArr[i5 - 1];
                    lArr[i + 1][i + 1] = (Main.instanceCount--);
                    lArr[i5 - 1][i2 - 1] <<= (long)(((Main.instanceCount + 178) - (i4 - 146)) - f);
                    i4 >>>= (int)((31946 + (Main.instanceCount + i5)) + (-(12 - (--lArr[i5][i5 + 1]))));
                    iArr[i5 + 1] = i2;
                } while (++i5 < i2);
                i4 += (i2 * i2);
                i4 = (iArr[i - 1] ^ i4);
            }
        } else if (false) {
            i1 += (int)Main.instanceCount;
        } else if (i3 <= Math.max(--lArr[i][i + 1], lMeth(Main.instanceCount) + (i4 - Main.instanceCount))) {
            sArr[i] = (short)(((i1++) - Main.iArrFld[i]) + ((s - i5) + (i1 >>>= i3)));
        } else {
            i4 += s;
        }
    }

    System.out.println("i i1 i2 = " + i + "," + i1 + "," + i2);
    System.out.println("i3 f i4 = " + i3 + "," + Float.floatToIntBits(f) + "," + i4);
    System.out.println("i5 s d = " + i5 + "," + s + "," + Double.doubleToLongBits(d));
    System.out.println("lArr sArr = " + checkSum(lArr) + "," + checkSum(sArr));

    System.out.println("Main.instanceCount Main.bFld Main.byFld = " + Main.instanceCount + "," + (Main.bFld ? 1 : 0) +
        "," + Main.byFld);
    System.out.println("Main.iArrFld Main.lArrFld = " + checkSum(Main.iArrFld) + "," + checkSum(Main.lArrFld));

    System.out.println("lMeth_check_sum: " + lMeth_check_sum);
}
}
