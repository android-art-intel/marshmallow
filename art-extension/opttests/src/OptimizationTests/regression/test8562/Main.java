/*
 * Copyright (C) 2015 Intel Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by Dalvik Fuzzer tool (3.5.001). Sat Apr 25 04:04:46 2015
package OptimizationTests.regression.test8562;

import OptimizationTests.regression.shared.*;

public class Main extends FuzzerUtils {

    public static final int N = 100;

    public static boolean bFld=true;
    public static int iFld=48622;

    public static long byMeth_check_sum = 0;

public static byte byMeth(byte by1, byte by2, int i4) {

    float f1=0.384F;
    short s=5302;
    boolean b=true;
    double d1=30.41443, dArr1[]=new double[N];
    int i5=254, i6=14, i7=60600, i8=20;
    long l1=-875623416015706747L, l2=-8L;

    init(dArr1, 0.109727);

    if (b) {
        i5 = 1;
        do {
            i4 += i5;
            i4 = (i4--);
            l1 = (long)((-iFld) + ((--i4) + d1));
            l1 += i4;
            i6 = 1;
            while (++i6 < 72) {
                for (i7 = 3; i7 < 60; ++i7) {
                    i4 += (((i7 * i5) + l2) - i6);
                    i4 += (i7 - i7);
                    i4 += i7;
                    dArr1[i6 - 1] *= ((Integer.reverseBytes(-3) - (i4 = -80)) * (s -= (short)(iFld - i8)));
                }
            }
        } while (++i5 < 85);
    } else if (b) {
        f1 -= (-i4);
    } else {
        s = (short)i7;
    }
    long meth_res = by1 + by2 + i4 + i5 + l1 + Double.doubleToLongBits(d1) + i6 + i7 + l2 + s + i8 +
        Float.floatToIntBits(f1) + (b ? 1 : 0) + Double.doubleToLongBits(checkSum(dArr1));
    byMeth_check_sum += meth_res;
    return (byte)meth_res;
}

public static void main(String[] strArr) {

    short s1=-23439, sArr[]=new short[N];
    float f=-2.501F, fArr[][]=new float[N][N];
    double d=1.14863, d2=0.28298, dArr[]=new double[N];
    byte by=30;
    int i=8, i1=4, i2=28, i3=-22559, i9=115, iArr[]=new int[N];
    long l=-141L;

    init(sArr, (short)-1948);
    init(dArr, 0.1087);
    init(iArr, 0);
    init(fArr, 0.672F);

    for (i = 4; i < 76; i++) {
        for (iFld = 1; iFld < 93; ++iFld) {
            i1 = 1;
            while ((i1 += 2) < 29) {
                i2 *= (int)((--l) - ((i2 = i) / (l | 1)));
                l -= (long)(Math.sqrt(10833 - (l << l)) * (i - (-65416 - (--i2))));
            }
            by = (byte)(((-90.74172 * (f + 9)) - (--sArr[i - 1])) - f);
            i2 += iFld;
            for (i3 = 2; i3 < 42; i3++) {
                by = (byte)(((i2 >>= (int)l) - Math.abs(166L)) * ((--dArr[i3]) - (l--)));
                f *= (i2--);
                i2 = iArr[i3 - 1];
                i2 -= (int)l;
            }
            l *= (long)Float.intBitsToFloat(i2++);
        }
    }
    d = 1;
    do {
        l += byMeth((byte)((l + i2) - (199L - (l - i1))), (byte)(by++), (i3 - i3) - (-(i2++)));
        s1 |= (short)i2;
        i2 <<= (int)(((i2--) / ((i2++) | 1)) + (i2 -= (int)(l - f)));
        for (i9 = 1; i9 < 65; i9++) {
            try {
                i2 = (11892 % i2);
                i2 = (57090 % i1);
                iArr[i9] = (i3 % i);
            } catch (ArithmeticException a_e) {}
            for (d2 = 1; d2 < 37; ++d2) {
                l -= (((iArr[(int)(d2 + 1)]++) - iFld) - ((++i2) + (13 * (~(i9 + i2)))));
                fArr[(int)(d2)][(int)(d)] -= (i2++);
                iArr[(int)(d2)] = ((--i2) * Math.abs(43665));
                bFld = bFld;
                f *= (i2 = by);
            }
        }
    } while (++d < 80);

    System.out.println("i i1 i2 = " + i + "," + i1 + "," + i2);
    System.out.println("l by f = " + l + "," + by + "," + Float.floatToIntBits(f));
    System.out.println("i3 d s1 = " + i3 + "," + Double.doubleToLongBits(d) + "," + s1);
    System.out.println("i9 d2 sArr = " + i9 + "," + Double.doubleToLongBits(d2) + "," + checkSum(sArr));
    System.out.println("dArr iArr fArr = " + Double.doubleToLongBits(checkSum(dArr)) + "," + checkSum(iArr) + "," +
        Double.doubleToLongBits(checkSum(fArr)));

    System.out.println("iFld bFld = " + iFld + "," + (bFld ? 1 : 0));

    System.out.println("byMeth_check_sum: " + byMeth_check_sum);
}
}
