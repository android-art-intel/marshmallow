/*
 * Copyright (C) 2015 Intel Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by Dalvik Fuzzer tool (3.5.001). Sun Mar  8 02:24:39 2015
package OptimizationTests.regression.test1670;

import OptimizationTests.regression.shared.*;

public class Main extends FuzzerUtils {

    public static final int N = 100;

    public static int iFld=-45180;

public static void main(String[] strArr) {

    float f=-1.316F;
    long l=-278471510492845091L, lArr[]=new long[N];
    int i=5, i1=1, i2=-11, i4=-64610, iArr[]=new int[N];
    short s=-24753;
    double d=-4.6323;

    init(lArr, -21L);
    init(iArr, -55803);

    for (i = 2; i < 76; ++i) {
        i1 = (++i1);
        i1 = (int)((i * (-(i - 2996388453627228959L))) - ((s / (i | 1)) - (--f)));
        i1 *= (++i1);
        i1 += (++i1);
        i1 = (int)((iFld--) % (((l + i) - (i1--)) | 1));
        iFld = (((i1++) ^ (i1 * i1)) / (iFld | 1));
        s = (short)(i1 * f);
        iFld = (iFld++);
    }
    for (d = 3; d < 83; d++) {
        for (i2 = 62; i2 > 3; i2--) {
            l >>= ((++iFld) << (Math.abs(i) & (69 - (++l))));
        }
        f -= (++i1);
        if (i1 <= iFld) break;
        f = (lArr[(int)(d + 1)]--);
        iFld = (int)(--f);
        iArr[(int)(d - 1)] = (((i * iFld) + i) - (iArr[(int)(d)] + (i1--)));
        for (int i3 : iArr) {
            l -= (long)((d + (iFld--)) - ((iFld * i3) - iFld));
            iFld -= iFld;
            if (true) break;
            for (i4 = 2; i4 < 59; i4 += 3) {
                f -= ((iArr[(int)(d - 1)]--) - l);
                f = ((-6 - (223 - i4)) >> iFld);
                i1 -= (iFld++);
            }
        }
    }

    System.out.println("i i1 s = " + i + "," + i1 + "," + s);
    System.out.println("f l d = " + Float.floatToIntBits(f) + "," + l + "," + Double.doubleToLongBits(d));
    System.out.println("i2 i4 lArr = " + i2 + "," + i4 + "," + checkSum(lArr));
    System.out.println("iArr = " + checkSum(iArr));

    System.out.println("iFld = " + iFld);
}
}
