/*
 * Copyright (C) 2015 Intel Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by Android Runtime Fuzzer tool (3.5.002). Fri Jul 31 15:23:55 2015
// srand = 14721158320702230689065595614384595844191989977078502154367326418420

package OptimizationTests.regression.test2389;

import OptimizationTests.regression.shared.*;

public class Main extends FuzzerUtils {

    public static final int N = 100;


public static void main(String[] strArr) {

    long l=47L, lArr[]=new long[N];
    int i=24872, i1=43938, i2=4572, i3=-225, i4=-7, i5=-55705, i6=-23920, iArr[]=new int[N];
    float f=-2.885F;
    short s=-14546;

    init(lArr, -3374879289L);
    init(iArr, -4);

    i = 1;
    do {
        i1 >>= 37887;
        lArr[i - 1] %= ((--iArr[i + 1]) | 1);
    } while (++i < 80);
    i2 = 1;
    while (++i2 < 91) {
        i1 -= Math.max((int)((i + l) % ((l = -4) | 1)), (i1--) * (i1 + i));
        for (i3 = i2; i3 < 38; ++i3) {
            i1 = (int)(++l);
            lArr[i2] *= ((--i1) - l);
            i1 >>>= (int)(i - (6511304597952858177L << iArr[i2 - 1]));
            i1 = i3;
        }
        if ((((61487 + i2) - (i1--)) * ((i2 - i1) + (l * 3240))) < (((i2 + i3) << (i2 - l)) + (i1++))) break;
        f = (-((l - 44.708F) * (++i1)));
        f += (((i2 * i) + i2) - i3);
        i1 = (int)lArr[i2];
        s += (short)i2;
    }
    i4 = 1;
    while (++i4 < 94) {
        l *= (long)18.576F;
    }
    for (i5 = 5; i5 < 88; ++i5) {
        i1 = (int)((--i1) + (-(f * i6)));
        for (int i7 : iArr) {
            i6 += i7;
            i6 -= (iArr[i5]++);
        }
        i1 += (--i6);
        iArr[i5 - 1] = i5;
        iArr[i5] = ((i1--) * ((i6 + 44158) * (i3 - i4)));
    }

    System.out.println("i i1 i2 = " + i + "," + i1 + "," + i2);
    System.out.println("l i3 f = " + l + "," + i3 + "," + Float.floatToIntBits(f));
    System.out.println("s i4 i5 = " + s + "," + i4 + "," + i5);
    System.out.println("i6 lArr iArr = " + i6 + "," + checkSum(lArr) + "," + checkSum(iArr));

}
}
