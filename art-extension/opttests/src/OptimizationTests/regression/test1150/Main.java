/*
 * Copyright (C) 2015 Intel Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by Dalvik Fuzzer tool (3.5.001). Mon Mar 23 00:43:32 2015
package OptimizationTests.regression.test1150;

import OptimizationTests.regression.shared.*;

public class Main extends FuzzerUtils {

    public static final int N = 100;


public static void main(String[] strArr) {

    double d=6.52759;
    short s=-12731;
    int i=-2, i1=-13, i2=12892, i3=-44058, i4=-2, i5=28029, i6=-183, i7=5, iArr[]=new int[N], iArr1[]=new int[N];
    long l=-198L, l1=-90L, l2=-5797198667050028594L, lArr[]=new long[N];
    byte by=-50;
    float f=2.722F;

    init(iArr, -127);
    init(lArr, 20676L);
    init(iArr1, 9);

    i = 1;
    do {
        for (i1 = i; i1 > 1; i1 -= 3) {
            f = (((i1 * i2) - iArr[i + 1]) + ((i2 + 37543) / (i1 | 1)));
            l -= i;
            i3 += (i1 | l);
            i4 = 1;
            while (++i4 < 5) {
                lArr[i1] += Math.max(i3--, (int)((i3 + f) + (l << i1)));
                d *= ((++i2) + (lArr[i4] + (i3 ^ by)));
            }
            i2 += (7 + (i1 * i1));
            i5 = (i5--);
            lArr[i] = 113;
            l = (--iArr[i1 + 1]);
            for (i6 = 3; i6 < 95; ++i6) {
                i5 -= (((i3 * -244) - 0) * Math.min(19549, iArr[i - 1]));
                l = (-l);
                i2 = (int)(--l);
                i3 += (i6 | i6);
                i2 += (((i6 * i3) + f) - l1);
                i5 += iArr[i6 + 1];
                switch (((((i5 + by) >>> 1) % 2) * 5) + 89) {
                case 93:
                    iArr1[i1 + 1] -= (int)(f / (((-214 - (l + l2)) - l1) | 1));
                    i3 -= (i7 * (i3++));
                    break;
                case 96:
                    l2 = (s++);
                    i2 = (int)(l2 + i4);
                    break;
                }
                i3 += (i6 * i6);
            }
        }
    } while (++i < 98);

    System.out.println("i i1 f = " + i + "," + i1 + "," + Float.floatToIntBits(f));
    System.out.println("i2 l i3 = " + i2 + "," + l + "," + i3);
    System.out.println("i4 d by = " + i4 + "," + Double.doubleToLongBits(d) + "," + by);
    System.out.println("i5 i6 l1 = " + i5 + "," + i6 + "," + l1);
    System.out.println("l2 i7 s = " + l2 + "," + i7 + "," + s);
    System.out.println("iArr lArr iArr1 = " + checkSum(iArr) + "," + checkSum(lArr) + "," + checkSum(iArr1));

}
}
