/*
 * Copyright (C) 2015 Intel Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by Dalvik Fuzzer tool (3.4.001). Thu Oct 30 01:21:34 2014
package OptimizationTests.regression.test948;

import OptimizationTests.regression.shared.*;

class TestClass {
    public int field;

    public void meth() {
        field = 1;
    }
}

public class Main extends FuzzerUtils {

    public static final int N = 100;

    public static int z0 = 57480;
    public static float vz = 91.155F;

    public static long m43_check_sum = 0;

    public static int m43() {

        short vxf = 1481;
        int n24 = 18162;
        long s = -8470169260323782414L;

        for (z0 = 3; z0 < 77; ++z0) {
            n24 = (z0 - (n24++));
            vxf -= (short) z0;
            n24 = (int) ((++n24) - ((vz * n24) - -18647));
            n24 -= (int) (s--);
        }
        long meth_res = n24 + vxf + s;
        m43_check_sum += meth_res;
        return (int) meth_res;
    }

    public static void main(String[] im) {

        short avr = 19022;
        int j = 13064, t7q = -47330, rg8 = 13615, a = -39307, ecf = -60213, i = -60747, b[] = new int[N];
        byte t = 0;
        boolean fpv = false, c3s = false, v[] = new boolean[N];
        long q = -2274557335717513565L, j6p[] = new long[N];
        double c = -97.192;

        init(j6p, 6805246045592114978L);
        init(b, -31912);
        init(v, true);

        for (j = 3; j < 84; ++j) {
            t7q = (++avr);
            avr = (short) (((++t7q) * m43()) - (t7q++));
            try {
                t7q += (int) (++c);
                rg8 = 1;
                while (++rg8 < 81) {
                    t7q = (--t7q);
                    TestClass f = null;
                    t7q = f.field;
                    q -= (long) (++vz);
                    if (fpv = (fpv | (c3s = (z0 != c))))
                        continue;
                    for (a = rg8; a < 98; a++) {
                        c3s = fpv;
                        c += ((j6p[a - 1]++) * (q * t7q));
                        vz += (a + vz);
                        t7q &= z0;
                        if ((((q > ecf) || (c <= 4645)) != (fpv = c3s)) == (!((fpv != c3s) == fpv))) {
                            b[j] += (int) (((-(b[a]--)) * (q - z0)) * (q + (t * q)));
                            t7q = (int) (((-t7q) + t7q) - (q - (q >>= z0)));
                        } else if (v[j - 1] = ((t--) == ((ecf * ecf) + (++ecf)))) {
                            b[j + 1] <<= (t7q--);
                            q += a;
                        } else if (c3s) {
                            t7q -= (~rg8);
                            t7q += (int) (1764569735489395853L + (a * a));
                            t7q *= (t7q - (a * t7q));
                        } else {
                            b[j - 1] <<= ecf;
                            q -= (z0 * (--i));
                        }
                    }
                }
            } catch (NullPointerException wpw) {
                q += (((j * z0) + q) - t);
            } finally {
                t7q += (int) (-4777 - ((q - q) + -39074));
            }
        }

        System.out.println("j t7q avr = " + j + "," + t7q + "," + avr);
        System.out.println("c rg8 q = " + Double.doubleToLongBits(c) + ","
                + rg8 + "," + q);
        System.out.println("fpv c3s a = " + (fpv ? 1 : 0) + "," + (c3s ? 1 : 0)
                + "," + a);
        System.out.println("t ecf i = " + t + "," + ecf + "," + i);
        System.out.println("j6p b v = " + checkSum(j6p) + "," + checkSum(b)
                + "," + checkSum(v));

        System.out.println("z0 vz = " + z0 + "," + Float.floatToIntBits(vz));

        System.out.println("m43_check_sum: " + m43_check_sum);
    }
}
