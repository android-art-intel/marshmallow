/*
 * Copyright (C) 2015 Intel Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by Android Runtime Fuzzer tool (3.5.002). Fri Jun 19 13:56:02 2015
// srand = 5354801483217528186005619767162099321202603126989013726376532154134

package OptimizationTests.regression.test2197_2;

import OptimizationTests.regression.shared.*;

public class Main extends FuzzerUtils {

    public static final int N = 100;

    public static int iFld=139;

    public static long iMeth_check_sum = 0;

public static int iMeth() {

    double d1=56.1497;
    int i4=-237, i5=103, i6=57649, iArr1[][]=new int[N][N];
    float f1=0.916F, f2=0.852F, fArr1[]=new float[N];
    long l2=32L, lArr1[]=new long[N];
    byte by=106;

    init(iArr1, -40);
    init(fArr1, 0.27F);
    init(lArr1, 436493520201846943L);

    for (f1 = 3; f1 < 95; ++f1) {
        iArr1[(int)(f1 + 1)][(int)(f1)] = (int)l2;
        f2 -= (by + (Integer.reverseBytes(iFld) + (f2++)));
        iFld = (--iFld);
        l2 <<= (long)((-d1) * iArr1[(int)(f1)][(int)(f1 + 1)]);
        l2 = (((iFld + 40024) - l2) - ((iFld++) * (--l2)));
        for (i4 = 1; i4 < 42; ++i4) {
            for (i5 = (int)f1; i5 < 70; i5++) {
                try {
                    iFld = (-4 / iFld);
                    iFld = (37857 / iArr1[(int)(f1 + 1)][i4 + 1]);
                    iFld = (i6 / i6);
                } catch (ArithmeticException a_e) {}
                fArr1[i5] = (iArr1[i4 - 1][(int)(f1)]++);
                iArr1[(int)(f1)][(int)(f1)] = (int)(-16916 - ((59511 * (d1 * i6)) + (f1 - i5)));
                i6 -= (int)(i6 + (l2 + (++lArr1[i4 - 1])));
            }
        }
    }
    long meth_res = Float.floatToIntBits(f1) + l2 + Float.floatToIntBits(f2) + by + Double.doubleToLongBits(d1) + i4 +
        i5 + i6 + checkSum(iArr1) + Double.doubleToLongBits(checkSum(fArr1)) + checkSum(lArr1);
    iMeth_check_sum += meth_res;
    return (int)meth_res;
}

public static void main(String[] strArr) {

    double d=0.93891, dArr[]=new double[N];
    float f=-46.967F, fArr[][]=new float[N][N];
    int i=4, i1=8, i2=10506, i3=-92, i7=21824, i8=5, iArr[]=new int[N];
    long l=0L, l1=-2113648062L, lArr[]=new long[N];
    boolean b=true, bArr[]=new boolean[N];
    byte by1=-59, byArr[]=new byte[N];

    init(lArr, 19189L);
    init(iArr, 14925);
    init(fArr, 2.47F);
    init(byArr, (byte)105);
    init(dArr, -100.17002);
    init(bArr, true);

    for (i = 5; i < 97; ++i) {
        l = lArr[i - 1];
        iArr[i + 1] += (int)(f = (iArr[i + 1] >> lArr[i]));
    }
    for (i1 = 91; i1 > 5; --i1) {
        iFld = (--iFld);
        d = (i - (--fArr[i1 + 1][i1]));
        iFld *= (int)(i * ((l + l) + (iFld + iFld)));
        iArr[i1 + 1] |= (int)(l++);
        iArr[i1] = (int)(iFld /= (int)(l | 1));
        iFld *= (int)Math.max(lArr[i1 + 1], l += i1);
        iFld += i1;
        l1 >>= (--i2);
        iFld += (int)(l1 + ((i2 + 12) + (l1 + l1)));
    }
    for (i3 = 2; i3 < 88; i3++) {
        l = Integer.reverseBytes((int)((l1 + iFld) << iMeth()));
        i2 += (int)((Float.intBitsToFloat(i2) + l) - ((f - i2) + byArr[i3 + 1]));
        i2 <<= (++iFld);
        i7 = i3;
        do {
            iFld = (int)(by1 * (--f));
        } while (--i7 > 0);
        dArr[i3 + 1] -= ((--i2) - (i3 + (l++)));
        i2 += (int)((lArr[i3 - 1]--) - ((i2--) - (--l1)));
        i2 = (-1 * i2);
    }
    i8 = 1;
    do {
        b = (bArr[i8] = b);
        i2 = i1;
    } while (++i8 < 83);

    System.out.println("i l f = " + i + "," + l + "," + Float.floatToIntBits(f));
    System.out.println("i1 d l1 = " + i1 + "," + Double.doubleToLongBits(d) + "," + l1);
    System.out.println("i2 i3 i7 = " + i2 + "," + i3 + "," + i7);
    System.out.println("by1 i8 b = " + by1 + "," + i8 + "," + (b ? 1 : 0));
    System.out.println("lArr iArr fArr = " + checkSum(lArr) + "," + checkSum(iArr) + "," +
        Double.doubleToLongBits(checkSum(fArr)));
    System.out.println("byArr dArr bArr = " + checkSum(byArr) + "," + Double.doubleToLongBits(checkSum(dArr)) + "," +
        checkSum(bArr));

    System.out.println("iFld = " + iFld);

    System.out.println("iMeth_check_sum: " + iMeth_check_sum);
}
}
