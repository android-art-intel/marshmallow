/*
 * Copyright (C) 2015 Intel Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by Dalvik Fuzzer tool (3.4.001). Wed Oct 22 14:08:48 2014
package OptimizationTests.regression.test769;

import OptimizationTests.regression.shared.*;

public class Main extends FuzzerUtils {

    public static final int N = 100;

    public static int c = -45161, x = -38186;

    public static void main(String[] u1) {
        long gim = 2;
        float bn = -84.46F;
        byte zfv = -45;
        int a = -24936, f5j = 29219, fg[] = new int[N];
        double h = 74.558, kcq[][] = new double[N][N];
        long kal = 8589806531014633573L, y3 = -137474280305996783L, ua[] = new long[N];

        init(fg, -35342);
        init(kcq, 117.778);
        init(ua, 7816609376691155483L);

        for (x = 2; x < 93; ++x) {
            a -= (1628 / ((fg[x - 1] + (c + x)) | 1));
            fg[x - 1] *= (int) ((x - (kal - y3)) / ((long) kcq[x][x + 1] | 1));
            fg[x] -= (int) (((-(kal++)) - (c + kal)) * ((-fg[x]) - (c + bn)));
            ua[x + 1] -= (++a);
            ua[x] = (long) (zfv - (a + (h + a)));
            a += (a++);
            a = (c + (--fg[x + 1]));
            kal *= gim;
        }
        for (f5j = 4; f5j < 96; ++f5j) {
            a = f5j;
            a += (f5j + a);
        }

        System.out.println("a = " + a);
    }
}
