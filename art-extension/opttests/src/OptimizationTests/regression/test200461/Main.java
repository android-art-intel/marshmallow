/*
 * Copyright (C) 2015 Intel Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by Dalvik Fuzzer tool (3.3.001). Tue Jun  3 02:05:05 2014
package OptimizationTests.regression.test200461;

import OptimizationTests.regression.shared.*;

public class Main extends FuzzerUtils {

public static final int N = 300;

    public static double g02=-50.212;
    public static short xwl[]=new short[N];
    public static float l=23.845F;

    static {
        init(xwl, (short)1985);
    }

public static void main(String[] e) {

    byte llm=66, kh[]=new byte[N];
    long jjh=-4754363429331762145L, oe=-7950824691394479764L, n=5020480757551239598L, bg[]=new long[N];
    int je=-19110, hrq=-56688, rf=-55086, r=-12521, h2=18555, h=-31017, h3=24466, zr=-22019, cay=34148, m7=63785,
        zg=-33860, w=58845, paz=16411, j12[]=new int[N];
    double b[][]=new double[N][N];
    short v=-26298;
    float m01=-51.234F, cd7[]=new float[N];

    init(bg, -7615828883385222486L);
    init(kh, (byte)-66);
    init(cd7, -89.144F);
    init(j12, -7035);
    init(b, 48.1000);

    for (je = 6; je < 286; ++je) {
        bg[je] &= jjh;
        llm -= (byte)(kh[je - 1] + (-(je * m01)));
        for (hrq = je; hrq > je; --hrq) {
            cd7[hrq + 1] += -33899;
        }
        rf -= (int)((g02++) + (--rf));
        for (r = 11; r < 246; ++r) {
            rf *= (r + -7389);
            rf = ((-j12[je + 1]) * (j12[je] + je));
        }
        m01 *= jjh;
        for (h2 = je; h2 > je; --h2) {
            jjh %= (((++jjh) ^ oe) | 1);
            rf -= (-(rf - h));
            h >>>= (int)(((h + h) + (r + l)) * ((g02 + je) - 21058));
            l *= r;
            h *= (j12[h2]--);
        }
        if ((((h++) + (h3 + rf)) * ((3314015771257263252L - (++h3)) / ((zr + cay) | 1))) >= (((n + 21869) - (llm +
            jjh)) * ((oe * l) - je))) break;
        b[je][je] += v;
    }
    for (m7 = 10; m7 < 239; m7++) {
        for (zg = 1; zg < 26; ++zg) {
            for (w = 1; w < 160; w++) {
                h3 = (++xwl[w]);
                g02 *= (++paz);
                h3 += (((h++) >>> hrq) - (zr--));
                zr -= (int)((++n) * h2);
            }
        }
    }

    System.out.println("je jjh llm = " + je + "," + jjh + "," + llm);
    System.out.println("m01 hrq rf = " + Float.floatToIntBits(m01) + "," + hrq + "," + rf);
    System.out.println("r h2 oe = " + r + "," + h2 + "," + oe);
    System.out.println("h h3 zr = " + h + "," + h3 + "," + zr);
    System.out.println("cay n v = " + cay + "," + n + "," + v);
    System.out.println("m7 zg w = " + m7 + "," + zg + "," + w);
    System.out.println("paz bg kh = " + paz + "," + checkSum(bg) + "," + checkSum(kh));
    System.out.println("cd7 j12 b = " + Double.doubleToLongBits(checkSum(cd7)) + "," + checkSum(j12) + "," +
        Double.doubleToLongBits(checkSum(b)));
    
    System.out.println("g02 l xwl = " + Double.doubleToLongBits(g02) + "," + Float.floatToIntBits(l) + "," +
        checkSum(xwl));
}
}
