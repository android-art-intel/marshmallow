/*
 * Copyright (C) 2015 Intel Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by Dalvik Fuzzer tool (3.5.001). Sat Feb 21 18:57:34 2015
package OptimizationTests.regression.test1562;

import OptimizationTests.regression.shared.*;

public class Main extends FuzzerUtils {

    public static final int N = 100;


    public static long vMeth_check_sum = 0;

public static void vMeth(int i2) {

    int i3=41;
    long l=-76L;

    i3 = 1;
    do {
        i2 = (int)(i3 * l);
        i2 -= (++i2);
    } while (++i3 < 78);
    vMeth_check_sum += i2 + i3 + l;
}

public static void main(String[] strArr) {

    int i=-42138, i1=51502, i4=-231, i5=-12, i6=174, i7=-53099, iArr[][]=new int[N][N];
    double d=-8.33820;
    float f=37.880F, fArr[]=new float[N];
    long l1=4025999150001369440L, l2=5746282365595900110L, l3=52769L, lArr[]=new long[N];

    init(lArr, -209L);
    init(iArr, 12354);
    init(fArr, -10.127F);

    i = 1;
    do {
        lArr[i - 1] += (i * iArr[i][i]);
    } while (++i < 81);
    for (i1 = 5; i1 < 83; ++i1) {
        vMeth(iArr[i1 - 1][i1]);
        i4 *= (int)(((i4++) & (long)(-(-2524923997L * (d - i1)))) - (l1++));
        f += (l1 - l2);
        lArr[i1] = ((i4--) - (i + (110 * (i1 - i1))));
        i4 -= (int)((l3++) + (fArr[i1 + 1] + (-i4)));
        l2 >>= i5;
        i4 += i1;
        i4 = (int)(i - (-(++l1)));
    }
    i6 = 1;
    do {
        i4 += (int)(8700L + (i6 * i6));
        i5 = (i5 - i5);
        i4 += (i6 - i7);
    } while (++i6 < 86);

    System.out.println("i i1 i4 = " + i + "," + i1 + "," + i4);
    System.out.println("d l1 f = " + Double.doubleToLongBits(d) + "," + l1 + "," + Float.floatToIntBits(f));
    System.out.println("l2 l3 i5 = " + l2 + "," + l3 + "," + i5);
    System.out.println("i6 i7 lArr = " + i6 + "," + i7 + "," + checkSum(lArr));
    System.out.println("iArr fArr = " + checkSum(iArr) + "," + Double.doubleToLongBits(checkSum(fArr)));


    System.out.println("vMeth_check_sum: " + vMeth_check_sum);
}
}
