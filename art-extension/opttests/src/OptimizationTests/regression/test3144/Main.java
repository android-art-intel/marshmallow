/*
 * Copyright (C) 2015 Intel Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by Android Runtime Fuzzer tool (4.1.002). Tue Jan 26 13:16:10 2016
// srand = 169567770119974837378169472913012553087

package OptimizationTests.regression.test3144;

import OptimizationTests.regression.shared.*;

public class Main extends FuzzerUtils {

    public static final int N = 100;

    public static long instanceCount=7867828677347959569L;

public static void main(String[] strArr) {

    int i=0, i1=50055, i2=7, i3=81, i4=-57288, i5=-5, i6=10, i7=-219, iArr[][]=new int[N][N];
    short s=-4290;
    float f=0.1001F;
    double d=-42.69698;
    boolean bArr[]=new boolean[N];

    init(iArr, 218);
    init(bArr, true);

    i = 1;
    while (++i < 96) {
        iArr[i - 1][i - 1] *= i;
        s += (short)(((i * Main.instanceCount) + i) - i);
        i1 = (++i1);
        f %= ((--i1) | 1);
    }
    for (i2 = 5; i2 < 92; i2++) {
        i3 -= (-i1);
        i1 += (int)d;
    }
    for (i4 = 3; i4 < 80; ++i4) {
        i1 += i4;
        i3 <<= iArr[i4][i4 - 1];
        f = ((~i) + (51795 + (iArr[i4][i4]--)));
        f = (++i1);
        bArr[i4 - 1] = bArr[i4 + 1];
        i1 *= (int)(((Main.instanceCount - d) * i2) * ((i4 + Main.instanceCount) * (Main.instanceCount * i2)));
        i1 -= (--iArr[i4 - 1][i4 - 1]);
    }
    for (i5 = 2; i5 < 98; i5++) {
        i1 = (int)((--Main.instanceCount) - f);
        i1 = (int)(((long)(f + Main.instanceCount) | (Main.instanceCount * 0)) + (s + (i2 - i1)));
    }
    for (i6 = 4; i6 < 82; i6++) {
        iArr[i6 - 1][i6] = ((iArr[i6][(i4 >>> 1) % N]++) + i3);
        i7 = i6;
        while (--i7 > 0) {
            i1 = i3;
            i3 = i7;
            iArr[i6][i6 - 1] &= (int)Main.instanceCount;
        }
    }

    System.out.println("i s i1 = " + i + "," + s + "," + i1);
    System.out.println("f i2 i3 = " + Float.floatToIntBits(f) + "," + i2 + "," + i3);
    System.out.println("d i4 i5 = " + Double.doubleToLongBits(d) + "," + i4 + "," + i5);
    System.out.println("i6 i7 iArr = " + i6 + "," + i7 + "," + checkSum(iArr));
    System.out.println("bArr = " + checkSum(bArr));

    System.out.println("Main.instanceCount = " + Main.instanceCount);
}
}
