/*
 * Copyright (C) 2015 Intel Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by Dalvik Fuzzer tool (3.5.001). Mon Mar 23 00:43:32 2015
package OptimizationTests.regression.test1150_1;

import OptimizationTests.regression.shared.*;

public class Main extends FuzzerUtils {

    public static final int N = 100;

    public static double dFld=-121.14612;

public static void main(String[] strArr) {

    byte by=41;
    long l=-55817L, l1=-10L, l2=23L, lArr[]=new long[N], lArr1[]=new long[N];
    boolean b=false;
    float f=-110.360F, f1=0.855F;
    int i=3, i1=-13, i2=-53613, i3=-8, i4=211, iArr[][]=new int[N][N], iArr1[]=new int[N];

    init(lArr, -3249646889L);
    init(iArr, 11);
    init(lArr1, 5055935020556592655L);
    init(iArr1, 11);

    for (i = 87; i > 3; --i) {
        i1 = (int)(203L + (--i1));
        i2 = 1;
        do {
            if (b) {
                if (b) break;
                lArr[i2] >>>= (((-62048 >>> (i >> 14)) - 5872) * i1);
                l += iArr[i2 + 1][i + 1];
                iArr[i][i + 1] *= (i2 * (i1--));
            } else {
                iArr[i2][i2] = ((i1--) + (-(iArr[i + 1][i]++)));
            }
            dFld *= (((++dFld) - (-i2)) * (--i1));
            for (i3 = 4; i3 < 91; i3++) {
                lArr1[i3 - 1] = (long)(f--);
                dFld += (((--i1) + (i1--)) - f);
                f += (i3 - i1);
                i1 = (i2 + ((-i2) - (i1 + i3)));
            }
            i1 = (int)(((i + i) - (l - f)) + ((i1 + l) >> i1));
            i1 += (int)((long)((i4 + dFld) - (l << by)) >>> (long)((i4 - 6) - 1.494F));
            l -= l;
            i4 = (int)167L;
            i1 ^= (iArr1[i - 1]--);
            for (f1 = 2; f1 < 63; ++f1) {
                if (b) continue;
                i4 = (int)(((l1 + i) - (l--)) % ((long)Float.intBitsToFloat(-(i4++)) | 1));
                i1 += (int)(((f1 * l2) + i1) - f1);
                dFld = ((i2 + (i4 * 0.23F)) - ((f + dFld) + i3));
            }
        } while (++i2 < 94);
    }

    System.out.println("i i1 i2 = " + i + "," + i1 + "," + i2);
    System.out.println("b l i3 = " + (b ? 1 : 0) + "," + l + "," + i3);
    System.out.println("f i4 by = " + Float.floatToIntBits(f) + "," + i4 + "," + by);
    System.out.println("f1 l1 l2 = " + Float.floatToIntBits(f1) + "," + l1 + "," + l2);
    System.out.println("lArr iArr lArr1 = " + checkSum(lArr) + "," + checkSum(iArr) + "," + checkSum(lArr1));
    System.out.println("iArr1 = " + checkSum(iArr1));

    System.out.println("dFld = " + Double.doubleToLongBits(dFld));
}
}
