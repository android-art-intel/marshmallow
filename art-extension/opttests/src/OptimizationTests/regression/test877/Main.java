/*
 * Copyright (C) 2015 Intel Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by Dalvik Fuzzer tool (3.4.001). Thu Sep  4 05:50:05 2014
package OptimizationTests.regression.test877;

import OptimizationTests.regression.shared.*;

public class Main extends FuzzerUtils {

    public static final int N = 100;

    public static boolean mgh[]=new boolean[N];
    public static int i=-25409;

    static {
        init(mgh, false);
    }

public static void main(String[] n0a) {

    long oll=6461243206087497223L, be=-5836170692809619158L, mkw[]=new long[N];
    int u0=8776, sm=-32792, t=-58653, a[]=new int[N];
    double n94=-63.292, ktf=55.244;
    byte wmt=-87;
    short gj=-30829;
    float z3=-88.182F;

    init(mkw, -5150685373684066358L);
    init(a, -21572);

    n94 = 89;
    do {
        u0 <<= u0;
        u0 += (int)(n94 + u0);
        z3 -= sm;
        u0 *= (int)(--oll);
        for (i = 1; i < 24; ++i) {
            u0 >>= (int)oll;
            if ((oll--) == (mkw[i]++)) {
                be += (i + gj);
            } else {
                wmt >>>= (byte)(((-124.830F - (u0++)) + -8374151631248802543L) - ((sm -= u0) - (be++)));
                sm -= u0;
                oll /= (long)((long)n94 | 1);
            }
            mkw[i + 1] >>= sm;
            for (t = i; t < i; t += 2) {
                z3 = (--sm);
                mgh[t + 1] = ((--z3) != -2728370718828756741L);
                a[i] -= (int)(u0 << be);
                sm += ((-i) * (--sm));
                sm += (t * t);
                u0 -= (int)((be++) + (1906671424197940183L + (u0 - sm)));
                sm += (t - sm);
                u0 *= (int)(((oll * t) + (t * u0)) + ((t - oll) % (u0 | 1)));
            }
            z3 = (be--);
            ktf *= (((mkw[(int)(n94)]--) + be) >>> (be + (a[(int)(n94)]++)));
            u0 |= (int)((sm--) + z3);
        }
    } while ((n94 -= 2) > 0);

    System.out.println("n94 u0 z3 = " + Double.doubleToLongBits(n94) + "," + u0 + "," + Float.floatToIntBits(z3));
    System.out.println("sm oll be = " + sm + "," + oll + "," + be);
    System.out.println("gj wmt t = " + gj + "," + wmt + "," + t);
    System.out.println("ktf mkw a = " + Double.doubleToLongBits(ktf) + "," + checkSum(mkw) + "," + checkSum(a));

    System.out.println("i mgh = " + i + "," + checkSum(mgh));
}
}
