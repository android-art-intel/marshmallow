/*
 * Copyright (C) 2015 Intel Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by Dalvik Fuzzer tool (3.5.001). Fri Jan  9 23:49:34 2015
package OptimizationTests.regression.test1131;

import OptimizationTests.regression.shared.*;

public class Main extends FuzzerUtils {

    public static final int N = 100;


public static void main(String[] strArr) {

    boolean b=false;
    long l=1L, lArr[]=new long[N];
    int i=65017, i1=-248, i2=-42595, i3=-11, i4=62859, i5=-32, iArr[]=new int[N];
    short s=-2392;
    double d=2.124242;
    float f=-37.908F, f1=-26.627F;

    init(lArr, -9L);
    init(iArr, -37);

    for (i = 1; i < 87; ++i) {
        f -= (((i - f) + (i >> 42)) / (i | 1));
        i1 = 1;
        while (++i1 < 96) {
            i2 *= (int)(-(5L - i1));
            f *= (i1 + i2);
            i2 = i;
            lArr[i1 - 1] = ((lArr[i]++) + (i2--));
            i2 *= s;
            i2 = (int)(i1 + (Float.floatToRawIntBits(f) + (--f1)));
            if (b) break;
            i2 += (3 + (i1 * i1));
            i2 = i;
        }
    }
    for (i3 = 4; i3 < 91; i3++) {
        for (i4 = 5; i4 < 96; i4++) {
            l += ((long)i4 | (long)i4);
            s += (short)(i4 - i3);
            l *= Math.abs(i4);
            i2 = (int)l;
        }
    }
    for (i5 = 3; i5 < 90; ++i5) {
        lArr[i5] += (long)(-((++f) + (l + i1)));
        if (b) break;
    }
    for (int i6 : iArr) {
        iArr[(i3 >>> 1) % N] += (int)((++l) - ((iArr[(8 >>> 1) % N]++) + f1));
        d = i2;
        f1 += i5;
    }

    System.out.println("i f i1 = " + i + "," + Float.floatToIntBits(f) + "," + i1);
    System.out.println("i2 s f1 = " + i2 + "," + s + "," + Float.floatToIntBits(f1));
    System.out.println("b i3 i4 = " + (b ? 1 : 0) + "," + i3 + "," + i4);
    System.out.println("l i5 d = " + l + "," + i5 + "," + Double.doubleToLongBits(d));
    System.out.println("lArr iArr = " + checkSum(lArr) + "," + checkSum(iArr));

}
}
