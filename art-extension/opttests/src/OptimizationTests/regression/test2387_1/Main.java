/*
 * Copyright (C) 2015 Intel Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by Android Runtime Fuzzer tool (3.5.002). Fri Jul 31 17:44:03 2015
// srand = 9105025557753375854054507897888201463422457292902014914814758503823

package OptimizationTests.regression.test2387_1;

import OptimizationTests.regression.shared.*;

public class Main extends FuzzerUtils {

    public static final int N = 100;


public static void main(String[] strArr) {

    byte byArr[][]=new byte[N][N];
    long l=-4228361559856874656L, lArr[]=new long[N], lArr1[]=new long[N];
    int i=-45856, i1=-62198, i2=6, i3=3, i4=231, i5=13, i6=-123, iArr[][]=new int[N][N], iArr1[]=new int[N];
    short s=-9430, sArr[][]=new short[N][N];
    double d=1.129834;
    float f=-1.983F, f1=6.360F, fArr[]=new float[N];

    init(iArr, 5);
    init(sArr, (short)11410);
    init(lArr, 61163L);
    init(fArr, 0.205F);
    init(byArr, (byte)106);
    init(iArr1, -60417);
    init(lArr1, -1L);

    for (f = 3; f < 85; ++f) {
        l = i;
        for (i1 = 1; i1 < 8; i1 += 2) {
            i = (4 + i1);
            i *= (iArr[(int)(f - 1)][i1 + 1]--);
            iArr[i1 + 1][(int)(f - 1)] -= (int)(d + 41249);
            l *= -4;
        }
        sArr[(int)(f)][(int)(f + 1)] = (short)((l--) - ((l - i) - (-(53970 >>> (++i)))));
        i = (i1 * (--iArr[(int)(f - 1)][(int)(f)]));
        for (i2 = 1; i2 < 21; i2++) {
            i += (i2 * i2);
            i &= (int)(d - ((l >>= l) >>> (i1 - i1)));
            s >>= (short)(iArr[(int)(f)][i2 + 1] = (int)(lArr[(i >>> 1) % N] - (108 + f)));
            l = (long)fArr[(int)(f + 1)];
            for (i3 = 4; i3 < 84; i3++) {
                iArr[i3 - 1][i3 + 1] -= (int)((-(8 - (i2 - l))) - (++f1));
                i += (int)(1.979F + (i3 * i3));
                iArr[(i1 >>> 1) % N][i2 - 1] -= (-((i3 + i4) - (i1 - i)));
                i -= (int)((-i5) - ((iArr[i3 - 1][(int)(f - 1)] += (int)l) & i3));
                iArr[(int)(f)][(int)(f + 1)] >>>= (i * iArr[i2 + 1][i2 + 1]);
                i5 = (i4--);
                iArr[i3][(int)(f - 1)] = (i3 - (Math.max(i3, i6) + 28010));
                if ((-((l - i) - (f * d))) >= (byArr[i2 + 1][i2]--)) continue;
                i5 += (int)(iArr1[(int)(f - 1)] - (14 * l));
                i4 += (int)(lArr1[i2] >> (long)(-(i5 - d)));
            }
        }
    }

    System.out.println("f l i = " + Float.floatToIntBits(f) + "," + l + "," + i);
    System.out.println("i1 d i2 = " + i1 + "," + Double.doubleToLongBits(d) + "," + i2);
    System.out.println("s i3 f1 = " + s + "," + i3 + "," + Float.floatToIntBits(f1));
    System.out.println("i4 i5 i6 = " + i4 + "," + i5 + "," + i6);
    System.out.println("iArr sArr lArr = " + checkSum(iArr) + "," + checkSum(sArr) + "," + checkSum(lArr));
    System.out.println("fArr byArr iArr1 = " + Double.doubleToLongBits(checkSum(fArr)) + "," + checkSum(byArr) + "," +
        checkSum(iArr1));
    System.out.println("lArr1 = " + checkSum(lArr1));

}
}
