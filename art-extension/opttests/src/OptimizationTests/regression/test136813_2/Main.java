/*
 * Copyright (C) 2015 Intel Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by Dalvik Fuzzer tool (2.1.003). Fri Sep 20 04:52:42 2013

package OptimizationTests.regression.test136813_2;

import OptimizationTests.regression.shared.*;

public class Main extends FuzzerUtils {

    public static final int N = 30;

    public static long vp_check_sum = 0;
    public static long g_check_sum = 0;
    static int statIntField = 3;

    static void statSet(int value) {
        statIntField = value;
    }

    static int statGet() {
        return statIntField;
    }

    public static void vp(int p1, long ub, int f, int ueh, long v) {

        char zq8[] = new char[N];
        int g8r = -43725, dez = -59832, xuk = -55450, x = -19883, m = -12073, fox = 42490, z[][] = new int[N][N], j7[] = new int[N], hdo[] = new int[N], k[][] = new int[N][N], sa[][] = new int[N][N];
        long qa = 7241544991103123836L;

        init(z, 33407);
        init(zq8, (char) 10040);
        init(j7, 64632);
        init(hdo, -2553);
        init(k, -27020);
        init(sa, 33020);

        // Test Loop Interchange
        for (g8r = 1; g8r < 19; ++g8r) {
            for (dez = 1; dez < g8r; ++dez) {
                z[g8r - 1][g8r + 1] = (int) (xuk++);
            }
        }

        if (zq8[19] > (j7[14]) * ueh) {

            for (x = 1; x < 23; x++) {
                qa += (long) ((hdo[x + 1]) * (++m));
                k[x - 1][x - 1] += (int) (sa[x - 1][x]);

                for (fox = 1; fox < 13; fox++) {
                    hdo[x] *= (int) (z[x][fox - 1]);
                }

            }

        }

        vp_check_sum += p1 + ub + f + ueh + v + g8r + dez + xuk + x + qa + m
                + fox + checkSum(z) + checkSum(zq8) + checkSum(j7)
                + checkSum(hdo) + checkSum(k) + checkSum(sa);
    }

    public static int g(int ui, char pqy, int d) {

        int ucn = -25729, ctn = -1408, sly = 2731, p = 43575, o = -48945, yq = 44097, m = -44241, up = -27000, cg[][] = new int[N][N], e[][] = new int[N][N];
        long r[] = new long[N], ez[][] = new long[N][N];

        init(r, -3797964687247361568L);
        init(cg, 15304);
        init(e, 59899);
        init(ez, 6394051295533117315L);

        // Test Loop Interchange
        for (ucn = 17; ucn > 1; --ucn) {
            for (ctn = 1; ctn < 5; ctn += 3) {
                r[ucn] = (long) (cg[ucn][ctn - 1]);
            }
        }

        for (sly = 16; sly > 1; sly--) {
            e[sly][sly] += (int) (cg[sly][sly - 1]);
        }

        for (p = 1; p < 25; p++) {
            o += (int) (++yq);
            ui -= (int) (++m);
        }

        for (up = 1; up < 3; up++) {
            cg[up + 1][up] -= (int) (cg[up][up]);
        }

        long meth_res = ui + pqy + d + ucn + ctn + sly + p + o + yq + m + up
                + checkSum(r) + checkSum(cg) + checkSum(e) + checkSum(ez);
        g_check_sum += meth_res;
        return (int) meth_res;
    }

    public static void main(String[] z) {

        int c5 = 53444, a3 = -16461, kq5 = -17007, j5 = 19569, d4 = 35746, l = 26707, s = -48303, op = 6600, wq = 65432, gt = 4287, kf = 32675, j4 = -27203, t4h = -9931, qqe[][] = new int[N][N], pwc[] = new int[N], jo[] = new int[N], b[] = new int[N], ult[][] = new int[N][N], dft[][] = new int[N][N], tf[][] = new int[N][N], fe[][] = new int[N][N];
        long h9h = 4357350057139447199L, b12 = -8047154791856339991L, o[][] = new long[N][N], w[][] = new long[N][N], ie7[][] = new long[N][N];

        init(o, 1147922544729238115L);
        init(qqe, -1862);
        init(pwc, -35787);
        init(jo, -15469);
        init(b, 17513);
        init(ult, 58372);
        init(dft, 23326);
        init(w, -4352269804910813076L);
        init(tf, 10957);
        init(ie7, 5618440704320532361L);
        init(fe, 59949);

        for (c5 = 1; c5 < 24; ++c5) {
            o[c5][c5] = (long) (o[c5][c5 + 1]);
            a3 -= (int) ((++kq5) * (a3 + ((qqe[c5 - 1][c5 - 1]) - (c5))));
        }

        vp((int) (j5--), (long) (a3 - ((pwc[15]) + 60)), (int) (jo[6]),
                (int) (g((int) (pwc[17]), (char) (b[6]), (int) (d4--))),
                (long) (jo[1]));

        for (l = 16; l > 1; --l) {
            h9h += (long) ((ult[l - 1][l + 1]) * ((pwc[l - 1]) % ((d4 != 0) ? d4
                    : 1)));

            for (s = l; s < 13; ++s) {
                o[s - 1][s - 1] = (long) (b[s + 1]);
                dft[s + 1][l + 1] += (int) (op--);
                b12 += (long) (w[l + 1][l + 1]);
            }

        }

        for (wq = 1; wq < 24; ++wq) {
            h9h += (long) ((j5 + (g((int) (tf[wq][wq]),
                    (char) (ie7[wq][wq - 1]), (int) (fe[wq + 1][wq - 1])))) * l);
            gt *= (int) (a3 + (b[wq]));
            jo[wq + 1] = (int) (kf++);

            for (j4 = 1; j4 < wq; ++j4) {
                o[j4][j4] += (long) (t4h--);
            }

        }

        System.out.println("int: " + c5 + "," + a3 + "," + kq5 + "," + j5 + ","
                + d4 + "," + l + "," + s + "," + op + "," + wq + "," + gt + ","
                + kf + "," + j4 + "," + t4h + "," + checkSum(qqe) + ","
                + checkSum(pwc) + "," + checkSum(jo) + "," + checkSum(b) + ","
                + checkSum(ult) + "," + checkSum(dft) + "," + checkSum(tf)
                + "," + checkSum(fe));
        System.out.println("long: " + h9h + "," + b12 + "," + checkSum(o) + ","
                + checkSum(w) + "," + checkSum(ie7));

        System.out.println("vp_check_sum: " + vp_check_sum);
        System.out.println("g_check_sum: " + g_check_sum);
        System.out.println("statIntField: " + statIntField);
    }
}
