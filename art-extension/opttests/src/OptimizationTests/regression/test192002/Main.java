/*
 * Copyright (C) 2015 Intel Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by Dalvik Fuzzer tool (3.2.001). Sat May  3 12:21:35 2014
package OptimizationTests.regression.test192002;

import OptimizationTests.regression.shared.*;

public class Main extends FuzzerUtils {

public static final int N = 500;

    public static long g58=-570559942157977739L;

public static void main(String[] fcj) {

    boolean d=false, m=true, t=true, co=true, x1=false, hka=true, f[]=new boolean[N];
    int ewr=4377, ie=-56627, j6j=-5324, s=1237, lih=-62138, dt=26235, g=53587, s2t=-55188, dl0=-17409, v=-33609,
        qo=-2001, a0=-56876, n=2708, im8=4063, lbo=-20847, i=-19908, l=-15349, cnc=-61663, yz=47674, e=-5412, a3=61333,
        ldn=29416, em6=12390, c36=-51148, ai=-25452, li6=12140, jdg=-51153, h0o=24897, qr=-34206, i5b=17716, p=-47400,
        j=-39673, y2j=-28257, j9=51178, vli=31275, a=-18431, kf=-30272, lo=12527, rx=-39589, jl=16851, h=41781,
        mw=-63776, jgn=-17535, kv[]=new int[N], q[]=new int[N], g0[]=new int[N], p3[]=new int[N], os[]=new int[N];
    byte v0=-85, hkp[][]=new byte[N][N], yp6[][]=new byte[N][N];
    short vdl=-19376, k=-32298, jdi[][]=new short[N][N];
    double rbf=-99.684, r=-113.678, qss=-49.412, m2=-49.572, rep=45.446, xx3=47.703, oh=-70.340, xlp=31.350, jvq[]=new
        double[N];
    float ko=41.376F, o3=119.435F, m4z=63.853F, qgk=-43.60F, yu=102.89F, u=-127.402F, y8l=116.365F, huk=-63.644F,
        h4=110.136F, ry[]=new float[N];
    long vp7=5409424279639865696L, o=-5403894467546002329L, c9=-6436692530864889499L, e04=6710479282654960432L,
        l95=-2655864992412855556L, o9=-4560435550820023697L, xb0=675163007574042550L, l0=3517815613487354960L,
        i2p=1158670283541853896L, w=-7781043853527532771L, tq=7111057510125677892L, zx=-6953135823830390002L,
        p1[][]=new long[N][N], dx[]=new long[N], tkw[]=new long[N], mj[]=new long[N];

    init(p1, 8557288637211592482L);
    init(f, true);
    init(kv, -4683);
    init(q, -46336);
    init(hkp, (byte)-108);
    init(jdi, (short)5959);
    init(dx, -6442122847168290736L);
    init(yp6, (byte)-32);
    init(g0, 14467);
    init(p3, 56512);
    init(os, 26822);
    init(jvq, 127.682);
    init(ry, -84.513F);
    init(tkw, -1626678725749508285L);
    init(mj, -711729543298308138L);

    for (ewr = 12; ewr < 474; ++ewr) {
        ie = ewr;
        if (d) break;
        j6j += (++ie);
    }
    s = 417;
    do {
        lih = s;
        do {
            switch (s + 47) {
            case 47:
                p1[s][lih - 1] += (long)(-((rbf * 59022) + (dt * dt)));
                p1[s][lih + 1] += ie;
                if (t = (((vp7--) - g) != ewr)) {
                    if (m = (d = f[lih])) continue;
                }
            case 48:
                kv[s] = s2t;
                j6j >>= dl0;
                break;
            case 49:
                break;
            case 50:
                dt = (-((-(++v)) - 57393));
                dt += (int)((ie - o) + (qo--));
            case 51:
                a0 <<= (int)(((-35.595F / (q[s - 1] | 1)) - ko) + ((dt + n) * (-r)));
                break;
            case 52:
                c9 += (long)(((-(-(a0 >> 5862717401450689476L))) - (j6j += (int)o3)) + m4z);
                break;
            case 53:
                break;
            case 54:
                v >>>= (-g);
                break;
            case 55:
                ko -= (float)(qss += r);
                break;
            case 56:
                break;
            case 57:
                s2t = (int)(o3 * 4023373733390738289L);
                break;
            case 58:
                c9 -= im8;
                break;
            case 59:
                lbo >>= 13412;
                break;
            case 60:
                vp7 -= (long)((--n) * (-(--qss)));
                break;
            case 61:
                ie = (int)((lih * (-60988 - (e04 * dl0))) * ((long)(qgk * dt) << j6j));
            case 62:
                e04 = im8;
                break;
            case 63:
                i = 17488;
                break;
            case 64:
                o *= vdl;
            case 65:
                v <<= (int)((vp7 * (l95 >> -37214)) << ((o9 - -49224) - (l + n)));
                break;
            case 66:
                hkp[s - 1][lih + 1] = (byte)m2;
                break;
            case 67:
                yu = ewr;
                break;
            case 68:
                qo = (int)(44951 >> (long)((ewr / 34123) / ((long)(v0 - u) | 1)));
                break;
            case 69:
                n *= (--i);
                break;
            case 70:
                ko = (((30655 % (i | 1)) + -41164) + ((k - u) % ((long)(y8l + a0) | 1)));
                break;
            case 71:
                dl0 = (ewr + ((-q[lih]) - (18407 * (lbo * l))));
            case 72:
                jdi[lih][lih + 1] = (short)(u++);
                break;
            case 73:
                g58 = ((++dx[s + 1]) + ((q[lih] -= (int)g58) / ((xb0 - a0) | 1)));
                break;
            case 74:
                l0 = (long)(-(yp6[s][s + 1] = (byte)(-2689525602538887087L / ((long)(u + i2p) | 1))));
                break;
            case 75:
                w >>= (long)(-((r + ie) + rep));
                break;
            case 76:
                i -= (int)qss;
            case 77:
                try {
                    q[s] = (s2t % -56594);
                    j6j = (7 % s);
                    ie = (-15 / q[lih]);
                } catch (ArithmeticException a_e) {}
                break;
            case 78:
            case 79:
                huk = (c9 >>>= ((s2t + lih) >> (im8 - vp7)));
                break;
            case 80:
                cnc = (int)y8l;
            case 81:
                yz >>>= 43982;
                break;
            case 82:
                i = (int)(((i - i) / (i | 1)) + (o9 + (e + a3)));
                break;
            case 83:
                a3 = (--g0[s - 1]);
                break;
            case 84:
                p3[lih + 1] = (int)l0;
                break;
            case 85:
                i *= (++q[lih]);
            case 86:
                v0 += (byte)l;
                break;
            case 87:
                tq = os[lih];
                break;
            case 88:
                m = ((h4 > (-47137 + (h4 * yu))) && ((k + -7487) != (p1[lih + 1][(n >>> 1) % N]++)));
                break;
            case 89:
                ldn *= lbo;
                break;
            case 90:
                try {
                    dl0 = (i / 12);
                    v = (-131277632 / dt);
                    g0[s] = (em6 / i);
                } catch (ArithmeticException a_e) {}
                break;
            case 91:
                c36 <<= (int)(((a3 / (em6 | 1)) - (-(--jvq[s + 1]))) + g);
                break;
            case 92:
                m4z *= (-23.976F - ((lih * ai) / ((qo * li6) | 1)));
                break;
            case 93:
                c9 >>= jdg;
                break;
            case 94:
                d = (((-(v0 <<= (byte)h0o)) == (w + l0)) != co);
                break;
            case 95:
                os[lih - 1] = (a0--);
                break;
            case 96:
                ry[lih] = qr;
                break;
            case 97:
                lbo -= (int)(((ie * i5b) - (c36 << p)) + (++qgk));
                break;
            case 98:
                a3 += -57259;
                break;
            case 99:
                kv[lih] -= (int)tkw[lih + 1];
                break;
            case 100:
                rep *= (++i);
                break;
            case 101:
                i2p &= j;
                break;
            case 102:
                yz -= ((y2j--) - i);
            case 103:
                p3[lih - 1] ^= j9;
                break;
            case 104:
                break;
            case 105:
                v0 = (byte)l0;
                break;
            case 106:
                p1[lih + 1][s + 1] -= (((qr - -43226) + (em6 * ewr)) + (o9 & 8797767464814676444L));
                break;
            case 107:
                vli -= (int)(((long)(huk + lbo) | im8) - -32710);
                break;
            case 108:
                try {
                    a3 = (a / -637708877);
                    h0o = (dl0 % 54912);
                    lo = (205 / kf);
                } catch (ArithmeticException a_e) {}
                break;
            case 109:
                xx3 = lih;
                break;
            case 110:
                l0 = (long)(qss - ((oh + rx) * jvq[lih - 1]));
                break;
            case 111:
                jl += h;
            case 112:
                mj[s - 1] = (-(--mw));
            case 113:
                x1 = (dt == (--zx));
            case 114:
                vp7 *= (long)(-((j + xlp) - 103611736622749803L));
                break;
            case 115:
                jgn += 75;
                break;
            case 116:
                hka = d;
                break;
            }
        } while ( --lih > 0 );
    } while ( --s > 0 );

    System.out.println("ewr ie d = " + ewr + "," + ie + "," + d);
    System.out.println("j6j s lih = " + j6j + "," + s + "," + lih);
    System.out.println("rbf dt m = " + Double.doubleToLongBits(rbf) + "," + dt + "," + m);
    System.out.println("t vp7 g = " + t + "," + vp7 + "," + g);
    System.out.println("s2t dl0 v = " + s2t + "," + dl0 + "," + v);
    System.out.println("o qo a0 = " + o + "," + qo + "," + a0);
    System.out.println("ko n r = " + Float.floatToIntBits(ko) + "," + n + "," + Double.doubleToLongBits(r));
    System.out.println("c9 o3 m4z = " + c9 + "," + Float.floatToIntBits(o3) + "," + Float.floatToIntBits(m4z));
    System.out.println("qss im8 lbo = " + Double.doubleToLongBits(qss) + "," + im8 + "," + lbo);
    System.out.println("e04 qgk i = " + e04 + "," + Float.floatToIntBits(qgk) + "," + i);
    System.out.println("vdl l95 o9 = " + vdl + "," + l95 + "," + o9);
    System.out.println("l m2 yu = " + l + "," + Double.doubleToLongBits(m2) + "," + Float.floatToIntBits(yu));
    System.out.println("v0 u k = " + v0 + "," + Float.floatToIntBits(u) + "," + k);
    System.out.println("y8l xb0 l0 = " + Float.floatToIntBits(y8l) + "," + xb0 + "," + l0);
    System.out.println("i2p w rep = " + i2p + "," + w + "," + Double.doubleToLongBits(rep));
    System.out.println("huk cnc yz = " + Float.floatToIntBits(huk) + "," + cnc + "," + yz);
    System.out.println("e a3 tq = " + e + "," + a3 + "," + tq);
    System.out.println("h4 ldn em6 = " + Float.floatToIntBits(h4) + "," + ldn + "," + em6);
    System.out.println("c36 ai li6 = " + c36 + "," + ai + "," + li6);
    System.out.println("jdg h0o co = " + jdg + "," + h0o + "," + co);
    System.out.println("qr i5b p = " + qr + "," + i5b + "," + p);
    System.out.println("j y2j j9 = " + j + "," + y2j + "," + j9);
    System.out.println("vli a kf = " + vli + "," + a + "," + kf);
    System.out.println("lo xx3 oh = " + lo + "," + Double.doubleToLongBits(xx3) + "," + Double.doubleToLongBits(oh));
    System.out.println("rx jl h = " + rx + "," + jl + "," + h);
    System.out.println("mw x1 zx = " + mw + "," + x1 + "," + zx);
    System.out.println("xlp jgn hka = " + Double.doubleToLongBits(xlp) + "," + jgn + "," + hka);
    System.out.println("p1 f kv = " + checkSum(p1) + "," + checkSum(f) + "," + checkSum(kv));
    System.out.println("q hkp jdi = " + checkSum(q) + "," + checkSum(hkp) + "," + checkSum(jdi));
    System.out.println("dx yp6 g0 = " + checkSum(dx) + "," + checkSum(yp6) + "," + checkSum(g0));
    System.out.println("p3 os jvq = " + checkSum(p3) + "," + checkSum(os) + "," +
        Double.doubleToLongBits(checkSum(jvq)));
    System.out.println("ry tkw mj = " + Double.doubleToLongBits(checkSum(ry)) + "," + checkSum(tkw) + "," +
        checkSum(mj));
    
    System.out.println("g58 = " + g58);
}
}
