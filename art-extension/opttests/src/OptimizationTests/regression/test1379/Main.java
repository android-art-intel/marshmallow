/*
 * Copyright (C) 2015 Intel Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by Dalvik Fuzzer tool (3.5.001). Sat Jan 31 10:51:12 2015
package OptimizationTests.regression.test1379;

import OptimizationTests.regression.shared.*;

public class Main extends FuzzerUtils {

    public static final int N = 100;

    public static long lFld=39874L;

    public static long vMeth_check_sum = 0;

public static void vMeth(int i12, int i13) {

    int i14=-6, i15=-133, i16=-59261, iArr2[]=new int[N];
    long lArr2[]=new long[N];
    byte by2=126;
    double d5=0.85914;

    init(iArr2, 7);
    init(lArr2, -208411151L);

    i14 = 81;
    while (--i14 > 0) {
        d5 *= ((by2--) - iArr2[i14]);
        lFld &= ((--lFld) - (i14 - (i13 = i12)));
        if (i12 != 0) {
            vMeth_check_sum += i12 + i13 + i14 + Double.doubleToLongBits(d5) + by2 + i15 + i16 + checkSum(iArr2) +
                checkSum(lArr2);
            return;
        }
        iArr2[i14 - 1] = (int)(i13 % (((lFld * 4) + i12) | 1));
        by2 += (byte)i14;
        i12 = i15;
        lFld = (iArr2[i14 + 1] += i15);
        i15 += (int)lFld;
    }
    i16 = 94;
    while ((i16 -= 2) > 0) {
        i13 *= i12;
        lArr2[i16 + 1] = (((lArr2[i16]--) * (lArr2[i16] += -43414)) - ((lFld + -56004) - Math.max(lFld, lFld)));
    }
    vMeth_check_sum += i12 + i13 + i14 + Double.doubleToLongBits(d5) + by2 + i15 + i16 + checkSum(iArr2) +
        checkSum(lArr2);
}

public static void main(String[] strArr2) {

    float f2=-1.797F;
    int i5=-53568, i6=56904, i7=-56519, i8=0, i9=-205, i10=-6, i11=-195, iArr1[][]=new int[N][N];
    byte by1=97;
    long l1=-1094874000491897624L, lArr1[]=new long[N];
    double d3=0.125070, d4=0.85366, dArr[]=new double[N];
    short s2=-11493;
    boolean b1=false, b2=false, b3=true;

    init(iArr1, 144);
    init(lArr1, -8266586597028550217L);
    init(dArr, 25.73257);

    for (i5 = 88; i5 > 4; i5 -= 2) {
        switch (((i5 % 2) * 5) + 89) {
        case 91:
            for (i6 = 1; i6 < 48; i6++) {
                b1 = (Math.abs(Math.min(i6, i5)) >= -14L);
            }
            iArr1[i5][i5 + 1] -= (int)(((d3--) * (-131 - (--i7))) + lFld);
            i7 = ((-i8) + (i7++));
            break;
        case 96:
            iArr1[i5][i5 - 1] = (int)((++lFld) * ((0.54F + (i7 + i7)) % ((s2 * l1) | 1)));
            b2 = (lArr1[i5] != i5);
            for (i9 = 1; i9 < 54; ++i9) {
                iArr1[i9 - 1][i5 - 1] *= (s2--);
                i10 = 68;
                do {
                    iArr1[i9 + 1][i9 - 1] += (i7 * ((by1--) + (i5 + i8)));
                    iArr1[i9][i9 - 1] = (++i7);
                    lFld = (long)(i9 + ((i8 - f2) * (lFld--)));
                    l1 -= Short.reverseBytes((short)((s2 + i6) - i5));
                    i8 *= (int)(lFld++);
                } while ((i10 -= 2) > 0);
                switch ((i9 % 2) + 18) {
                case 18:
                    f2 *= (i7--);
                    break;
                case 19:
                    i8 = (int)(f2 += (l1++));
                    if (b3) break;
                    l1 += (((i5 * 37762L) + i8) - ((-18788 - i7) + (i8--)));
                    break;
                default:
                    i7 &= (int)(i7 + ((i9 * i5) * (-50483L - (10 * (i10 + i7)))));
                    d4 = (i6 - ((d4 * i5) - (dArr[i9 - 1] = i11)));
                }
            }
            lArr1[i5] = (lArr1[i5 - 1] >>>= (long)((222 * (f2++)) - (by1--)));
            break;
        }
    }
    vMeth(++i11, i5);

    System.out.println("i5 i6 b1 = " + i5 + "," + i6 + "," + (b1 ? 1 : 0));
    System.out.println("d3 i7 i8 = " + Double.doubleToLongBits(d3) + "," + i7 + "," + i8);
    System.out.println("s2 l1 b2 = " + s2 + "," + l1 + "," + (b2 ? 1 : 0));
    System.out.println("i9 i10 by1 = " + i9 + "," + i10 + "," + by1);
    System.out.println("f2 b3 d4 = " + Float.floatToIntBits(f2) + "," + (b3 ? 1 : 0) + "," +
        Double.doubleToLongBits(d4));
    System.out.println("i11 iArr1 lArr1 = " + i11 + "," + checkSum(iArr1) + "," + checkSum(lArr1));
    System.out.println("dArr = " + Double.doubleToLongBits(checkSum(dArr)));

    System.out.println("lFld = " + lFld);

    System.out.println("vMeth_check_sum: " + vMeth_check_sum);
}
}
