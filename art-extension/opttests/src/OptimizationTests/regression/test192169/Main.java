/*
 * Copyright (C) 2015 Intel Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by Dalvik Fuzzer tool (3.2.001). Sun May  4 09:52:42 2014
package OptimizationTests.regression.test192169;

import OptimizationTests.regression.shared.*;

public class Main extends FuzzerUtils {

public static final int N = 500;

    public static double fto=-30.1022;

public static void main(String[] o) {

    int n2=7893, rhd=-44403, ez=-54715, ui=-57694, o2n=57136, jjp=22705, vv=-1891, pm0=-4849, xe=57292, e=53570,
        fov=62086, d=1279, bcj=55414, ug[]=new int[N], oex[]=new int[N], bfo[]=new int[N];
    double ag[]=new double[N];
    float f=74.799F, r=-32.238F, ou5=68.2F, qnv[]=new float[N];
    byte ypw=-116;
    long q=-6008461982886282896L, ao=1582546971938973907L, ky=-7338550497729892036L, bfs=-5287965610633099221L,
        z6x[]=new long[N];

    init(z6x, -7732738603877793595L);
    init(ug, -30269);
    init(oex, -3274);
    init(qnv, -34.633F);
    init(ag, -46.618);
    init(bfo, -14798);

    for (n2 = 9; n2 < 412; n2++) {
        f = q;
        rhd = 132;
        while ( --rhd > 0 ) {
            z6x[rhd] = ez;
            try {
                for (ui = 42; ui > 2; ui -= 3) {
                    r -= ((ug[rhd + 1] - (20707 - (-10175 % (++oex[rhd])))) + (oex[rhd - 1] -= (int)qnv[n2 - 1]));
                    ag[rhd] -= (-ou5);
                    o2n -= jjp;
                    vv <<= ui;
                }
                ug[n2] >>= (pm0++);
                fto = ((ao % (ez + xe)) * ((-(r - vv)) - (ypw << -5845)));
                o2n -= (int)(((q * e) + (vv++)) + ((-(-40066 >> ui)) / 6063116004947219122L));
                oex[rhd - 1] = (int)(-(f--));
                bfo[rhd] = (int)(((ao * -60599) - (ao--)) * (1606963650774161615L * (-31 - (-(51203 - (-fov))))));
            }
            catch (ArithmeticException mio) {
                r -= ((long)(ug[rhd] += (int)(-34.445F % ((long)fto | 1))) | (++d));
            }
            catch (ArrayIndexOutOfBoundsException ia) {
                ky = (q = ((bfs + ao) % ((d | bcj) | 1)));
            }
        }
    }

    System.out.println("n2 f q = " + n2 + "," + Float.floatToIntBits(f) + "," + q);
    System.out.println("rhd ez ui = " + rhd + "," + ez + "," + ui);
    System.out.println("r ou5 o2n = " + Float.floatToIntBits(r) + "," + Float.floatToIntBits(ou5) + "," + o2n);
    System.out.println("jjp vv pm0 = " + jjp + "," + vv + "," + pm0);
    System.out.println("ao xe ypw = " + ao + "," + xe + "," + ypw);
    System.out.println("e fov d = " + e + "," + fov + "," + d);
    System.out.println("ky bfs bcj = " + ky + "," + bfs + "," + bcj);
    System.out.println("z6x ug oex = " + checkSum(z6x) + "," + checkSum(ug) + "," + checkSum(oex));
    System.out.println("qnv ag bfo = " + Double.doubleToLongBits(checkSum(qnv)) + "," +
        Double.doubleToLongBits(checkSum(ag)) + "," + checkSum(bfo));
    
    System.out.println("fto = " + Double.doubleToLongBits(fto));
}
}
