/*
 * Copyright (C) 2015 Intel Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by Dalvik Fuzzer tool (3.2.001). Sat Apr  5 03:41:44 2014
package OptimizationTests.regression.test184849_2;

import OptimizationTests.regression.shared.*;

public class Main extends FuzzerUtils {

    public static final int N = 500;

    public static int qi = 47531;

    public static void main(String[] nd) {

        long s = 5316745983239301324L, b6y = 398040765534084840L, b = 9217665211809014597L, k77[] = new long[N];
        short p = 7171;
        int q = -35410, ux = -3299, b3 = -31557, s6 = -37579, vax = 44772, iq = -38280, n = 61207, d = -38686, wj = 39567, g31[] = new int[N];
        boolean d4m[] = new boolean[N];
        float y = -39.465F;

        init(k77, -408827632258196662L);
        init(d4m, true);
        init(g31, 62681);

        for (q = 6; q < 382; ++q) {
            ux = ux;
            s = q;
            for (b3 = 17; b3 < 352; b3++) {
                s6 += q;
            }
        }
        for (vax = 28; vax < 479; ++vax) {
            y -= (((ux--) >> (q >> s)) + (q & (--k77[vax])));
            for (iq = 2; iq < 47; ++iq) {
                if (d4m[iq])
                    break;
                ux = b3;
                y = (((-(b6y = s6)) - (-(b * 94.373F))) % (((-(iq + -33582)) << b6y) | 1));
                qi = -28012;
                s6 /= (int) ((((56931 * (n * 788853194309513489L)) - n) - (p - (d--))) | 1);
            }
            n += (int) (-(-4014933825972958897L - (n = wj)));
            s6 += g31[vax];
        }

        System.out.println("q ux s = " + q + "," + ux + "," + s);
        System.out.println("b3 s6 vax = " + b3 + "," + s6 + "," + vax);
        System.out.println("y iq b6y = " + Float.floatToIntBits(y) + "," + iq
                + "," + b6y);
        System.out.println("b n p = " + b + "," + n + "," + p);
        System.out.println("d wj k77 = " + d + "," + wj + "," + checkSum(k77));
        System.out.println("d4m g31 = " + checkSum(d4m) + "," + checkSum(g31));

        System.out.println("qi = " + qi);
    }
}
