/*
 * Copyright (C) 2015 Intel Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by Dalvik Fuzzer tool (3.2.001). Sun Apr 20 06:04:09 2014
package OptimizationTests.regression.test188604;

import OptimizationTests.regression.shared.*;

public class Main extends FuzzerUtils {

public static final int N = 200;

    public static byte p8=57;
    public static int pv=-9969;

public static void main(String[] q) {

    boolean f6k=true, b=true;
    double s=14.779, wp1=4.293, bh[]=new double[N];
    long yvo=8868831459046288610L, v=-7221755972908613956L, nn9[]=new long[N];
    int ei=-24502, x=44828, a0=-4995, ao9=-50637, w=-8042, oe=-24539, ss=-21037, h4=-15569, jqz=-26331, xe6=-27662,
        tud=61844, pf=-27002, m=22608, an=59255, cs=36575, pg=43325, fa[]=new int[N], nq[]=new int[N], hm[]=new int[N];
    short c=6073;
    float va=103.468F, t=-7.181F;

    init(nn9, -8639077361105919148L);
    init(fa, 43701);
    init(bh, -122.1020);
    init(nq, -50471);
    init(hm, 28334);

    ei = 198;
    while ( --ei > 0 ) {
        nn9[ei - 1] -= ((-yvo) - ((x + a0) + fa[ei - 1]));
        a0 <<= p8;
    }
    if ((t -= an) < -31582) {
        for (int qn : fa) {
            for (int ex9 : fa) {
                v += (x * x);
                ao9 = (int)(((p8 + v) - (v += (long)va)) * bh[(ao9 >>> 1) % N]);
                fa[(w >>> 1) % N] = (((oe % (a0 | 1)) + qn) + ((ss >> -30559) >> h4));
                s /= ((long)(yvo * ((-(--t)) - (++pv))) | 1);
                for (jqz = 6; jqz < 101; ++jqz) {
                    nq[jqz] ^= xe6;
                    nq[jqz + 1] = (int)((tud + w) - (yvo--));
                    yvo /= ((((~(-7154409973559685875L << (long)(wp1 * -5048669248740991828L))) + (hm[jqz - 1]++)) *
                        (xe6++)) | 1);
                }
            }
            bh[(h4 >>> 1) % N] += (pf << (fa[(13590 >>> 1) % N]++));
        }
    } else if (f6k = (((b = f6k) || (c >= 353441873712180324L)) && (b = (-16210 != (-(x + cs)))))) {
        v &= (-5039256341159158646L - (yvo - m));
    } else {
        cs >>= (int)((tud--) - (ei & (v + pg)));
    }

    System.out.println("ei yvo x = " + ei + "," + yvo + "," + x);
    System.out.println("a0 v ao9 = " + a0 + "," + v + "," + ao9);
    System.out.println("va w oe = " + Float.floatToIntBits(va) + "," + w + "," + oe);
    System.out.println("ss h4 s = " + ss + "," + h4 + "," + Double.doubleToLongBits(s));
    System.out.println("t jqz xe6 = " + Float.floatToIntBits(t) + "," + jqz + "," + xe6);
    System.out.println("tud wp1 pf = " + tud + "," + Double.doubleToLongBits(wp1) + "," + pf);
    System.out.println("m an f6k = " + m + "," + an + "," + f6k);
    System.out.println("b c cs = " + b + "," + c + "," + cs);
    System.out.println("pg nn9 fa = " + pg + "," + checkSum(nn9) + "," + checkSum(fa));
    System.out.println("bh nq hm = " + Double.doubleToLongBits(checkSum(bh)) + "," + checkSum(nq) + "," + checkSum(hm));
    
    System.out.println("p8 pv = " + p8 + "," + pv);
}
}
