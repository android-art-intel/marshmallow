/*
 * Copyright (C) 2015 Intel Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by Android Runtime Fuzzer tool (4.1.002). Mon Jan 18 17:15:12 2016
// srand = 185026246204271653732257810798255552342

package OptimizationTests.regression.test3111_3;

import OptimizationTests.regression.shared.*;

public class Main extends FuzzerUtils {

    public static final int N = 100;

    public static long instanceCount=-10L;
    public static float fFld=-51.381F;
    public static byte byFld=-124;
    public static int iFld=-24;
    public static int iArrFld[]=new int[N];

    static {
        init(Main.iArrFld, -240);
    }

public static void main(String[] strArr) {

    int i=-4, i1=13, i2=1, i3=38512, i4=-254, i5=-12;
    short s=-8246;
    double d=79.80644, dArr[]=new double[N];
    long lArr[]=new long[N];
    float fArr[]=new float[N];

    init(lArr, -7922L);
    init(dArr, 25.86631);
    init(fArr, 118.124F);

    for (i = 5; i < 82; i++) {
        i1 = i;
    }
    for (i2 = 5; i2 < 85; i2++) {
        Main.fFld -= (Math.min((int)(-(-(140L - (s * 20)))), i1) >> i2);
        if (Main.fFld <= ((d + (-3 - (i1 % 49))) - Integer.reverseBytes(246 / (Math.abs(Main.iFld) | 1)))) {
            for (i3 = 5; i3 < 94; ++i3) {
                Main.fFld *= i1;
                for (i4 = 85; i4 > 4; --i4) {
                    Main.instanceCount = (i1 - Main.iArrFld[i2 - 1]);
                    i1 += (int)(-(lArr[i4 + 1] - Main.iArrFld[i3 - 1]));
                    i1 *= (i1--);
                    i1 += Main.byFld;
                    i1 >>= (int)Main.instanceCount;
                    Main.instanceCount += (i4 | Main.instanceCount);
                    i1 = Main.byFld;
                    d *= ((dArr[i3]++) / (i1 | 1));
                    i1 += ((i1++) - i);
                    i1 = i;
                }
                for (i5 = 3; i5 < 64; ++i5) {
                    i1 *= (int)(((--d) * (-d)) - ((Main.instanceCount - i5) * (++i1)));
                    i1 = (int)(Main.iArrFld[i2 - 1] + (lArr[i2 + 1] - i));
                    Main.iArrFld[i3] %= (int)(((long)(((fArr[i2]++) + -44L) + Math.min(70 * Main.iFld, i1 + i))) | 1);
                    Main.iFld &= i5;
                    Main.iFld += (i5 * i5);
                    Main.fFld += (float)(d + ((i3 << i3) * i4));
                }
            }
        } else {
            Main.iArrFld[i2] = (int)((-(i5 + Main.byFld)) / -2393349272352112182L);
        }
    }

    System.out.println("i i1 i2 = " + i + "," + i1 + "," + i2);
    System.out.println("s i3 i4 = " + s + "," + i3 + "," + i4);
    System.out.println("d i5 lArr = " + Double.doubleToLongBits(d) + "," + i5 + "," + checkSum(lArr));
    System.out.println("dArr fArr = " + Double.doubleToLongBits(checkSum(dArr)) + "," +
        Double.doubleToLongBits(checkSum(fArr)));

    System.out.println("Main.instanceCount Main.fFld Main.byFld = " + Main.instanceCount + "," +
        Float.floatToIntBits(Main.fFld) + "," + Main.byFld);
    System.out.println("Main.iFld Main.iArrFld = " + Main.iFld + "," + checkSum(Main.iArrFld));
}
}
