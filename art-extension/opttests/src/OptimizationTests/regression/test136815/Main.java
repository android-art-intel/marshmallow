/*
 * Copyright (C) 2015 Intel Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by Dalvik Fuzzer tool (2.1.003). Sun Sep  8 00:58:05 2013

package OptimizationTests.regression.test136815;

import OptimizationTests.regression.shared.*;

public class Main extends FuzzerUtils {

    public static final int N = 30;

    public static long z4_check_sum = 0;
    static int statIntField = 3;

    static void statSet(int value) {
        statIntField = value;
    }

    static int statGet() {
        return statIntField;
    }

    public static long j_check_sum = 0;

    public static void z4(int xy) {

        int u = 23184, b = 45712, o = -32002, t90 = -23520, t[][] = new int[N][N], x[] = new int[N];
        long zw[] = new long[N];

        init(t, -13235);
        init(x, 23063);
        init(zw, -7735246092217493876L);

        for (u = 1; u < 15; u++) {
            t[u + 1][u - 1] = (int) (t[u - 1][u]);
        }
        int g8 = 11;
        do {
            for (b = 23; b > 1; b--) {
                x[b + 1] = (int) (51861);
            }
        } while (--g8 > 0);
        for (o = 17; o > 1; o--) {
            t90 -= (int) (zw[o + 1]);
        }
        z4_check_sum += xy + u + b + o + t90 + checkSum(t) + checkSum(x)
                + checkSum(zw);
    }

    public static int j() {

        int zu8 = 49655, g6r = -14094, s = -2335, za = -46681, a = -3645, rp = 40516, p = 24859, wm[] = new int[N], i[] = new int[N], j7[] = new int[N];
        short zk[][] = new short[N][N];
        long r = -1105060838356960798L;

        init(zk, (short) 13218);
        init(wm, 60285);
        init(i, -17177);
        init(j7, -9233);

        zu8 = 0;
        switch ((int) zu8) {
        case 1:
            for (g6r = 1; g6r < 6; g6r++) {
                for (s = 7; s > 1; s--) {
                    zk[s][g6r + 1] = (short) (za++);
                }
            }
            break;
        case 2:
            for (a = 18; a > 1; a--) {
                if (((wm[a]) - a) + a >= (g6r * zu8) + -46865) {
                    for (rp = 5; rp > 1; rp--) {
                        i[a] = (int) (j7[a + 1]);
                    }
                    int ql = 11;
                    do {
                        for (p = a; p < 3; p++) {
                            r *= (long) (r + (za));
                        }
                    } while (--ql > 0);
                }
            }
        }

        long meth_res = zu8 + g6r + s + za + a + rp + p + r + checkSum(zk)
                + checkSum(wm) + checkSum(i) + checkSum(j7);
        j_check_sum += meth_res;
        return (int) meth_res;
    }

    public static void main(String[] ji) {

        int z = -47202, tc = -35104, m1 = -14068, hst = -25542, afv = -59303, y = -61309, qg = -39145, df = -11352, r97 = 41450, l = 164, fg = -43445, p7a = -50836, v5[] = new int[N], nc[][] = new int[N][N], nd[] = new int[N], v[] = new int[N], gz[] = new int[N], i[] = new int[N], n[] = new int[N], eet[] = new int[N], ox[] = new int[N], zjz[] = new int[N], k[] = new int[N], l2[][] = new int[N][N], zq[][] = new int[N][N];
        byte x8[] = new byte[N];
        short bf[] = new short[N], aw[] = new short[N];
        long pc4 = 4826111543230719150L, m[] = new long[N], xl5[] = new long[N], ai[] = new long[N];

        init(bf, (short) 21309);
        init(v5, 60825);
        init(nc, 8679);
        init(aw, (short) -26598);
        init(nd, -38945);
        init(m, -1083147052676936664L);
        init(xl5, -8641809290069707749L);
        init(v, -26637);
        init(x8, (byte) -99);
        init(gz, 10069);
        init(i, 12058);
        init(n, 59991);
        init(eet, 62476);
        init(ox, -21710);
        init(ai, -9027428169584956004L);
        init(zjz, 29519);
        init(k, -54637);
        init(l2, 20791);
        init(zq, -46019);

        int d = 11;
        do {
            for (z = 16; z > 1; --z) {
                bf[z] = (short) (-bf[z]);
            }
        } while (--d > 0);

        for (int dt8 : v5) {
            for (tc = 18; tc > 1; --tc) {
                m1 *= (int) ((v5[tc]) - (nc[tc][tc + 1]));
            }
            int s = 11;
            while (--s > 0) {
                int vdv = 0;
                try {
                    int r = 11;
                    do {
                        if (--hst > (aw[15]) - (v5[24])) {
                            try {
                                z4((int) (hst - (-(z + (m[14])))));
                                v[25] = (int) x8[32];
                                hst *= (int) (m1 - (bf[23]));
                            } catch (ArrayIndexOutOfBoundsException j) {
                                z4((int) (afv--));
                                pc4 *= (long) (statGet());
                            } finally {
                                m1 += (int) (gz[16]);
                                z4((int) ((bf[19]) / ((j() != 0) ? j() : 1)));
                            }
                        }
                    } while (--r > 0);
                    y = (int) (x8[22] % vdv);
                    for (qg = 8; qg > 1; --qg) {
                        xl5[qg - 1] = (long) (eet[qg] + ox[qg - 1]);
                    }
                } catch (ArithmeticException kdt) {
                    for (df = 25; df > 1; df--) {
                        ai[df] -= (long) (-zjz[df]);
                        bf[df] += (short) (m[df - 1] + k[df]);
                    }
                    for (r97 = 1; r97 < 4; ++r97) {
                        l += (int) ((l2[r97 + 1][r97]) - ((m1 * (zq[r97][r97])) + (nc[r97 - 1][r97 - 1])));
                    }
                } finally {
                    for (fg = 1; fg < 6; ++fg) {
                        m[fg] = (long) (61173);
                    }
                    for (p7a = 1; p7a < 16; p7a++) {
                        ox[p7a + 1] -= (int) (38114);
                    }
                }
            }
        }

        System.out.println("int: " + z + "," + tc + "," + m1 + "," + hst + ","
                + afv + "," + y + "," + qg + "," + df + "," + r97 + "," + l
                + "," + fg + "," + p7a + "," + checkSum(v5) + ","
                + checkSum(nc) + "," + checkSum(nd) + "," + checkSum(v) + ","
                + checkSum(gz) + "," + checkSum(i) + "," + checkSum(n) + ","
                + checkSum(eet) + "," + checkSum(ox) + "," + checkSum(zjz)
                + "," + checkSum(k) + "," + checkSum(l2) + "," + checkSum(zq));
        System.out.println("byte: " + checkSum(x8));
        System.out.println("short: " + checkSum(bf) + "," + checkSum(aw));
        System.out.println("long: " + pc4 + "," + checkSum(m) + ","
                + checkSum(xl5) + "," + checkSum(ai));

        System.out.println("z4_check_sum: " + z4_check_sum);
        System.out.println("j_check_sum: " + j_check_sum);
        System.out.println("statIntField: " + statIntField);
    }
}
