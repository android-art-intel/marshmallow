/*
 * Copyright (C) 2015 Intel Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by Dalvik Fuzzer tool (3.4.001). Sun Nov 16 16:26:23 2014
package OptimizationTests.regression.test861;

import OptimizationTests.regression.shared.*;

public class Main extends FuzzerUtils {

    public static final int N = 100;

    public static long csx[]=new long[N];

    static {
        init(csx, 5896319372601855478L);
    }

public static void main(String[] x8) {

    short d=-16280, r[]=new short[N];
    int q4c=7713, lg=-60901, n=-35233, xa=43679, ff=-14894, f6=-56578, ewb[]=new int[N];
    double o=42.72, q=96.220, g8[]=new double[N];
    long j=7722915050096496743L, xl=-3837584676698121173L;
    byte mg[]=new byte[N];
    float ql=84.127F, dco[]=new float[N];
    boolean mo=true, ye[]=new boolean[N];

    init(dco, 105.491F);
    init(mg, (byte)62);
    init(g8, 35.863);
    init(ewb, -53743);
    init(r, (short)-1321);
    init(ye, false);

    q4c = 1;
    do {
        lg = 1;
        do {
            n = ((--n) + (++n));
            for (xa = 1; xa < 1; ++xa) {
                j += (xa + j);
                dco[xa - 1] -= -50879;
            }
            j = (++xl);
            if (mo || ((ewb[lg] += (int)(-27825 + xl)) <= (ql + (--n)))) {
                n *= (int)(n + ((-49980 - (n++)) * (j & -19698)));
                n -= (int)((long)((lg % ((long)ql | 1)) - (n * lg)) & mg[q4c - 1]);
            } else if ((((xa + -16914) + (d + j)) >> (long)((n++) + (d + o))) != lg) {
                n = ((n++) + xa);
                csx[q4c + 1] = (long)(-((g8[q4c] %= (j | 1)) * (ql - q4c)));
                n <<= (ewb[q4c - 1]--);
                n *= (int)(((xa * 23741) + j) - (j & (long)(xa + o)));
            }
            n = q4c;
            q = 1;
            while (++q < 45) {
                ewb[(xa >>> 1) % N] >>>= (ewb[lg - 1] - xa);
                ql *= (float)(ql - (csx[(int)(q)] + (83.664F + (--o))));
                if ((((ql--) - xa) * 52112) < (((-16882 - (f6 = d)) - (xa - n)) + lg)) {
                    csx[lg + 1] >>= 60440;
                } else if (ye[(int)(q - 1)] = (((++ff) * 6389700951621381357L) > n)) {
                    n = r[q4c - 1];
                    switch (((((n--) >>> 1) % 4) * 5) + 94) {
                    case 106:
                        n += (int)(q + q4c);
                        n += (int)(++o);
                        ff >>= (int)(((ql - lg) * (j + ff)) - ((xa + xa) - ewb[lg - 1]));
                        break;
                    case 105:
                        xl += (long)(q * q);
                        break;
                    case 103:
                        ewb[lg + 1] /= (int)((long)((n++) + ((ql++) - (j = ff))) | 1);
                        break;
                    case 114:
                        mo = ye[q4c];
                        break;
                    default:
                        ff += d;
                    }
                } else {
                    ewb[q4c + 1] = (int)(o++);
                }
            }
        } while (++lg < 51);
    } while (++q4c < 84);

    System.out.println("q4c lg n = " + q4c + "," + lg + "," + n);
    System.out.println("xa j xl = " + xa + "," + j + "," + xl);
    System.out.println("ql o mo = " + Float.floatToIntBits(ql) + "," + Double.doubleToLongBits(o) + "," + (mo ? 1 : 0));
    System.out.println("d q ff = " + d + "," + Double.doubleToLongBits(q) + "," + ff);
    System.out.println("f6 dco mg = " + f6 + "," + Double.doubleToLongBits(checkSum(dco)) + "," + checkSum(mg));
    System.out.println("g8 ewb r = " + Double.doubleToLongBits(checkSum(g8)) + "," + checkSum(ewb) + "," + checkSum(r));
    System.out.println("ye = " + checkSum(ye));

    System.out.println("csx = " + checkSum(csx));
}
}
