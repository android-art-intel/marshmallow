/*
 * Copyright (C) 2015 Intel Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by Dalvik Fuzzer tool (3.5.001). Tue Apr  7 14:19:23 2015
package OptimizationTests.regression.test1182;

import OptimizationTests.regression.shared.*;

public class Main extends FuzzerUtils {

    public static final int N = 100;

    public static float fArrFld[]=new float[N];

    static {
        init(fArrFld, -1.299F);
    }

    public static long iMeth_check_sum = 0;

public static int iMeth(int i3) {

    int i4=-61747, i5=-57, i6=248, i7=-12, iArr[]=new int[N], iArr1[]=new int[N];
    long l2=9L, lArr[]=new long[N];
    byte by1=-120;
    double dArr[][]=new double[N][N];
    short s1=9681;
    float f1=-1.68F;

    init(dArr, -108.38025);
    init(lArr, 159L);
    init(iArr, -7164);
    init(iArr1, 4);

    for (i4 = 4; i4 < 92; i4++) {
        i3 *= (int)(Math.abs(35 - (i4 * 242)) + (dArr[i4 + 1][i4] - by1));
        for (i5 = 1; i5 < i4; i5++) {
            f1 += (i5 * i5);
            lArr[i4 - 1] -= (long)((-49643L - (f1 - f1)) + ((-36301 * i5) - i3));
            i3 = ((i3++) - iArr[i5]);
            iArr[i4 + 1] = (i6 *= (i3++));
            iArr1[i5] += (int)(-(--l2));
            for (i7 = 4; i7 < 88; ++i7) {
                fArrFld[i5 - 1] = (lArr[i5]++);
                s1 += (short)(i7 ^ by1);
                i3 += (i7 * l2);
            }
        }
    }
    long meth_res = i3 + i4 + by1 + i5 + Float.floatToIntBits(f1) + i6 + l2 + i7 + s1 +
        Double.doubleToLongBits(checkSum(dArr)) + checkSum(lArr) + checkSum(iArr) + checkSum(iArr1);
    iMeth_check_sum += meth_res;
    return (int)meth_res;
}

public static void main(String[] strArr) {

    int i=8, i1=-33, i2=-11, i8=36, i9=-148, i10=19219, i11=35406, i12=-12, iArr2[]=new int[N];
    byte by=78;
    long l=-3521584428L, l1=44138L;
    double d=0.593;
    short s=15185;
    float f=0.27F;

    init(iArr2, -3);

    d = 1;
    while (++d < 79) {
        f += (i * ((l + i) - i));
        for (i1 = (int)d; i1 < 88; i1++) {
            fArrFld[i1 + 1] = (-((by++) + f));
            i = (int)(i * f);
            l -= i1;
        }
        l *= (10 - (-(l * i)));
        i += (int)((long)d | i1);
    }
    for (i2 = 3; i2 < 85; i2++) {
        l1 += ((-12 - (l1 + i1)) - (--l));
        fArrFld[i2] += i;
        s += (short)i2;
        i >>= iMeth(-by);
        for (i8 = 5; i8 < 92; i8++) {
            l += i;
            l1 += i8;
            i9 = i;
            l1 += i8;
            i9 >>= ((++i) + i2);
            f += (((i8 * i2) + by) - i);
        }
    }
    for (i10 = 2; i10 < 89; ++i10) {
        by += (byte)s;
        for (i11 = 1; i11 < 16; ++i11) {
            iArr2[i11 - 1] = i12;
        }
        fArrFld[i10 + 1] = i11;
    }

    System.out.println("d f i = " + Double.doubleToLongBits(d) + "," + Float.floatToIntBits(f) + "," + i);
    System.out.println("l i1 by = " + l + "," + i1 + "," + by);
    System.out.println("i2 l1 s = " + i2 + "," + l1 + "," + s);
    System.out.println("i8 i9 i10 = " + i8 + "," + i9 + "," + i10);
    System.out.println("i11 i12 iArr2 = " + i11 + "," + i12 + "," + checkSum(iArr2));

    System.out.println("fArrFld = " + Double.doubleToLongBits(checkSum(fArrFld)));

    System.out.println("iMeth_check_sum: " + iMeth_check_sum);
}
}
