/*
 * Copyright (C) 2015 Intel Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by Dalvik Fuzzer tool (3.5.001). Sat Mar 14 21:48:40 2015
package OptimizationTests.regression.test1707;

import OptimizationTests.regression.shared.*;

public class Main extends FuzzerUtils {

    public static final int N = 100;

    public static int iFld=-10;
    public static boolean bFld=true;
    public static short sArrFld[]=new short[N];
    public static double dFld=-1.95938;

    static {
        init(sArrFld, (short)-23927);
    }

    public static long iMeth_check_sum = 0;

public static int iMeth(int i3, int i4, short s) {

    int i5=-70, i6=-11, i7=-63, iArr1[]=new int[N];
    boolean b=true, bArr1[]=new boolean[N];
    byte by1=84;
    double d1=-33.113028, dArr[]=new double[N];
    long l1=43912L;

    init(dArr, 0.109164);
    init(iArr1, -232);
    init(bArr1, false);

    for (iFld = 4; iFld < 96; iFld++) {
        i4 ^= (iFld % (s | 1));
        i4 += (int)(((l1 * by1) - (i3 - l1)) - (++i4));
        i4 = (int)((by1 = (byte)(dArr[iFld]--)) + (-(l1 * by1)));
    }
    for (i5 = 1; i5 < 91; ++i5) {
        i3 = (int)(iArr1[i5 - 1] % ((long)((4 - iArr1[i5 + 1]) * d1) | 1));
    }
    for (i6 = 2; i6 < 88; i6++) {
        if (b) continue;
        if ((b || ((i6 * i7) >= (l1 + 43))) || (b | bArr1[i6 - 1])) continue;
        iArr1[i6 - 1] = (((++i7) + (i4--)) - i4);
        iArr1[i6 + 1] = (++i3);
        if (i3 != 0) {
            return (int)(i3 + i4 + s + l1 + by1 + i5 + Double.doubleToLongBits(d1) + i6 + (b ? 1 : 0) + i7 +
                Double.doubleToLongBits(checkSum(dArr)) + checkSum(iArr1) + checkSum(bArr1));
        }
    }
    long meth_res = i3 + i4 + s + l1 + by1 + i5 + Double.doubleToLongBits(d1) + i6 + (b ? 1 : 0) + i7 +
        Double.doubleToLongBits(checkSum(dArr)) + checkSum(iArr1) + checkSum(bArr1);
    iMeth_check_sum += meth_res;
    return (int)meth_res;
}

public static void main(String[] strArr) {

    int i=-12, i1=-5, i2=88, i8=-62996, i9=8, i10=-12, iArr[]=new int[N];
    boolean bArr[]=new boolean[N];
    byte by=-44, by2=35;
    short s1=-15925;
    float f=0.218F, f1=1.239F;
    double d=-24.37514, dArr1[]=new double[N];
    long l=-1999662832L, lArr[]=new long[N];

    init(lArr, -2L);
    init(iArr, 4);
    init(bArr, false);
    init(dArr1, -2.125600);

    for (f = 1; f < 85; ++f) {
        i += i;
        i <<= (int)lArr[(int)(f + 1)];
        iArr[(int)(f - 1)] = iArr[(int)(f)];
    }
    for (i1 = 2; i1 < 81; ++i1) {
        if (((-f) * (i + (l |= i1))) == (--l)) break;
        i += (i1 * i1);
        i += ((long)i1 ^ (long)i1);
        l += (i1 - i1);
        for (f1 = 3; f1 < 55; f1++) {
            for (i2 = 1; i2 < f1; i2++) {
                i = (i = ((i / (i | 1)) - i1));
                i *= i2;
            }
            iArr[i1] <<= (int)(d - ((i + 242) - (l--)));
        }
        if (((l = (++i)) <= (iArr[i1 + 1] * sArrFld[i1 - 1])) ^ (bArr[i1 - 1] = (iMeth(i, i1, s1) == (-(-(i * l)))))) {
            iArr[i1 - 1] = (by *= (byte)iArr[i1 + 1]);
        } else if ((l--) > l) {
            i -= (int)(i - ((i2 + 42500) + lArr[i1]));
            l += ((--iArr[i1 + 1]) / ((-(++i)) | 1));
        }
    }
    i8 = 1;
    do {
        i >>= (by2++);
        l = (iArr[i8 + 1] - (l >>= (i2 + i1)));
    } while (++i8 < 76);
    i9 = 1;
    do {
        for (i10 = 2; i10 < 46; i10++) {
            bFld = false;
            if (((-(iFld - d)) * (Double.doubleToRawLongBits(dFld) + dArr1[i9 - 1])) != ((l - (8572914527067450362L *
                (++i))) + (-i8))) continue;
        }
    } while (++i9 < 82);

    System.out.println("f i i1 = " + Float.floatToIntBits(f) + "," + i + "," + i1);
    System.out.println("l f1 i2 = " + l + "," + Float.floatToIntBits(f1) + "," + i2);
    System.out.println("d by s1 = " + Double.doubleToLongBits(d) + "," + by + "," + s1);
    System.out.println("i8 by2 i9 = " + i8 + "," + by2 + "," + i9);
    System.out.println("i10 lArr iArr = " + i10 + "," + checkSum(lArr) + "," + checkSum(iArr));
    System.out.println("bArr dArr1 = " + checkSum(bArr) + "," + Double.doubleToLongBits(checkSum(dArr1)));

    System.out.println("iFld bFld dFld = " + iFld + "," + (bFld ? 1 : 0) + "," + Double.doubleToLongBits(dFld));
    System.out.println("sArrFld = " + checkSum(sArrFld));

    System.out.println("iMeth_check_sum: " + iMeth_check_sum);
}
}
